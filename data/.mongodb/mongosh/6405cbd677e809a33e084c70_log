{"t":{"$date":"2023-03-06T11:17:42.283Z"},"s":"I","c":"MONGOSH","id":1000000000,"ctx":"log","msg":"Starting log","attr":{"execPath":"/usr/bin/mongosh","envInfo":{"EDITOR":null,"NODE_OPTIONS":null,"TERM":"xterm"},"version":"1.8.0","distributionKind":"compiled","buildArch":"x64","buildPlatform":"linux","buildTarget":"linux-x64","buildTime":"2023-02-28T13:57:25.355Z","gitVersion":"9cf53bc336c79e505cf034bf5e6f3b3b3796cf25","nodeVersion":"v16.19.1","opensslVersion":"1.1.1t+quic","sharedOpenssl":false}}
{"t":{"$date":"2023-03-06T11:17:42.305Z"},"s":"I","c":"MONGOSH","id":1000000005,"ctx":"config","msg":"User updated"}
{"t":{"$date":"2023-03-06T11:17:42.374Z"},"s":"I","c":"MONGOSH","id":1000000048,"ctx":"config","msg":"Loading global configuration file","attr":{"filename":"/etc/mongosh.conf","found":false}}
{"t":{"$date":"2023-03-06T11:17:42.382Z"},"s":"I","c":"DEVTOOLS-CONNECT","id":1000000042,"ctx":"mongosh-connect","msg":"Initiating connection attempt","attr":{"uri":"mongodb://<credentials>@127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+1.8.0","driver":{"name":"nodejs|mongosh","version":"5.1.0"},"devtoolsConnectVersion":"1.4.4","host":"127.0.0.1:27017"}}
{"t":{"$date":"2023-03-06T11:17:42.391Z"},"s":"I","c":"DEVTOOLS-CONNECT","id":1000000035,"ctx":"mongosh-connect","msg":"Server heartbeat succeeded","attr":{"connectionId":"127.0.0.1:27017"}}
{"t":{"$date":"2023-03-06T11:17:42.413Z"},"s":"I","c":"DEVTOOLS-CONNECT","id":1000000037,"ctx":"mongosh-connect","msg":"Connection attempt finished"}
{"t":{"$date":"2023-03-06T11:17:42.463Z"},"s":"I","c":"MONGOSH","id":1000000004,"ctx":"connect","msg":"Connecting to server","attr":{"session_id":"6405cbd677e809a33e084c70","userId":null,"telemetryAnonymousId":"6405bc96ab70e5f05a1f88e2","connectionUri":"<mongodb uri><ip address>:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+1.8.0","is_atlas":false,"is_localhost":true,"is_do":false,"server_version":"6.0.4","node_version":"v16.19.1","mongosh_version":"1.8.0","server_os":"linux","server_arch":"x86_64","is_enterprise":false,"auth_type":"DEFAULT","is_data_federation":false,"dl_version":null,"atlas_version":null,"is_genuine":true,"non_genuine_server_name":"mongodb","fcv":"6.0","api_version":null,"api_strict":null,"api_deprecation_errors":null}}
{"t":{"$date":"2023-03-06T11:17:42.472Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"adminCommand","class":"Database","db":"test","arguments":{"cmd":{"ping":1}}}}
{"t":{"$date":"2023-03-06T11:17:42.475Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getSiblingDB","class":"Database","db":"test","arguments":{"db":"admin"}}}
{"t":{"$date":"2023-03-06T11:17:42.577Z"},"s":"I","c":"MONGOSH","id":1000000010,"ctx":"shell-api","msg":"Initialized context","attr":{"method":"setCtx","arguments":{}}}
{"t":{"$date":"2023-03-06T11:17:42.585Z"},"s":"I","c":"MONGOSH","id":1000000009,"ctx":"shell-api","msg":"Used \"show\" command","attr":{"method":"show startupWarnings"}}
{"t":{"$date":"2023-03-06T11:17:42.587Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"adminCommand","class":"Database","db":"test","arguments":{"cmd":{"getLog":"startupWarnings"}}}}
{"t":{"$date":"2023-03-06T11:17:42.589Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getSiblingDB","class":"Database","db":"test","arguments":{"db":"admin"}}}
{"t":{"$date":"2023-03-06T11:17:42.592Z"},"s":"I","c":"MONGOSH","id":1000000009,"ctx":"shell-api","msg":"Used \"show\" command","attr":{"method":"show freeMonitoring"}}
{"t":{"$date":"2023-03-06T11:17:42.594Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"adminCommand","class":"Database","db":"test","arguments":{"cmd":{"getFreeMonitoringStatus":1}}}}
{"t":{"$date":"2023-03-06T11:17:42.596Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getSiblingDB","class":"Database","db":"test","arguments":{"db":"admin"}}}
{"t":{"$date":"2023-03-06T11:17:42.605Z"},"s":"I","c":"MONGOSH","id":1000000009,"ctx":"shell-api","msg":"Used \"show\" command","attr":{"method":"show automationNotices"}}
{"t":{"$date":"2023-03-06T11:17:42.618Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"hello","class":"Database","db":"test","arguments":{}}}
{"t":{"$date":"2023-03-06T11:17:42.620Z"},"s":"I","c":"MONGOSH","id":1000000009,"ctx":"shell-api","msg":"Used \"show\" command","attr":{"method":"show nonGenuineMongoDBCheck"}}
{"t":{"$date":"2023-03-06T11:17:42.624Z"},"s":"I","c":"MONGOSH-SNIPPETS","id":1000000024,"ctx":"snippets","msg":"Fetching snippet index","attr":{"refreshMode":"allow-cached"}}
{"t":{"$date":"2023-03-06T11:17:42.650Z"},"s":"I","c":"MONGOSH-SNIPPETS","id":1000000019,"ctx":"snippets","msg":"Loaded snippets","attr":{"installdir":"/data/db/.mongodb/mongosh/snippets"}}
{"t":{"$date":"2023-03-06T11:17:42.653Z"},"s":"I","c":"MONGOSH-SNIPPETS","id":1000000027,"ctx":"snippets","msg":"Fetching snippet index done"}
{"t":{"$date":"2023-03-06T11:17:42.683Z"},"s":"I","c":"MONGOSH-SNIPPETS","id":1000000024,"ctx":"snippets","msg":"Fetching snippet index","attr":{"refreshMode":"force-refresh"}}
{"t":{"$date":"2023-03-06T11:17:42.687Z"},"s":"I","c":"MONGOSH","id":1000000002,"ctx":"repl","msg":"Started REPL","attr":{"version":"1.8.0"}}
{"t":{"$date":"2023-03-06T11:17:43.228Z"},"s":"I","c":"MONGOSH-SNIPPETS","id":1000000027,"ctx":"snippets","msg":"Fetching snippet index done"}
{"t":{"$date":"2023-03-06T11:17:49.027Z"},"s":"I","c":"MONGOSH","id":1000000009,"ctx":"shell-api","msg":"Used \"show\" command","attr":{"method":"show dbs"}}
{"t":{"$date":"2023-03-06T11:34:23.931Z"},"s":"I","c":"MONGOSH","id":1000000008,"ctx":"shell-api","msg":"Used \"use\" command","attr":{"db":"ny"}}
{"t":{"$date":"2023-03-06T11:34:24.037Z"},"s":"I","c":"MONGOSH","id":1000000004,"ctx":"connect","msg":"Connecting to server","attr":{"session_id":"6405cbd677e809a33e084c70","userId":null,"telemetryAnonymousId":"6405bc96ab70e5f05a1f88e2","connectionUri":"<mongodb uri><ip address>:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+1.8.0","is_atlas":false,"is_localhost":true,"is_do":false,"server_version":"6.0.4","node_version":"v16.19.1","mongosh_version":"1.8.0","server_os":"linux","server_arch":"x86_64","is_enterprise":false,"auth_type":"DEFAULT","is_data_federation":false,"dl_version":null,"atlas_version":null,"is_genuine":true,"non_genuine_server_name":"mongodb","fcv":"6.0","api_version":null,"api_strict":null,"api_deprecation_errors":null}}
{"t":{"$date":"2023-03-06T11:34:41.602Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.countDocuments()"}}
{"t":{"$date":"2023-03-06T11:34:41.733Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"countDocuments","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-06T11:36:37.281Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({ cuisine: \"Delicatessen\" })"}}
{"t":{"$date":"2023-03-06T11:36:37.287Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"cuisine":"Delicatessen"},"options":{}}}}
{"t":{"$date":"2023-03-06T11:40:00.171Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({ cuisine: { $in: [\"Delicatessen\", \"American\"] } })"}}
{"t":{"$date":"2023-03-06T11:40:00.176Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"cuisine":{"$in":["Delicatessen","American"]}},"options":{}}}}
{"t":{"$date":"2023-03-06T11:40:48.633Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({ borough: \"Brooklyn\", cuisine: \"Hamburgers\" })"}}
{"t":{"$date":"2023-03-06T11:40:48.646Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"borough":"Brooklyn","cuisine":"Hamburgers"},"options":{}}}}
{"t":{"$date":"2023-03-06T13:57:29.609Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({ cuisine: 'Italienne', 'grades.score':{$gt: 10}} )"}}
{"t":{"$date":"2023-03-06T13:57:29.615Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"cuisine":"Italienne","grades.score":{"$gt":10}},"options":{}}}}
{"t":{"$date":"2023-03-06T13:58:09.493Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({ cuisine: 'Italian', 'grades.score':{$gt: 10}} )"}}
{"t":{"$date":"2023-03-06T13:58:09.500Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"cuisine":"Italian","grades.score":{"$gt":10}},"options":{}}}}
{"t":{"$date":"2023-03-06T13:58:29.087Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({ cuisine: 'Italian', 'grades.score':{$gt: 10}} ).count()"}}
{"t":{"$date":"2023-03-06T13:58:29.093Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"cuisine":"Italian","grades.score":{"$gt":10}},"options":{}}}}
{"t":{"$date":"2023-03-06T13:58:29.116Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-06T14:01:20.119Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({ cuisine: 'Italian', 'grades.score':{$gt: 10}}).count()"}}
{"t":{"$date":"2023-03-06T14:01:20.127Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"cuisine":"Italian","grades.score":{"$gt":10}},"options":{}}}}
{"t":{"$date":"2023-03-06T14:01:20.149Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-06T14:01:30.600Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({ cuisine: 'Italian', 'grades.score':{$gt: 20}}).count()"}}
{"t":{"$date":"2023-03-06T14:01:30.611Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"cuisine":"Italian","grades.score":{"$gt":20}},"options":{}}}}
{"t":{"$date":"2023-03-06T14:01:30.637Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-06T14:01:55.165Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({ cuisine: 'Italian', 'grades.score':{$gt: 20}})"}}
{"t":{"$date":"2023-03-06T14:01:55.170Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"cuisine":"Italian","grades.score":{"$gt":20}},"options":{}}}}
{"t":{"$date":"2023-03-06T14:02:06.478Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({ cuisine: 'Italian', 'grades.score':{$gt: 10}})"}}
{"t":{"$date":"2023-03-06T14:02:06.487Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"cuisine":"Italian","grades.score":{"$gt":10}},"options":{}}}}
{"t":{"$date":"2023-03-06T14:02:13.434Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({ cuisine: 'Italian', 'grades.score':{$gt: 10}}).count()"}}
{"t":{"$date":"2023-03-06T14:02:13.439Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"cuisine":"Italian","grades.score":{"$gt":10}},"options":{}}}}
{"t":{"$date":"2023-03-06T14:02:13.461Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-06T14:05:01.594Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({'grades.score':{$gt:20}, 'grades.grade':A})"}}
{"t":{"$date":"2023-03-06T14:05:01.611Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"ReferenceError: A is not defined","attr":{"message":"A is not defined","name":"ReferenceError","stack":"ReferenceError: A is not defined\n    at REPL16:38:51\n    at REPL16:53:5\n    at REPL16:58:3\n    at Script.runInContext (node:vm:141:12)\n    at PrettyREPLServer.defaultEval (node:repl:574:29)\n    at bound (node:domain:433:15)\n    at PrettyREPLServer.runBound (node:domain:444:12)\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799948\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799676\n    at node:internal/util:364:7"}}
{"t":{"$date":"2023-03-06T14:05:10.772Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({'grades.score':{$gt:20}, 'grades.grade':'A'})"}}
{"t":{"$date":"2023-03-06T14:05:10.777Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"grades.score":{"$gt":20},"grades.grade":"A"},"options":{}}}}
{"t":{"$date":"2023-03-06T14:06:39.761Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({'grades.score':{$gt:20}, 'grades.grade':'A'})"}}
{"t":{"$date":"2023-03-06T14:06:39.768Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"grades.score":{"$gt":20},"grades.grade":"A"},"options":{}}}}
{"t":{"$date":"2023-03-06T14:08:28.572Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token, expected \",\" (1:65)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind({\u001b[32m'grades.score'\u001b[39m\u001b[33m:\u001b[39m{$gt\u001b[33m:\u001b[39m\u001b[35m20\u001b[39m}\u001b[33m,\u001b[39m \u001b[32m'grades.grade'\u001b[39m\u001b[33m:\u001b[39m\u001b[32m'A'\u001b[39m}{name\u001b[33m:\u001b[39m\u001b[35m1\u001b[39m})\u001b[33m.\u001b[39msort({key\u001b[33m:\u001b[39m\u001b[33m-\u001b[39m\u001b[35m1\u001b[39m})\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":1,"column":65,"index":65},"pos":65,"message":"Unexpected token, expected \",\" (1:65)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind({\u001b[32m'grades.score'\u001b[39m\u001b[33m:\u001b[39m{$gt\u001b[33m:\u001b[39m\u001b[35m20\u001b[39m}\u001b[33m,\u001b[39m \u001b[32m'grades.grade'\u001b[39m\u001b[33m:\u001b[39m\u001b[32m'A'\u001b[39m}{name\u001b[33m:\u001b[39m\u001b[35m1\u001b[39m})\u001b[33m.\u001b[39msort({key\u001b[33m:\u001b[39m\u001b[33m-\u001b[39m\u001b[35m1\u001b[39m})\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token, expected \",\" (1:65)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind({\u001b[32m'grades.score'\u001b[39m\u001b[33m:\u001b[39m{$gt\u001b[33m:\u001b[39m\u001b[35m20\u001b[39m}\u001b[33m,\u001b[39m \u001b[32m'grades.grade'\u001b[39m\u001b[33m:\u001b[39m\u001b[32m'A'\u001b[39m}{name\u001b[33m:\u001b[39m\u001b[35m1\u001b[39m})\u001b[33m.\u001b[39msort({key\u001b[33m:\u001b[39m\u001b[33m-\u001b[39m\u001b[35m1\u001b[39m})\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-06T14:08:41.291Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({'grades.score':{$gt:20}, 'grades.grade':'A'},{name:1}).sort({key:-1})"}}
{"t":{"$date":"2023-03-06T14:08:41.297Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"grades.score":{"$gt":20},"grades.grade":"A"},"options":{"projection":{"name":1}}}}}
{"t":{"$date":"2023-03-06T14:09:33.303Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({'grades.score':{$gt:20}, 'grades.grade':'A'},{name:1}).sort({name:-1})"}}
{"t":{"$date":"2023-03-06T14:09:33.309Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"grades.score":{"$gt":20},"grades.grade":"A"},"options":{"projection":{"name":1}}}}}
{"t":{"$date":"2023-03-06T14:10:55.205Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({'grades.score':{$gt:20}, 'grades.grade':'A'},{name:1}).sort({name:1})"}}
{"t":{"$date":"2023-03-06T14:10:55.211Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"grades.score":{"$gt":20},"grades.grade":"A"},"options":{"projection":{"name":1}}}}}
{"t":{"$date":"2023-03-06T14:11:02.091Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({'grades.score':{$gt:20}, 'grades.grade':'A'},{name:1}).sort({name:-1})"}}
{"t":{"$date":"2023-03-06T14:11:02.096Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"grades.score":{"$gt":20},"grades.grade":"A"},"options":{"projection":{"name":1}}}}}
{"t":{"$date":"2023-03-06T14:14:25.369Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({'grades.score':{$gt:20}})"}}
{"t":{"$date":"2023-03-06T14:14:25.378Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"grades.score":{"$gt":20}},"options":{}}}}
{"t":{"$date":"2023-03-06T14:14:33.686Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({ 'grades.score': { $gt: 20 } }).count()"}}
{"t":{"$date":"2023-03-06T14:14:33.697Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"grades.score":{"$gt":20}},"options":{}}}}
{"t":{"$date":"2023-03-06T14:14:33.771Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-06T14:14:43.979Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({ 'grades.score': { $gt: 20 } }).count()"}}
{"t":{"$date":"2023-03-06T14:14:43.987Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"grades.score":{"$gt":20}},"options":{}}}}
{"t":{"$date":"2023-03-06T14:14:44.038Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-06T14:15:13.877Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({'grades.score':{$gt:20}, 'grades.grade':'A'},{name:1}).count()"}}
{"t":{"$date":"2023-03-06T14:15:13.886Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"grades.score":{"$gt":20},"grades.grade":"A"},"options":{"projection":{"name":1}}}}}
{"t":{"$date":"2023-03-06T14:15:13.945Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-06T14:16:08.868Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token, expected \",\" (2:0)\n\n\u001b[0m \u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind({\u001b[32m'grades.score'\u001b[39m\u001b[33m:\u001b[39m{$gt\u001b[33m:\u001b[39m\u001b[35m20\u001b[39m}\u001b[33m,\u001b[39m \u001b[32m'grades.grade'\u001b[39m\u001b[33m:\u001b[39m\u001b[32m'A'\u001b[39m}\u001b[33m,\u001b[39m{name\u001b[33m:\u001b[39m\u001b[35m1\u001b[39m}\u001b[33m.\u001b[39msort({name\u001b[33m:\u001b[39m\u001b[33m-\u001b[39m\u001b[35m1\u001b[39m})\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind({\u001b[32m'grades.score'\u001b[39m\u001b[33m:\u001b[39m{$gt\u001b[33m:\u001b[39m\u001b[35m20\u001b[39m}\u001b[33m,\u001b[39m \u001b[32m'grades.grade'\u001b[39m\u001b[33m:\u001b[39m\u001b[32m'A'\u001b[39m}\u001b[33m,\u001b[39m{name\u001b[33m:\u001b[39m\u001b[35m1\u001b[39m}\u001b[33m.\u001b[39msort({name\u001b[33m:\u001b[39m\u001b[33m-\u001b[39m\u001b[35m1\u001b[39m}))\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 3 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":2,"column":0,"index":91},"pos":91,"message":"Unexpected token, expected \",\" (2:0)\n\n\u001b[0m \u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind({\u001b[32m'grades.score'\u001b[39m\u001b[33m:\u001b[39m{$gt\u001b[33m:\u001b[39m\u001b[35m20\u001b[39m}\u001b[33m,\u001b[39m \u001b[32m'grades.grade'\u001b[39m\u001b[33m:\u001b[39m\u001b[32m'A'\u001b[39m}\u001b[33m,\u001b[39m{name\u001b[33m:\u001b[39m\u001b[35m1\u001b[39m}\u001b[33m.\u001b[39msort({name\u001b[33m:\u001b[39m\u001b[33m-\u001b[39m\u001b[35m1\u001b[39m})\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind({\u001b[32m'grades.score'\u001b[39m\u001b[33m:\u001b[39m{$gt\u001b[33m:\u001b[39m\u001b[35m20\u001b[39m}\u001b[33m,\u001b[39m \u001b[32m'grades.grade'\u001b[39m\u001b[33m:\u001b[39m\u001b[32m'A'\u001b[39m}\u001b[33m,\u001b[39m{name\u001b[33m:\u001b[39m\u001b[35m1\u001b[39m}\u001b[33m.\u001b[39msort({name\u001b[33m:\u001b[39m\u001b[33m-\u001b[39m\u001b[35m1\u001b[39m}))\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 3 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token, expected \",\" (2:0)\n\n\u001b[0m \u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind({\u001b[32m'grades.score'\u001b[39m\u001b[33m:\u001b[39m{$gt\u001b[33m:\u001b[39m\u001b[35m20\u001b[39m}\u001b[33m,\u001b[39m \u001b[32m'grades.grade'\u001b[39m\u001b[33m:\u001b[39m\u001b[32m'A'\u001b[39m}\u001b[33m,\u001b[39m{name\u001b[33m:\u001b[39m\u001b[35m1\u001b[39m}\u001b[33m.\u001b[39msort({name\u001b[33m:\u001b[39m\u001b[33m-\u001b[39m\u001b[35m1\u001b[39m})\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind({\u001b[32m'grades.score'\u001b[39m\u001b[33m:\u001b[39m{$gt\u001b[33m:\u001b[39m\u001b[35m20\u001b[39m}\u001b[33m,\u001b[39m \u001b[32m'grades.grade'\u001b[39m\u001b[33m:\u001b[39m\u001b[32m'A'\u001b[39m}\u001b[33m,\u001b[39m{name\u001b[33m:\u001b[39m\u001b[35m1\u001b[39m}\u001b[33m.\u001b[39msort({name\u001b[33m:\u001b[39m\u001b[33m-\u001b[39m\u001b[35m1\u001b[39m}))\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 3 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-06T14:16:41.811Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({'grades.score':{$gt:20}, 'grades.grade':'A'},{name:1}).sort({name:-1})"}}
{"t":{"$date":"2023-03-06T14:16:41.818Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"grades.score":{"$gt":20},"grades.grade":"A"},"options":{"projection":{"name":1}}}}}
{"t":{"$date":"2023-03-06T14:16:57.751Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"try { db } catch {}"}}
{"t":{"$date":"2023-03-06T14:17:13.770Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.distinct('borought')"}}
{"t":{"$date":"2023-03-06T14:17:13.776Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"distinct","class":"Collection","db":"ny","coll":"restaurants","arguments":{"field":"borought","options":{}}}}
{"t":{"$date":"2023-03-06T14:17:28.071Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.distinct('borough')"}}
{"t":{"$date":"2023-03-06T14:17:28.083Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"distinct","class":"Collection","db":"ny","coll":"restaurants","arguments":{"field":"borough","options":{}}}}
{"t":{"$date":"2023-03-06T14:29:44.855Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.findOne()"}}
{"t":{"$date":"2023-03-06T14:29:44.863Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-06T14:30:38.301Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.distinct(\"Bronx\", {cuisine})"}}
{"t":{"$date":"2023-03-06T14:30:38.319Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"ReferenceError: cuisine is not defined","attr":{"message":"cuisine is not defined","name":"ReferenceError","stack":"ReferenceError: cuisine is not defined\n    at REPL45:35:50\n    at REPL45:50:5\n    at REPL45:55:3\n    at Script.runInContext (node:vm:141:12)\n    at PrettyREPLServer.defaultEval (node:repl:574:29)\n    at bound (node:domain:433:15)\n    at PrettyREPLServer.runBound (node:domain:444:12)\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799948\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799676\n    at node:internal/util:364:7"}}
{"t":{"$date":"2023-03-06T14:31:13.772Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token (1:43)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mdistinct(\u001b[32m\"cuisine\"\u001b[39m\u001b[33m,\u001b[39m {\u001b[32m'Bronx'\u001b[39m})\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":1,"column":43,"index":43},"pos":43,"message":"Unexpected token (1:43)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mdistinct(\u001b[32m\"cuisine\"\u001b[39m\u001b[33m,\u001b[39m {\u001b[32m'Bronx'\u001b[39m})\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token (1:43)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mdistinct(\u001b[32m\"cuisine\"\u001b[39m\u001b[33m,\u001b[39m {\u001b[32m'Bronx'\u001b[39m})\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-06T14:31:25.297Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token, expected \",\" (1:34)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mdistinct(\u001b[32m\"cuisine\"\u001b[39m {\u001b[32m'Bronx'\u001b[39m})\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":1,"column":34,"index":34},"pos":34,"message":"Unexpected token, expected \",\" (1:34)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mdistinct(\u001b[32m\"cuisine\"\u001b[39m {\u001b[32m'Bronx'\u001b[39m})\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token, expected \",\" (1:34)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mdistinct(\u001b[32m\"cuisine\"\u001b[39m {\u001b[32m'Bronx'\u001b[39m})\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-06T14:43:26.343Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token, expected \",\" (1:34)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mdistinct(\u001b[32m\"cuisine\"\u001b[39m {\u001b[32m'Bronx'\u001b[39m})\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":1,"column":34,"index":34},"pos":34,"message":"Unexpected token, expected \",\" (1:34)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mdistinct(\u001b[32m\"cuisine\"\u001b[39m {\u001b[32m'Bronx'\u001b[39m})\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token, expected \",\" (1:34)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mdistinct(\u001b[32m\"cuisine\"\u001b[39m {\u001b[32m'Bronx'\u001b[39m})\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-06T14:48:49.499Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.distinct('Bronx', {cuisine:1})"}}
{"t":{"$date":"2023-03-06T14:48:49.505Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"distinct","class":"Collection","db":"ny","coll":"restaurants","arguments":{"field":"Bronx","query":{"cuisine":1},"options":{}}}}
{"t":{"$date":"2023-03-06T14:49:28.288Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.distinct('Bronx', { cuisine: 1 })"}}
{"t":{"$date":"2023-03-06T14:49:28.296Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"distinct","class":"Collection","db":"ny","coll":"restaurants","arguments":{"field":"Bronx","query":{"cuisine":1},"options":{}}}}
{"t":{"$date":"2023-03-06T14:50:20.138Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.distinct('cuisne', {'borough': 'Bronx'})"}}
{"t":{"$date":"2023-03-06T14:50:20.150Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"distinct","class":"Collection","db":"ny","coll":"restaurants","arguments":{"field":"cuisne","query":{"borough":"Bronx"},"options":{}}}}
{"t":{"$date":"2023-03-06T14:50:49.570Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.distinct(cuisne, { 'borough': 'Bronx' })"}}
{"t":{"$date":"2023-03-06T14:50:49.580Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"ReferenceError: cuisne is not defined","attr":{"message":"cuisne is not defined","name":"ReferenceError","stack":"ReferenceError: cuisne is not defined\n    at REPL54:34:237\n    at REPL54:50:5\n    at REPL54:55:3\n    at Script.runInContext (node:vm:141:12)\n    at PrettyREPLServer.defaultEval (node:repl:574:29)\n    at bound (node:domain:433:15)\n    at PrettyREPLServer.runBound (node:domain:444:12)\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799948\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799676\n    at node:internal/util:364:7"}}
{"t":{"$date":"2023-03-06T14:51:12.652Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.distinct('cuisne', { borough: 'Bronx' })"}}
{"t":{"$date":"2023-03-06T14:51:12.665Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"distinct","class":"Collection","db":"ny","coll":"restaurants","arguments":{"field":"cuisne","query":{"borough":"Bronx"},"options":{}}}}
{"t":{"$date":"2023-03-06T14:51:56.972Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token, expected \",\" (1:33)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mdistinct(\u001b[32m'cuisne'\u001b[39m { borough\u001b[33m:\u001b[39m \u001b[32m'Bronx'\u001b[39m })\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":1,"column":33,"index":33},"pos":33,"message":"Unexpected token, expected \",\" (1:33)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mdistinct(\u001b[32m'cuisne'\u001b[39m { borough\u001b[33m:\u001b[39m \u001b[32m'Bronx'\u001b[39m })\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token, expected \",\" (1:33)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mdistinct(\u001b[32m'cuisne'\u001b[39m { borough\u001b[33m:\u001b[39m \u001b[32m'Bronx'\u001b[39m })\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-06T14:53:50.883Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.distinct({borough: 'Bronx'}, {cuisine:1})"}}
{"t":{"$date":"2023-03-06T14:53:50.890Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"distinct","class":"Collection","db":"ny","coll":"restaurants","arguments":{"field":{"borough":"Bronx"},"query":{"cuisine":1},"options":{}}}}
{"t":{"$date":"2023-03-06T14:53:50.895Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: BSON field 'distinct.key' is the wrong type 'object', expected type 'string'","attr":{"ok":0,"code":14,"codeName":"TypeMismatch","message":"BSON field 'distinct.key' is the wrong type 'object', expected type 'string'","name":"MongoServerError","stack":"MongoServerError: BSON field 'distinct.key' is the wrong type 'object', expected type 'string'\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-06T14:54:19.637Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({borough: 'Bronx'}, {cuisine:1})"}}
{"t":{"$date":"2023-03-06T14:54:19.642Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"borough":"Bronx"},"options":{"projection":{"cuisine":1}}}}}
{"t":{"$date":"2023-03-06T14:56:29.703Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token, expected \",\" (1:48)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind({borough\u001b[33m:\u001b[39m \u001b[32m'Bronx'\u001b[39m}\u001b[33m,\u001b[39m \u001b[32m'grades'\u001b[39m\u001b[33m:\u001b[39m{$gt\u001b[33m:\u001b[39m\u001b[35m4\u001b[39m})\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":1,"column":48,"index":48},"pos":48,"message":"Unexpected token, expected \",\" (1:48)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind({borough\u001b[33m:\u001b[39m \u001b[32m'Bronx'\u001b[39m}\u001b[33m,\u001b[39m \u001b[32m'grades'\u001b[39m\u001b[33m:\u001b[39m{$gt\u001b[33m:\u001b[39m\u001b[35m4\u001b[39m})\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token, expected \",\" (1:48)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind({borough\u001b[33m:\u001b[39m \u001b[32m'Bronx'\u001b[39m}\u001b[33m,\u001b[39m \u001b[32m'grades'\u001b[39m\u001b[33m:\u001b[39m{$gt\u001b[33m:\u001b[39m\u001b[35m4\u001b[39m})\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-06T14:57:01.651Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token, expected \",\" (1:46)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind({borough\u001b[33m:\u001b[39m \u001b[32m'Bronx'\u001b[39m}\u001b[33m,\u001b[39m grades\u001b[33m:\u001b[39m{$gt\u001b[33m:\u001b[39m\u001b[35m4\u001b[39m})\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":1,"column":46,"index":46},"pos":46,"message":"Unexpected token, expected \",\" (1:46)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind({borough\u001b[33m:\u001b[39m \u001b[32m'Bronx'\u001b[39m}\u001b[33m,\u001b[39m grades\u001b[33m:\u001b[39m{$gt\u001b[33m:\u001b[39m\u001b[35m4\u001b[39m})\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token, expected \",\" (1:46)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind({borough\u001b[33m:\u001b[39m \u001b[32m'Bronx'\u001b[39m}\u001b[33m,\u001b[39m grades\u001b[33m:\u001b[39m{$gt\u001b[33m:\u001b[39m\u001b[35m4\u001b[39m})\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-06T14:58:05.495Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({borough: 'Bronx', grades:{$gt:4}})"}}
{"t":{"$date":"2023-03-06T14:58:05.500Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"borough":"Bronx","grades":{"$gt":4}},"options":{}}}}
{"t":{"$date":"2023-03-06T14:58:15.165Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({borough: 'Bronx', grades:{$gt:4}})"}}
{"t":{"$date":"2023-03-06T14:58:15.169Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"borough":"Bronx","grades":{"$gt":4}},"options":{}}}}
{"t":{"$date":"2023-03-06T15:39:41.975Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.findOne()"}}
{"t":{"$date":"2023-03-06T15:39:41.983Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-06T15:42:56.666Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token (1:29)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind({\u001b[32m'grades'\u001b[39m[\u001b[35m0\u001b[39m]\u001b[33m:\u001b[39m {$in\u001b[33m:\u001b[39m [\u001b[32m'A'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'B'\u001b[39m]}})\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":1,"column":29,"index":29},"pos":29,"message":"Unexpected token (1:29)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind({\u001b[32m'grades'\u001b[39m[\u001b[35m0\u001b[39m]\u001b[33m:\u001b[39m {$in\u001b[33m:\u001b[39m [\u001b[32m'A'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'B'\u001b[39m]}})\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token (1:29)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind({\u001b[32m'grades'\u001b[39m[\u001b[35m0\u001b[39m]\u001b[33m:\u001b[39m {$in\u001b[33m:\u001b[39m [\u001b[32m'A'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'B'\u001b[39m]}})\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-06T15:43:30.955Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({'grades.0.grade': {$in: ['A', 'B']}})"}}
{"t":{"$date":"2023-03-06T15:43:30.963Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"grades.0.grade":{"$in":["A","B"]}},"options":{}}}}
{"t":{"$date":"2023-03-06T15:46:45.253Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({$or: [{name: /^Coffee/}, {name: /^coffee/}]})"}}
{"t":{"$date":"2023-03-06T15:46:45.257Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$or":[{"name":{}},{"name":{}}]},"options":{}}}}
{"t":{"$date":"2023-03-06T15:49:37.557Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({borough: 'Bronx', $or:[{name: /^Coffee/}, {name: /^coffee/}]})"}}
{"t":{"$date":"2023-03-06T15:49:37.561Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"borough":"Bronx","$or":[{"name":{}},{"name":{}}]},"options":{}}}}
{"t":{"$date":"2023-03-06T15:49:56.931Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({borough: 'Bronx', $or:[{name: /^Coffee/}, {name: /^coffee/}]}).count()"}}
{"t":{"$date":"2023-03-06T15:49:56.936Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"borough":"Bronx","$or":[{"name":{}},{"name":{}}]},"options":{}}}}
{"t":{"$date":"2023-03-06T15:49:56.958Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-06T15:52:56.438Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({$ne: 'Starbucks'}, {$or: [{name: /^Coffee/}, {name: /^coffee/}]})"}}
{"t":{"$date":"2023-03-06T15:52:56.445Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$ne":"Starbucks"},"options":{"projection":{"$or":[{"name":{}},{"name":{}}]}}}}}
{"t":{"$date":"2023-03-06T15:52:56.455Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: unknown top level operator: $ne. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.","attr":{"ok":0,"code":2,"codeName":"BadValue","message":"unknown top level operator: $ne. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.","name":"MongoServerError","stack":"MongoServerError: unknown top level operator: $ne. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-06T15:54:40.346Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({$ne: 'Starbucks'}, {$or: [{name: /^Coffee/}, {name: /^coffee/}]}, {$ne: 'Starbucks'})"}}
{"t":{"$date":"2023-03-06T15:54:40.351Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$ne":"Starbucks"},"options":{"$ne":"Starbucks","projection":{"$or":[{"name":{}},{"name":{}}]}}}}}
{"t":{"$date":"2023-03-06T15:54:40.374Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: unknown top level operator: $ne. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.","attr":{"ok":0,"code":2,"codeName":"BadValue","message":"unknown top level operator: $ne. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.","name":"MongoServerError","stack":"MongoServerError: unknown top level operator: $ne. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-06T15:56:57.264Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [{$or:[{name: /^Coffee/}, {name: /^coffee/}]}, {$ne: [{name: /^Starbucks/}]}]\n})"}}
{"t":{"$date":"2023-03-06T15:56:57.269Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"$or":[{"name":{}},{"name":{}}]},{"$ne":[{"name":{}}]}]},"options":{}}}}
{"t":{"$date":"2023-03-06T15:56:57.284Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: unknown top level operator: $ne. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.","attr":{"ok":0,"code":2,"codeName":"BadValue","message":"unknown top level operator: $ne. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.","name":"MongoServerError","stack":"MongoServerError: unknown top level operator: $ne. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-06T15:57:51.151Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [{$or:[{name: /^Coffee/}, {name: /^coffee/}]}, {$not: [{name: /^Starbucks/}]}]\n})"}}
{"t":{"$date":"2023-03-06T15:57:51.161Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"$or":[{"name":{}},{"name":{}}]},{"$not":[{"name":{}}]}]},"options":{}}}}
{"t":{"$date":"2023-03-06T15:57:51.177Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: unknown top level operator: $not. If you are trying to negate an entire expression, use $nor.","attr":{"ok":0,"code":2,"codeName":"BadValue","message":"unknown top level operator: $not. If you are trying to negate an entire expression, use $nor.","name":"MongoServerError","stack":"MongoServerError: unknown top level operator: $not. If you are trying to negate an entire expression, use $nor.\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-06T15:58:24.005Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [{$or:[{name: /^Coffee/}, {name: /^coffee/}]}, {$nor: [{name: /^Starbucks/}]}]\n})"}}
{"t":{"$date":"2023-03-06T15:58:24.011Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"$or":[{"name":{}},{"name":{}}]},{"$nor":[{"name":{}}]}]},"options":{}}}}
{"t":{"$date":"2023-03-06T16:00:59.077Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [{borough: 'Bronx'}, {$or:[{name: /^Coffee/}, {name: /^coffee/}]}, {$nor: [{name: /^Starbucks/}]}]\n})"}}
{"t":{"$date":"2023-03-06T16:00:59.085Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"borough":"Bronx"},{"$or":[{"name":{}},{"name":{}}]},{"$nor":[{"name":{}}]}]},"options":{}}}}
{"t":{"$date":"2023-03-07T08:14:10.192Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Missing semicolon. (1:3)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m dbs show\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"MissingSemicolon","loc":{"line":1,"column":3,"index":3},"pos":3,"message":"Missing semicolon. (1:3)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m dbs show\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Missing semicolon. (1:3)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m dbs show\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-07T08:14:23.147Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Missing semicolon. (1:2)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db show\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"MissingSemicolon","loc":{"line":1,"column":2,"index":2},"pos":2,"message":"Missing semicolon. (1:2)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db show\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Missing semicolon. (1:2)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m db show\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-07T08:14:39.736Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({'grades.0.grade': {$in: ['A', 'B']}})"}}
{"t":{"$date":"2023-03-07T08:14:39.747Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"grades.0.grade":{"$in":["A","B"]}},"options":{}}}}
{"t":{"$date":"2023-03-07T09:20:37.745Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [{borough: 'Bronx'}, {$or:[{name: /^Coffee/}, {name: /^coffee/}]}, {$ne: [{name: /^Starbucks/}]}]\n})"}}
{"t":{"$date":"2023-03-07T09:20:37.751Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"borough":"Bronx"},{"$or":[{"name":{}},{"name":{}}]},{"$ne":[{"name":{}}]}]},"options":{}}}}
{"t":{"$date":"2023-03-07T09:20:37.768Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: unknown top level operator: $ne. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.","attr":{"ok":0,"code":2,"codeName":"BadValue","message":"unknown top level operator: $ne. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.","name":"MongoServerError","stack":"MongoServerError: unknown top level operator: $ne. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-07T09:21:10.168Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token (2:110)\n\n\u001b[0m \u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind({\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2 |\u001b[39m     $and\u001b[33m:\u001b[39m [{borough\u001b[33m:\u001b[39m \u001b[32m'Bronx'\u001b[39m}\u001b[33m,\u001b[39m {$or\u001b[33m:\u001b[39m[{name\u001b[33m:\u001b[39m \u001b[35m/^Coffee/\u001b[39m}\u001b[33m,\u001b[39m {name\u001b[33m:\u001b[39m \u001b[35m/^coffee/\u001b[39m}]}\u001b[33m,\u001b[39m {$nor\u001b[33m:\u001b[39m [{name\u001b[33m:\u001b[39m \u001b[35m/^Starbucks/\u001b[39m}]}]\u001b[33m,\u001b[39m {name\u001b[33m:\u001b[39m\u001b[35m1\u001b[39m}\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                                                                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 3 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":2,"column":110,"index":132},"pos":132,"message":"Unexpected token (2:110)\n\n\u001b[0m \u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind({\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2 |\u001b[39m     $and\u001b[33m:\u001b[39m [{borough\u001b[33m:\u001b[39m \u001b[32m'Bronx'\u001b[39m}\u001b[33m,\u001b[39m {$or\u001b[33m:\u001b[39m[{name\u001b[33m:\u001b[39m \u001b[35m/^Coffee/\u001b[39m}\u001b[33m,\u001b[39m {name\u001b[33m:\u001b[39m \u001b[35m/^coffee/\u001b[39m}]}\u001b[33m,\u001b[39m {$nor\u001b[33m:\u001b[39m [{name\u001b[33m:\u001b[39m \u001b[35m/^Starbucks/\u001b[39m}]}]\u001b[33m,\u001b[39m {name\u001b[33m:\u001b[39m\u001b[35m1\u001b[39m}\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                                                                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 3 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token (2:110)\n\n\u001b[0m \u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind({\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2 |\u001b[39m     $and\u001b[33m:\u001b[39m [{borough\u001b[33m:\u001b[39m \u001b[32m'Bronx'\u001b[39m}\u001b[33m,\u001b[39m {$or\u001b[33m:\u001b[39m[{name\u001b[33m:\u001b[39m \u001b[35m/^Coffee/\u001b[39m}\u001b[33m,\u001b[39m {name\u001b[33m:\u001b[39m \u001b[35m/^coffee/\u001b[39m}]}\u001b[33m,\u001b[39m {$nor\u001b[33m:\u001b[39m [{name\u001b[33m:\u001b[39m \u001b[35m/^Starbucks/\u001b[39m}]}]\u001b[33m,\u001b[39m {name\u001b[33m:\u001b[39m\u001b[35m1\u001b[39m}\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                                                                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 3 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-07T09:49:15.131Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /Coffee Restaurant/i},\n        {_id:0, name:1}\n    ]\n})"}}
{"t":{"$date":"2023-03-07T09:49:15.137Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"_id":0,"name":1}]},"options":{}}}}
{"t":{"$date":"2023-03-07T09:50:37.231Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {name: /Coffee Restaurant/i},\n        {_id:0, name:1}  \n)"}}
{"t":{"$date":"2023-03-07T09:50:37.235Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"name":{}},"options":{"projection":{"_id":0,"name":1}}}}}
{"t":{"$date":"2023-03-07T09:51:23.782Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {name: /Coffee | Restaurant/i},\n        {_id:0, name:1}  \n)"}}
{"t":{"$date":"2023-03-07T09:51:23.788Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"name":{}},"options":{"projection":{"_id":0,"name":1}}}}}
{"t":{"$date":"2023-03-07T09:54:46.740Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /Coffee | Restaurant/i},\n        {name: /^(?!Starbucks)/}\n    ]\n    },\n        {_id:0, name:1}  \n)"}}
{"t":{"$date":"2023-03-07T09:54:46.749Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"name":{}}]},"options":{"projection":{"_id":0,"name":1}}}}}
{"t":{"$date":"2023-03-07T10:34:45.536Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {borough: /Bronx | Brooklyn/i},\n        {grades: {$size: 4}}\n    ]\n})"}}
{"t":{"$date":"2023-03-07T10:34:45.547Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"borough":{}},{"grades":{"$size":4}}]},"options":{}}}}
{"t":{"$date":"2023-03-07T10:35:25.702Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {borough: /Bronx | Brooklyn/i},\n        {grades: {$size: 4}}\n    ]\n})"}}
{"t":{"$date":"2023-03-07T10:35:25.708Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"borough":{}},{"grades":{"$size":4}}]},"options":{}}}}
{"t":{"$date":"2023-03-07T10:49:52.450Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {borough: /Bronx | Brooklyn/i},\n        {grades: {$size: 4}}\n    ]\n})"}}
{"t":{"$date":"2023-03-07T10:49:52.456Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"borough":{}},{"grades":{"$size":4}}]},"options":{}}}}
{"t":{"$date":"2023-03-07T10:50:25.547Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {borough: /Bronx | Brooklyn/i},\n    ]\n})"}}
{"t":{"$date":"2023-03-07T10:50:25.552Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"borough":{}}]},"options":{}}}}
{"t":{"$date":"2023-03-07T10:51:19.122Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {borough: /Bronx | Brooklyn/i},\n    ]\n},\n{_id:0, name: 1})"}}
{"t":{"$date":"2023-03-07T10:51:19.128Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"borough":{}}]},"options":{"projection":{"_id":0,"name":1}}}}}
{"t":{"$date":"2023-03-07T10:52:41.608Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {borough: {$or: ['Bronx', 'Brooklyn']}},\n    ]\n},\n{_id:0, name: 1})"}}
{"t":{"$date":"2023-03-07T10:52:41.615Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"borough":{"$or":["Bronx","Brooklyn"]}}]},"options":{"projection":{"_id":0,"name":1}}}}}
{"t":{"$date":"2023-03-07T10:52:41.628Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: unknown operator: $or","attr":{"ok":0,"code":2,"codeName":"BadValue","message":"unknown operator: $or","name":"MongoServerError","stack":"MongoServerError: unknown operator: $or\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-07T10:54:01.051Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n    ]\n},\n{_id:0, name: 1})"}}
{"t":{"$date":"2023-03-07T10:54:01.055Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}}]},"options":{"projection":{"_id":0,"name":1}}}}}
{"t":{"$date":"2023-03-07T10:55:36.433Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {$or: [{borough: 'Bronx'}, {borough: 'Brooklyn'}]},\n        {grades: {$size: 4}}\n\n    ]\n},\n{_id:0, name: 1})"}}
{"t":{"$date":"2023-03-07T10:55:36.439Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"$or":[{"borough":"Bronx"},{"borough":"Brooklyn"}]},{"grades":{"$size":4}}]},"options":{"projection":{"_id":0,"name":1}}}}}
{"t":{"$date":"2023-03-07T10:55:56.145Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {$or: [{borough: 'Bronx'}, {borough: 'Brooklyn'}]},\n        {grades: {$size: 4}}\n\n    ]\n},\n{_id:0, name: 1}).count()"}}
{"t":{"$date":"2023-03-07T10:55:56.149Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"$or":[{"borough":"Bronx"},{"borough":"Brooklyn"}]},{"grades":{"$size":4}}]},"options":{"projection":{"_id":0,"name":1}}}}}
{"t":{"$date":"2023-03-07T10:55:56.179Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-07T10:56:57.660Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {$or: [{borough: 'Bronx'}, {borough: 'Brooklyn'}]},\n        {grades: {$size: 4}}\n\n    ]\n},\n{_id:0, name: 1}).capitalize()"}}
{"t":{"$date":"2023-03-07T10:56:57.666Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"$or":[{"borough":"Bronx"},{"borough":"Brooklyn"}]},{"grades":{"$size":4}}]},"options":{"projection":{"_id":0,"name":1}}}}}
{"t":{"$date":"2023-03-07T10:56:57.681Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"TypeError: db.restaurant ... e: 1}).capitalize is not a function","attr":{"message":"db.restaurant ... e: 1}).capitalize is not a function","name":"TypeError","stack":"TypeError: db.restaurant ... e: 1}).capitalize is not a function\n    at REPL196:51:42\n    at async ShellEvaluator.innerEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931343)\n    at async ShellEvaluator.customEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931482)\n    at async MongoshNodeRepl.eval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:843292)\n    at async PrettyREPLServer.h.eval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:800185)"}}
{"t":{"$date":"2023-03-07T10:57:46.873Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {$or: [{borough: 'Bronx'}, {borough: 'Brooklyn'}]},\n        {grades: {$size: 4}}\n\n    ]\n},\n{_id:0, name: 1}).toUpperCase()"}}
{"t":{"$date":"2023-03-07T10:57:46.881Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"$or":[{"borough":"Bronx"},{"borough":"Brooklyn"}]},{"grades":{"$size":4}}]},"options":{"projection":{"_id":0,"name":1}}}}}
{"t":{"$date":"2023-03-07T10:57:46.895Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"TypeError: db.restaurant ... e: 1}).toUpperCase is not a function","attr":{"message":"db.restaurant ... e: 1}).toUpperCase is not a function","name":"TypeError","stack":"TypeError: db.restaurant ... e: 1}).toUpperCase is not a function\n    at REPL205:51:42\n    at async ShellEvaluator.innerEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931343)\n    at async ShellEvaluator.customEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931482)\n    at async MongoshNodeRepl.eval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:843292)\n    at async PrettyREPLServer.h.eval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:800185)"}}
{"t":{"$date":"2023-03-07T11:02:47.571Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {$or: [{borough: 'Bronx'}, {borough: 'Brooklyn'}]},\n        {grades: {$size: 4}}\n\n    ]\n},\n{_id:0, name: 1}).forEach(doc => print(doc.name).toUpperCase())"}}
{"t":{"$date":"2023-03-07T11:02:47.580Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"$or":[{"borough":"Bronx"},{"borough":"Brooklyn"}]},{"grades":{"$size":4}}]},"options":{"projection":{"_id":0,"name":1}}}}}
{"t":{"$date":"2023-03-07T11:02:47.622Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"TypeError: Cannot read properties of undefined (reading 'toUpperCase')","attr":{"message":"Cannot read properties of undefined (reading 'toUpperCase')","name":"TypeError","stack":"TypeError: Cannot read properties of undefined (reading 'toUpperCase')\n    at REPL214:60:235\n    at async Cursor.forEach (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1668574)\n    at async Cursor.forEach (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1755595)\n    at async Cursor.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1750244)\n    at async REPL214:78:25\n    at async ShellEvaluator.innerEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931343)\n    at async ShellEvaluator.customEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931482)\n    at async MongoshNodeRepl.eval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:843292)\n    at async PrettyREPLServer.h.eval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:800185)"}}
{"t":{"$date":"2023-03-07T11:03:27.554Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {$or: [{borough: 'Bronx'}, {borough: 'Brooklyn'}]},\n        {grades: {$size: 4}}\n\n    ]\n},\n{_id:0, name: 1}).forEach(doc => print(doc))"}}
{"t":{"$date":"2023-03-07T11:03:27.563Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"$or":[{"borough":"Bronx"},{"borough":"Brooklyn"}]},{"grades":{"$size":4}}]},"options":{"projection":{"_id":0,"name":1}}}}}
{"t":{"$date":"2023-03-07T11:03:53.795Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {$or: [{borough: 'Bronx'}, {borough: 'Brooklyn'}]},\n        {grades: {$size: 4}}\n\n    ]\n},\n{_id:0, name: 1}).forEach(doc => print(doc.name))"}}
{"t":{"$date":"2023-03-07T11:03:53.808Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"$or":[{"borough":"Bronx"},{"borough":"Brooklyn"}]},{"grades":{"$size":4}}]},"options":{"projection":{"_id":0,"name":1}}}}}
{"t":{"$date":"2023-03-07T11:04:13.563Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {$or: [{borough: 'Bronx'}, {borough: 'Brooklyn'}]},\n        {grades: {$size: 4}}\n\n    ]\n},\n{_id:0, name: 1}).forEach(doc => print(doc.name)).toUpperCase()"}}
{"t":{"$date":"2023-03-07T11:04:13.576Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"$or":[{"borough":"Bronx"},{"borough":"Brooklyn"}]},{"grades":{"$size":4}}]},"options":{"projection":{"_id":0,"name":1}}}}}
{"t":{"$date":"2023-03-07T11:04:13.691Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"TypeError: Cannot read properties of undefined (reading 'toUpperCase')","attr":{"message":"Cannot read properties of undefined (reading 'toUpperCase')","name":"TypeError","stack":"TypeError: Cannot read properties of undefined (reading 'toUpperCase')\n    at REPL241:78:42\n    at async ShellEvaluator.innerEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931343)\n    at async ShellEvaluator.customEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931482)\n    at async MongoshNodeRepl.eval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:843292)\n    at async PrettyREPLServer.h.eval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:800185)"}}
{"t":{"$date":"2023-03-07T11:05:14.852Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {$or: [{borough: 'Bronx'}, {borough: 'Brooklyn'}]},\n        {grades: {$size: 4}}\n\n    ]\n},\n{_id:0, name: 1}).forEach(doc => print(doc.name.toUpperCase()))"}}
{"t":{"$date":"2023-03-07T11:05:14.864Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"$or":[{"borough":"Bronx"},{"borough":"Brooklyn"}]},{"grades":{"$size":4}}]},"options":{"projection":{"_id":0,"name":1}}}}}
{"t":{"$date":"2023-03-07T11:06:29.682Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {$or: [{borough: 'Bronx'}, {borough: 'Brooklyn'}]},\n        {grades: {$size: 4}}\n\n    ]\n},\n{_id:0, name: 1, grades: 'grades.0.grades'}).forEach(doc => print(doc.name.toUpperCase()))"}}
{"t":{"$date":"2023-03-07T11:06:29.696Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"$or":[{"borough":"Bronx"},{"borough":"Brooklyn"}]},{"grades":{"$size":4}}]},"options":{"projection":{"_id":0,"name":1,"grades":"grades.0.grades"}}}}}
{"t":{"$date":"2023-03-07T11:09:07.818Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {$or: [{borough: 'Bronx'}, {borough: 'Brooklyn'}]},\n        {grades: {$size: 4}}\n\n    ]\n},\n{_id:0, name: 1, grades:1}).forEach(doc => {\n    print(doc.name.toUpperCase())\n    print(doc.grade[0])\n})"}}
{"t":{"$date":"2023-03-07T11:09:07.826Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"$or":[{"borough":"Bronx"},{"borough":"Brooklyn"}]},{"grades":{"$size":4}}]},"options":{"projection":{"_id":0,"name":1,"grades":1}}}}}
{"t":{"$date":"2023-03-07T11:09:07.868Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"TypeError: Cannot read properties of undefined (reading '0')","attr":{"message":"Cannot read properties of undefined (reading '0')","name":"TypeError","stack":"TypeError: Cannot read properties of undefined (reading '0')\n    at REPL271:62:228\n    at async Cursor.forEach (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1668574)\n    at async Cursor.forEach (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1755595)\n    at async Cursor.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1750244)\n    at async REPL271:80:25\n    at async ShellEvaluator.innerEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931343)\n    at async ShellEvaluator.customEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931482)\n    at async MongoshNodeRepl.eval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:843292)\n    at async PrettyREPLServer.h.eval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:800185)"}}
{"t":{"$date":"2023-03-07T11:09:36.365Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {$or: [{borough: 'Bronx'}, {borough: 'Brooklyn'}]},\n        {grades: {$size: 4}}\n\n    ]\n},\n{_id:0, name: 1, grades:1}).forEach(doc => {\n    print(doc.name.toUpperCase())\n    print(doc.grades[0])\n})"}}
{"t":{"$date":"2023-03-07T11:09:36.373Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"$or":[{"borough":"Bronx"},{"borough":"Brooklyn"}]},{"grades":{"$size":4}}]},"options":{"projection":{"_id":0,"name":1,"grades":1}}}}}
{"t":{"$date":"2023-03-07T11:09:58.508Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {$or: [{borough: 'Bronx'}, {borough: 'Brooklyn'}]},\n        {grades: {$size: 4}}\n\n    ]\n},\n{_id:0, name: 1, grades:1}).forEach(doc => {\n    print(doc.name.toUpperCase())\n    print(doc.grades[0].date)\n})"}}
{"t":{"$date":"2023-03-07T11:09:58.519Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"$or":[{"borough":"Bronx"},{"borough":"Brooklyn"}]},{"grades":{"$size":4}}]},"options":{"projection":{"_id":0,"name":1,"grades":1}}}}}
{"t":{"$date":"2023-03-07T11:11:14.991Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {$or: [{borough: 'Bronx'}, {borough: 'Brooklyn'}]},\n        {grades: {$size: 4}}\n\n    ]\n},\n{_id:0, name: 1, grades:1}).forEach(doc => {\n    print(doc.name.toUpperCase())\n    print(doc.grades[0].date.substring(0, 10))\n})"}}
{"t":{"$date":"2023-03-07T11:11:14.997Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"$or":[{"borough":"Bronx"},{"borough":"Brooklyn"}]},{"grades":{"$size":4}}]},"options":{"projection":{"_id":0,"name":1,"grades":1}}}}}
{"t":{"$date":"2023-03-07T11:11:15.068Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"TypeError: doc.grades[0].date.substring is not a function","attr":{"message":"doc.grades[0].date.substring is not a function","name":"TypeError","stack":"TypeError: doc.grades[0].date.substring is not a function\n    at REPL307:62:393\n    at async Cursor.forEach (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1668574)\n    at async Cursor.forEach (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1755595)\n    at async Cursor.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1750244)\n    at async REPL307:80:25\n    at async ShellEvaluator.innerEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931343)\n    at async ShellEvaluator.customEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931482)\n    at async MongoshNodeRepl.eval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:843292)\n    at async PrettyREPLServer.h.eval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:800185)"}}
{"t":{"$date":"2023-03-07T11:12:27.216Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {$or: [{borough: 'Bronx'}, {borough: 'Brooklyn'}]},\n        {grades: {$size: 4}}\n\n    ]\n},\n{_id:0, name: 1, grades:1}).forEach(doc => {\n    print(doc.name.toUpperCase())\n    print(doc.grades[0].date.toISOString())\n})"}}
{"t":{"$date":"2023-03-07T11:12:27.224Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"$or":[{"borough":"Bronx"},{"borough":"Brooklyn"}]},{"grades":{"$size":4}}]},"options":{"projection":{"_id":0,"name":1,"grades":1}}}}}
{"t":{"$date":"2023-03-07T11:12:49.690Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {$or: [{borough: 'Bronx'}, {borough: 'Brooklyn'}]},\n        {grades: {$size: 4}}\n\n    ]\n},\n{_id:0, name: 1, grades:1}).forEach(doc => {\n    print(doc.name.toUpperCase())\n    print(doc.grades[0].date.toISOString().substring(0,10))\n})"}}
{"t":{"$date":"2023-03-07T11:12:49.708Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"$or":[{"borough":"Bronx"},{"borough":"Brooklyn"}]},{"grades":{"$size":4}}]},"options":{"projection":{"_id":0,"name":1,"grades":1}}}}}
{"t":{"$date":"2023-03-07T11:16:27.303Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {$or: [{borough: 'Bronx'}, {borough: 'Brooklyn'}]},\n        {grades: {$size: 4}}\n\n    ]\n},\n{_id:0, name: 1, grades:1}).forEach(doc => {\n    print(doc.name.toUpperCase())\n    let firstEval = doc.grades[0].date.toISOString().substring(0,10)\n    print(`Dérnière évaluation fais le ${firstEval}`)\n})"}}
{"t":{"$date":"2023-03-07T11:16:27.314Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"$or":[{"borough":"Bronx"},{"borough":"Brooklyn"}]},{"grades":{"$size":4}}]},"options":{"projection":{"_id":0,"name":1,"grades":1}}}}}
{"t":{"$date":"2023-03-07T11:20:19.145Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    $and: [\n        {name: /coffee/i},\n        {$or: [{borough: 'Bronx'}, {borough: 'Brooklyn'}]},\n        {grades: {$size: 4}}\n\n    ]\n},\n{_id:0, name: 1, grades:1}).forEach(doc => {\n    print(doc.name.toUpperCase())\n    let firstEval = doc.grades[0].date.toISOString().substring(0,10)\n    let lastEval = doc.grades[3].date.toISOString().substring(0,10)\n    print(`Dérnière évaluation fais le ${firstEval}`);\n    print(`Première évaluation fais le ${lastEval}`)\n})"}}
{"t":{"$date":"2023-03-07T11:20:19.156Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"$or":[{"borough":"Bronx"},{"borough":"Brooklyn"}]},{"grades":{"$size":4}}]},"options":{"projection":{"_id":0,"name":1,"grades":1}}}}}
{"t":{"$date":"2023-03-07T11:33:21.676Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.findOne()"}}
{"t":{"$date":"2023-03-07T11:33:21.684Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-07T11:35:07.167Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.createIndex({ \"address.coord\": \"2dsphere\" });"}}
{"t":{"$date":"2023-03-07T11:35:07.177Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"createIndex","class":"Collection","db":"ny","coll":"restaurants","arguments":{"keys":{"address.coord":"2dsphere"},"options":{}}}}
{"t":{"$date":"2023-03-07T11:35:30.038Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.findOne()"}}
{"t":{"$date":"2023-03-07T11:35:30.047Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-07T11:43:21.047Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n     $nearSphere: { $geometry: { type: \"Point\", coordinates: [-73.961704, 40.662942] }, $maxDistance: 5000 }\n})"}}
{"t":{"$date":"2023-03-07T11:43:21.052Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$nearSphere":{"$geometry":{"type":"Point","coordinates":[-73.961704,40.662942]},"$maxDistance":5000}},"options":{}}}}
{"t":{"$date":"2023-03-07T11:43:21.065Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: unknown top level operator: $nearSphere. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.","attr":{"ok":0,"code":2,"codeName":"BadValue","message":"unknown top level operator: $nearSphere. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.","name":"MongoServerError","stack":"MongoServerError: unknown top level operator: $nearSphere. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-07T11:45:57.666Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n        location: {\n            $nearSphere: {\n                $geometry: {\n                   type : \"Point\",\n                   coordinates : [ -73.9667, 40.78 ]\n                },\n                $minDistance: 1000,\n                $maxDistance: 5000\n             }\n        }\n    }\n)"}}
{"t":{"$date":"2023-03-07T11:45:57.679Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"location":{"$nearSphere":{"$geometry":{"type":"Point","coordinates":[-73.9667,40.78]},"$minDistance":1000,"$maxDistance":5000}}},"options":{}}}}
{"t":{"$date":"2023-03-07T11:45:57.691Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: error processing query: ns=ny.restaurantsTree: GEONEAR  field=location maxdist=5000 isNearSphere=0\nSort: {}\nProj: {}\n planner returned error :: caused by :: unable to find index for $geoNear query","attr":{"ok":0,"code":291,"codeName":"NoQueryExecutionPlans","message":"error processing query: ns=ny.restaurantsTree: GEONEAR  field=location maxdist=5000 isNearSphere=0\nSort: {}\nProj: {}\n planner returned error :: caused by :: unable to find index for $geoNear query","name":"MongoServerError","stack":"MongoServerError: error processing query: ns=ny.restaurantsTree: GEONEAR  field=location maxdist=5000 isNearSphere=0\nSort: {}\nProj: {}\n planner returned error :: caused by :: unable to find index for $geoNear query\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-07T11:46:27.162Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n        coord: {\n            $nearSphere: {\n                $geometry: {\n                   type : \"Point\",\n                   coordinates : [ -73.9667, 40.78 ]\n                },\n                $minDistance: 1000,\n                $maxDistance: 5000\n             }\n        }\n    }\n)"}}
{"t":{"$date":"2023-03-07T11:46:27.175Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"coord":{"$nearSphere":{"$geometry":{"type":"Point","coordinates":[-73.9667,40.78]},"$minDistance":1000,"$maxDistance":5000}}},"options":{}}}}
{"t":{"$date":"2023-03-07T11:46:27.184Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: error processing query: ns=ny.restaurantsTree: GEONEAR  field=coord maxdist=5000 isNearSphere=0\nSort: {}\nProj: {}\n planner returned error :: caused by :: unable to find index for $geoNear query","attr":{"ok":0,"code":291,"codeName":"NoQueryExecutionPlans","message":"error processing query: ns=ny.restaurantsTree: GEONEAR  field=coord maxdist=5000 isNearSphere=0\nSort: {}\nProj: {}\n planner returned error :: caused by :: unable to find index for $geoNear query","name":"MongoServerError","stack":"MongoServerError: error processing query: ns=ny.restaurantsTree: GEONEAR  field=coord maxdist=5000 isNearSphere=0\nSort: {}\nProj: {}\n planner returned error :: caused by :: unable to find index for $geoNear query\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-07T11:47:22.049Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n            $nearSphere: {\n                $geometry: {\n                   type : \"Point\",\n                   coordinates : [ -73.9667, 40.78 ]\n                },\n                $minDistance: 1000,\n                $maxDistance: 5000\n             }\n        \n    }\n)"}}
{"t":{"$date":"2023-03-07T11:47:22.054Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$nearSphere":{"$geometry":{"type":"Point","coordinates":[-73.9667,40.78]},"$minDistance":1000,"$maxDistance":5000}},"options":{}}}}
{"t":{"$date":"2023-03-07T11:47:22.063Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: unknown top level operator: $nearSphere. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.","attr":{"ok":0,"code":2,"codeName":"BadValue","message":"unknown top level operator: $nearSphere. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.","name":"MongoServerError","stack":"MongoServerError: unknown top level operator: $nearSphere. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-07T11:47:52.935Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n            $nearSphere: {\n                $geometry: {\n                   type : \"Point\",\n                   coordinates : [ -73.9667, 40.78 ]\n                },\n                $maxDistance: 5000\n             }\n        \n    }\n)"}}
{"t":{"$date":"2023-03-07T11:47:52.940Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$nearSphere":{"$geometry":{"type":"Point","coordinates":[-73.9667,40.78]},"$maxDistance":5000}},"options":{}}}}
{"t":{"$date":"2023-03-07T11:47:52.951Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: unknown top level operator: $nearSphere. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.","attr":{"ok":0,"code":2,"codeName":"BadValue","message":"unknown top level operator: $nearSphere. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.","name":"MongoServerError","stack":"MongoServerError: unknown top level operator: $nearSphere. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-07T11:53:31.189Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n        loc: {\n            $nearSphere: {\n               $geometry: {\n                  type : \"Point\",\n                  coordinates : [-73.961704, 40.662942]\n               },\n               $maxDistance: 5000\n            }\n         }    \n        \n    }\n)"}}
{"t":{"$date":"2023-03-07T11:53:31.195Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"loc":{"$nearSphere":{"$geometry":{"type":"Point","coordinates":[-73.961704,40.662942]},"$maxDistance":5000}}},"options":{}}}}
{"t":{"$date":"2023-03-07T11:53:31.206Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: error processing query: ns=ny.restaurantsTree: GEONEAR  field=loc maxdist=5000 isNearSphere=0\nSort: {}\nProj: {}\n planner returned error :: caused by :: unable to find index for $geoNear query","attr":{"ok":0,"code":291,"codeName":"NoQueryExecutionPlans","message":"error processing query: ns=ny.restaurantsTree: GEONEAR  field=loc maxdist=5000 isNearSphere=0\nSort: {}\nProj: {}\n planner returned error :: caused by :: unable to find index for $geoNear query","name":"MongoServerError","stack":"MongoServerError: error processing query: ns=ny.restaurantsTree: GEONEAR  field=loc maxdist=5000 isNearSphere=0\nSort: {}\nProj: {}\n planner returned error :: caused by :: unable to find index for $geoNear query\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-07T11:54:06.599Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n        \"address.coord\": {\n            $nearSphere: {\n               $geometry: {\n                  type : \"Point\",\n                  coordinates : [-73.961704, 40.662942]\n               },\n               $maxDistance: 5000\n            }\n         }    \n        \n    }\n)"}}
{"t":{"$date":"2023-03-07T11:54:06.605Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"address.coord":{"$nearSphere":{"$geometry":{"type":"Point","coordinates":[-73.961704,40.662942]},"$maxDistance":5000}}},"options":{}}}}
{"t":{"$date":"2023-03-07T11:57:32.913Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n        \"address.coord\": {\n            $nearSphere: {\n               $geometry: {\n                  type : \"Point\",\n                  coordinates : [-73.961704, 40.662942]\n               },\n               $maxDistance: 5000\n            }\n         }    \n        \n    }\n).count()"}}
{"t":{"$date":"2023-03-07T11:57:32.920Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"address.coord":{"$nearSphere":{"$geometry":{"type":"Point","coordinates":[-73.961704,40.662942]},"$maxDistance":5000}}},"options":{}}}}
{"t":{"$date":"2023-03-07T11:57:32.956Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-07T11:57:47.460Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n        \"address.coord\": {\n            $nearSphere: {\n               $geometry: {\n                  type : \"Point\",\n                  coordinates : [-73.961704, 40.662942]\n               },\n               $maxDistance: 6000\n            }\n         }    \n        \n    }\n).count()"}}
{"t":{"$date":"2023-03-07T11:57:47.464Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"address.coord":{"$nearSphere":{"$geometry":{"type":"Point","coordinates":[-73.961704,40.662942]},"$maxDistance":6000}}},"options":{}}}}
{"t":{"$date":"2023-03-07T11:57:47.509Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-07T13:06:28.045Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"const coordinate= [-73.961704, 40.662942];"}}
{"t":{"$date":"2023-03-07T13:06:28.177Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"const distance = 5000 * 0.621371;"}}
{"t":{"$date":"2023-03-07T13:06:29.211Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    \n    {\n        \"address.coord\": {\n            $nearSphere: {\n               $geometry: {\n                  type : \"Point\",\n                  coordinates : coordinate\n               },\n               $maxDistance: distance\n            }\n         }    \n        \n    }\n)"}}
{"t":{"$date":"2023-03-07T13:06:29.218Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"address.coord":{"$nearSphere":{"$geometry":{"type":"Point","coordinates":[-73.961704,40.662942]},"$maxDistance":3106.855}}},"options":{}}}}
{"t":{"$date":"2023-03-07T13:06:58.244Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"const coordinate= [-73.961704, 40.662942];"}}
{"t":{"$date":"2023-03-07T13:06:58.399Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"const distance = 5000 * 0.621371;"}}
{"t":{"$date":"2023-03-07T13:06:59.095Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    \n    {\n        \"address.coord\": {\n            $nearSphere: {\n               $geometry: {\n                  type : \"Point\",\n                  coordinates : coordinate\n               },\n               $maxDistance: distance\n            }\n         }    \n        \n    }\n).count()"}}
{"t":{"$date":"2023-03-07T13:06:59.103Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"address.coord":{"$nearSphere":{"$geometry":{"type":"Point","coordinates":[-73.961704,40.662942]},"$maxDistance":3106.855}}},"options":{}}}}
{"t":{"$date":"2023-03-07T13:06:59.120Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-07T13:08:22.063Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"const coordinate= [-73.961704, 40.662942];"}}
{"t":{"$date":"2023-03-07T13:08:22.206Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"const distance = 5000 / 0.621371;"}}
{"t":{"$date":"2023-03-07T13:08:22.356Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    \n    {\n        \"address.coord\": {\n            $nearSphere: {\n               $geometry: {\n                  type : \"Point\",\n                  coordinates : coordinate\n               },\n               $maxDistance: distance\n            }\n         }    \n        \n    }\n).count()"}}
{"t":{"$date":"2023-03-07T13:08:22.364Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"address.coord":{"$nearSphere":{"$geometry":{"type":"Point","coordinates":[-73.961704,40.662942]},"$maxDistance":8046.722489462817}}},"options":{}}}}
{"t":{"$date":"2023-03-07T13:08:22.428Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-07T13:13:24.739Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"query()"}}
{"t":{"$date":"2023-03-07T13:13:24.752Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"ReferenceError: query is not defined","attr":{"message":"query is not defined","name":"ReferenceError","stack":"ReferenceError: query is not defined\n    at REPL526:34:9\n    at REPL526:48:5\n    at REPL526:53:3\n    at Script.runInContext (node:vm:141:12)\n    at PrettyREPLServer.defaultEval (node:repl:574:29)\n    at bound (node:domain:433:15)\n    at PrettyREPLServer.runBound (node:domain:444:12)\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799948\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799676\n    at node:internal/util:364:7"}}
{"t":{"$date":"2023-03-07T13:13:44.847Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"const query = () => {\n    let coordinate= [-73.961704, 40.662942];\n    let coef = 0.621371;\n    let miles = 5000;\n    let distanceInMetre = miles / coef;\n    db.restaurants.find(\n    \n        {\n            \"address.coord\": {\n                $nearSphere: {\n                   $geometry: {\n                      type : \"Point\",\n                      coordinates : coordinate\n                   },\n                   $maxDistance: distanceInMetre\n                }\n             }    \n            \n        }\n    ).count()\n}"}}
{"t":{"$date":"2023-03-07T13:14:17.196Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let coordinate= [-73.961704, 40.662942];"}}
{"t":{"$date":"2023-03-07T13:14:17.593Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let coef = 0.621371;"}}
{"t":{"$date":"2023-03-07T13:14:17.595Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let miles = 5000;"}}
{"t":{"$date":"2023-03-07T13:14:17.597Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let distanceInMetre = miles / coef;"}}
{"t":{"$date":"2023-03-07T13:14:18.878Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    \n        {\n            \"address.coord\": {\n                $nearSphere: {\n                   $geometry: {\n                      type : \"Point\",\n                      coordinates : coordinate\n                   },\n                   $maxDistance: distanceInMetre\n                }\n             }    \n            \n        }\n    ).count()"}}
{"t":{"$date":"2023-03-07T13:14:18.890Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"address.coord":{"$nearSphere":{"$geometry":{"type":"Point","coordinates":[-73.961704,40.662942]},"$maxDistance":8046.722489462817}}},"options":{}}}}
{"t":{"$date":"2023-03-07T13:14:18.977Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-07T13:17:18.378Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let coordinate= [-73.961704, 40.662942];"}}
{"t":{"$date":"2023-03-07T13:17:18.694Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let distanceInMetre = (a, b) => {\n        return (a/b)\n    }"}}
{"t":{"$date":"2023-03-07T13:17:19.246Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    \n        {\n            \"address.coord\": {\n                $nearSphere: {\n                   $geometry: {\n                      type : \"Point\",\n                      coordinates : coordinate\n                   },\n                   $maxDistance: distanceInMetre(5000, 0,621371)\n                }\n             }    \n            \n        }\n    ).count()"}}
{"t":{"$date":"2023-03-07T13:17:19.254Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"address.coord":{"$nearSphere":{"$geometry":{"type":"Point","coordinates":[-73.961704,40.662942]},"$maxDistance":null}}},"options":{}}}}
{"t":{"$date":"2023-03-07T13:17:19.266Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-07T13:17:19.270Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: $maxDistance must be non-negative","attr":{"ok":0,"code":2,"codeName":"BadValue","message":"$maxDistance must be non-negative","name":"MongoServerError","stack":"MongoServerError: $maxDistance must be non-negative\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-07T13:18:36.342Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token (4:0)\n\n\u001b[0m \u001b[90m 2 |\u001b[39m         \u001b[36mreturn\u001b[39m (a\u001b[33m/\u001b[39mb)\u001b[0m\n\u001b[0m \u001b[90m 3 |\u001b[39m \u001b[36mlet\u001b[39m distanceInMetre \u001b[33m=\u001b[39m (\u001b[35m5000\u001b[39m\u001b[33m,\u001b[39m \u001b[35m0\u001b[39m\u001b[33m,\u001b[39m\u001b[35m621371\u001b[39m) \u001b[33m=>\u001b[39m {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 4 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":4,"column":0,"index":99},"pos":99,"message":"Unexpected token (4:0)\n\n\u001b[0m \u001b[90m 2 |\u001b[39m         \u001b[36mreturn\u001b[39m (a\u001b[33m/\u001b[39mb)\u001b[0m\n\u001b[0m \u001b[90m 3 |\u001b[39m \u001b[36mlet\u001b[39m distanceInMetre \u001b[33m=\u001b[39m (\u001b[35m5000\u001b[39m\u001b[33m,\u001b[39m \u001b[35m0\u001b[39m\u001b[33m,\u001b[39m\u001b[35m621371\u001b[39m) \u001b[33m=>\u001b[39m {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 4 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token (4:0)\n\n\u001b[0m \u001b[90m 2 |\u001b[39m         \u001b[36mreturn\u001b[39m (a\u001b[33m/\u001b[39mb)\u001b[0m\n\u001b[0m \u001b[90m 3 |\u001b[39m \u001b[36mlet\u001b[39m distanceInMetre \u001b[33m=\u001b[39m (\u001b[35m5000\u001b[39m\u001b[33m,\u001b[39m \u001b[35m0\u001b[39m\u001b[33m,\u001b[39m\u001b[35m621371\u001b[39m) \u001b[33m=>\u001b[39m {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 4 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-07T13:19:44.330Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Binding invalid left-hand side in function parameter list. (1:23)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m \u001b[36mlet\u001b[39m distanceInMetre \u001b[33m=\u001b[39m (\u001b[35m5000\u001b[39m\u001b[33m,\u001b[39m \u001b[35m0\u001b[39m\u001b[33m,\u001b[39m\u001b[35m621371\u001b[39m) \u001b[33m=>\u001b[39m  (a\u001b[33m/\u001b[39mb)\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"InvalidLhsBinding","loc":{"line":1,"column":23,"index":23},"pos":23,"message":"Binding invalid left-hand side in function parameter list. (1:23)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m \u001b[36mlet\u001b[39m distanceInMetre \u001b[33m=\u001b[39m (\u001b[35m5000\u001b[39m\u001b[33m,\u001b[39m \u001b[35m0\u001b[39m\u001b[33m,\u001b[39m\u001b[35m621371\u001b[39m) \u001b[33m=>\u001b[39m  (a\u001b[33m/\u001b[39mb)\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Binding invalid left-hand side in function parameter list. (1:23)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m \u001b[36mlet\u001b[39m distanceInMetre \u001b[33m=\u001b[39m (\u001b[35m5000\u001b[39m\u001b[33m,\u001b[39m \u001b[35m0\u001b[39m\u001b[33m,\u001b[39m\u001b[35m621371\u001b[39m) \u001b[33m=>\u001b[39m  (a\u001b[33m/\u001b[39mb)\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-07T13:21:06.567Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let coordinate= [-73.961704, 40.662942];"}}
{"t":{"$date":"2023-03-07T13:21:07.068Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let distanceInMetre = (miles, coef) =>  miles/coef"}}
{"t":{"$date":"2023-03-07T13:21:07.072Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-07T13:21:07.074Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-07T13:21:07.631Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    \n        {\n            \"address.coord\": {\n                $nearSphere: {\n                   $geometry: {\n                      type : \"Point\",\n                      coordinates : coordinate\n                   },\n                   $maxDistance: distanceInMetre(5000, 0,621371)\n                }\n             }    \n            \n        }\n    ).count()"}}
{"t":{"$date":"2023-03-07T13:21:07.640Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"address.coord":{"$nearSphere":{"$geometry":{"type":"Point","coordinates":[-73.961704,40.662942]},"$maxDistance":null}}},"options":{}}}}
{"t":{"$date":"2023-03-07T13:21:07.651Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-07T13:21:07.652Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: $maxDistance must be non-negative","attr":{"ok":0,"code":2,"codeName":"BadValue","message":"$maxDistance must be non-negative","name":"MongoServerError","stack":"MongoServerError: $maxDistance must be non-negative\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-07T13:21:36.959Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let coordinate= [-73.961704, 40.662942];"}}
{"t":{"$date":"2023-03-07T13:21:37.305Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let distanceInMetre = (miles, coef) =>  miles/coef"}}
{"t":{"$date":"2023-03-07T13:21:37.353Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-07T13:21:37.357Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-07T13:21:37.360Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    \n        {\n            \"address.coord\": {\n                $nearSphere: {\n                   $geometry: {\n                      type : \"Point\",\n                      coordinates : coordinate\n                   },\n                   $maxDistance: distanceInMetre(5000, 2)\n                }\n             }    \n            \n        }\n    ).count()"}}
{"t":{"$date":"2023-03-07T13:21:37.363Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"address.coord":{"$nearSphere":{"$geometry":{"type":"Point","coordinates":[-73.961704,40.662942]},"$maxDistance":2500}}},"options":{}}}}
{"t":{"$date":"2023-03-07T13:21:37.374Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-07T13:22:59.354Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let coordinate= [-73.961704, 40.662942];"}}
{"t":{"$date":"2023-03-07T13:22:59.737Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let distanceInMetre = (miles, coef) =>  miles/coef"}}
{"t":{"$date":"2023-03-07T13:22:59.740Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-07T13:22:59.744Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-07T13:23:00.573Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    \n        {\n            \"address.coord\": {\n                $nearSphere: {\n                   $geometry: {\n                      type : \"Point\",\n                      coordinates : coordinate\n                   },\n                   $maxDistance: distanceInMetre(5000, 0.621371)\n                }\n             }    \n            \n        }\n    ).count()"}}
{"t":{"$date":"2023-03-07T13:23:00.583Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"address.coord":{"$nearSphere":{"$geometry":{"type":"Point","coordinates":[-73.961704,40.662942]},"$maxDistance":8046.722489462817}}},"options":{}}}}
{"t":{"$date":"2023-03-07T13:23:00.653Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-07T13:23:24.606Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let coordinate= [-73.961704, 40.662942];"}}
{"t":{"$date":"2023-03-07T13:23:24.972Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let distanceInMetre = (miles, coef) =>  miles/coef"}}
{"t":{"$date":"2023-03-07T13:23:24.979Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-07T13:23:24.981Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-07T13:23:28.030Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    \n        {\n            \"address.coord\": {\n                $nearSphere: {\n                   $geometry: {\n                      type : \"Point\",\n                      coordinates : coordinate\n                   },\n                   $maxDistance: distanceInMetre(5000, 0.621371)\n                }\n             }    \n            \n        }\n    )"}}
{"t":{"$date":"2023-03-07T13:23:28.042Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"address.coord":{"$nearSphere":{"$geometry":{"type":"Point","coordinates":[-73.961704,40.662942]},"$maxDistance":8046.722489462817}}},"options":{}}}}
{"t":{"$date":"2023-03-07T13:25:13.058Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n  {\n    \"grades.0.date\": ISODate(\"2013-12-30T00:00:00Z\"),\n  },\n  { _id: 0, name: 1, borough: 1, \"grades.date\": 1 }\n);"}}
{"t":{"$date":"2023-03-07T13:25:13.064Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"grades.0.date":"2013-12-30T00:00:00.000Z"},"options":{"projection":{"_id":0,"name":1,"borough":1,"grades.date":1}}}}}
{"t":{"$date":"2023-03-07T13:26:22.672Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find( { \"grades.0.date\": ISODate(\"2013-12-30T00:00:00Z\") }, { _id: 0, name: 1, borough: 1, \"grades.date\": 1 }).count()"}}
{"t":{"$date":"2023-03-07T13:26:22.680Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"grades.0.date":"2013-12-30T00:00:00.000Z"},"options":{"projection":{"_id":0,"name":1,"borough":1,"grades.date":1}}}}}
{"t":{"$date":"2023-03-07T13:26:22.734Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-07T13:26:59.106Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find( { \"grades.0.date\": ISODate(\"2013-12-20T00:00:00Z\") }, { _id: 0, name: 1, borough: 1, \"grades.date\": 1 }).count()"}}
{"t":{"$date":"2023-03-07T13:26:59.113Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"grades.0.date":"2013-12-20T00:00:00.000Z"},"options":{"projection":{"_id":0,"name":1,"borough":1,"grades.date":1}}}}}
{"t":{"$date":"2023-03-07T13:26:59.170Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-07T13:35:53.455Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n       name:  /^[aeiou]/i  | /[aeiou]$/\n    }\n)"}}
{"t":{"$date":"2023-03-07T13:35:53.462Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"name":0},"options":{}}}}
{"t":{"$date":"2023-03-07T13:36:30.353Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n       name:  /^[aeiou]/i  | /[aeiou]$/i\n    }\n)"}}
{"t":{"$date":"2023-03-07T13:36:30.358Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"name":0},"options":{}}}}
{"t":{"$date":"2023-03-07T13:38:14.933Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n       name:  {$regex: /^[aeiou]/i  | /[aeiou]$/i}\n    }\n)"}}
{"t":{"$date":"2023-03-07T13:38:14.938Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"name":{"$regex":0}},"options":{}}}}
{"t":{"$date":"2023-03-07T13:38:14.949Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: $regex has to be a string","attr":{"ok":0,"code":2,"codeName":"BadValue","message":"$regex has to be a string","name":"MongoServerError","stack":"MongoServerError: $regex has to be a string\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-07T13:38:30.624Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n       name:  {$regex: '/^[aeiou]/i'  | '/[aeiou]$/i'}\n    }\n)"}}
{"t":{"$date":"2023-03-07T13:38:30.629Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"name":{"$regex":0}},"options":{}}}}
{"t":{"$date":"2023-03-07T13:38:30.640Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: $regex has to be a string","attr":{"ok":0,"code":2,"codeName":"BadValue","message":"$regex has to be a string","name":"MongoServerError","stack":"MongoServerError: $regex has to be a string\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-07T13:39:59.632Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n       name:  {$regex: {$or: ['/^[aeiou]/i', '/[aeiou]$/i']}}\n    }\n)"}}
{"t":{"$date":"2023-03-07T13:39:59.638Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"name":{"$regex":{"$or":["/^[aeiou]/i","/[aeiou]$/i"]}}},"options":{}}}}
{"t":{"$date":"2023-03-07T13:39:59.646Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: $regex has to be a string","attr":{"ok":0,"code":2,"codeName":"BadValue","message":"$regex has to be a string","name":"MongoServerError","stack":"MongoServerError: $regex has to be a string\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-07T13:52:12.067Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let coordinate= [-73.961704, 40.662942];"}}
{"t":{"$date":"2023-03-07T13:52:12.374Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let distanceInMetre = (miles, coef) =>  miles/coef"}}
{"t":{"$date":"2023-03-07T13:52:12.381Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-07T13:52:13.339Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n        {\n            \"address.coord\": {\n                $nearSphere: {\n                   $geometry: {\n                      type : \"Point\",\n                      coordinates : coordinate\n                   },\n                   $maxDistance: distanceInMetre(5000, 0.621371)\n                }\n             }       \n        },\n        {borough: {$toUpper: \"borough\"}, name: {$toUpper: \"name\"}, \"address.coord\":1}\n    )"}}
{"t":{"$date":"2023-03-07T13:52:13.344Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"address.coord":{"$nearSphere":{"$geometry":{"type":"Point","coordinates":[-73.961704,40.662942]},"$maxDistance":8046.722489462817}}},"options":{"projection":{"borough":{"$toUpper":"borough"},"name":{"$toUpper":"name"},"address.coord":1}}}}}
{"t":{"$date":"2023-03-07T13:52:34.520Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let coordinate= [-73.961704, 40.662942];"}}
{"t":{"$date":"2023-03-07T13:52:34.880Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let distanceInMetre = (miles, coef) =>  miles/coef"}}
{"t":{"$date":"2023-03-07T13:52:34.916Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-07T13:52:34.918Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n        {\n            \"address.coord\": {\n                $nearSphere: {\n                   $geometry: {\n                      type : \"Point\",\n                      coordinates : coordinate\n                   },\n                   $maxDistance: distanceInMetre(5000, 0.621371)\n                }\n             }       \n        },\n        {_id:0, borough: {$toUpper: \"borough\"}, name: {$toUpper: \"name\"}, \"address.coord\":1}\n    )"}}
{"t":{"$date":"2023-03-07T13:52:34.919Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"address.coord":{"$nearSphere":{"$geometry":{"type":"Point","coordinates":[-73.961704,40.662942]},"$maxDistance":8046.722489462817}}},"options":{"projection":{"_id":0,"borough":{"$toUpper":"borough"},"name":{"$toUpper":"name"},"address.coord":1}}}}}
{"t":{"$date":"2023-03-07T13:53:02.758Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let coordinate= [-73.961704, 40.662942];"}}
{"t":{"$date":"2023-03-07T13:53:03.086Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let distanceInMetre = (miles, coef) =>  miles/coef"}}
{"t":{"$date":"2023-03-07T13:53:03.234Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-07T13:53:03.237Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n        {\n            \"address.coord\": {\n                $nearSphere: {\n                   $geometry: {\n                      type : \"Point\",\n                      coordinates : coordinate\n                   },\n                   $maxDistance: distanceInMetre(5000, 0.621371)\n                }\n             }       \n        },\n        {_id:0, borough: {$toUpper: \"$borough\"}, name: {$toUpper: \"$name\"}, \"address.coord\":1}\n    )"}}
{"t":{"$date":"2023-03-07T13:53:03.239Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"address.coord":{"$nearSphere":{"$geometry":{"type":"Point","coordinates":[-73.961704,40.662942]},"$maxDistance":8046.722489462817}}},"options":{"projection":{"_id":0,"borough":{"$toUpper":"$borough"},"name":{"$toUpper":"$name"},"address.coord":1}}}}}
{"t":{"$date":"2023-03-07T14:00:05.781Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token (3:51)\n\n\u001b[0m \u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind(\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m     {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 3 |\u001b[39m        name\u001b[33m:\u001b[39m  {$regex\u001b[33m:\u001b[39m \u001b[32m'/^[aeiou]/i'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'/[aeiou]$/i'\u001b[39m}\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 4 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":3,"column":51,"index":78},"pos":78,"message":"Unexpected token (3:51)\n\n\u001b[0m \u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind(\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m     {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 3 |\u001b[39m        name\u001b[33m:\u001b[39m  {$regex\u001b[33m:\u001b[39m \u001b[32m'/^[aeiou]/i'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'/[aeiou]$/i'\u001b[39m}\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 4 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token (3:51)\n\n\u001b[0m \u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind(\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m     {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 3 |\u001b[39m        name\u001b[33m:\u001b[39m  {$regex\u001b[33m:\u001b[39m \u001b[32m'/^[aeiou]/i'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'/[aeiou]$/i'\u001b[39m}\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 4 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-07T14:00:05.795Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m     }\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":1,"column":4,"index":4},"pos":4,"message":"Unexpected token (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m     }\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m     }\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-07T14:01:41.523Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n       name: /^[aeiou]|[aeiou]$/i\n    }\n)"}}
{"t":{"$date":"2023-03-07T14:01:41.530Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"name":{}},"options":{}}}}
{"t":{"$date":"2023-03-07T14:02:22.238Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n       name: /^[aeiou]&&[aeiou]$/i\n    }\n)"}}
{"t":{"$date":"2023-03-07T14:02:22.252Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"name":{}},"options":{}}}}
{"t":{"$date":"2023-03-07T14:02:43.768Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n       name: /^[aeiou] [aeiou]$/i\n    }\n)"}}
{"t":{"$date":"2023-03-07T14:02:43.773Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"name":{}},"options":{}}}}
{"t":{"$date":"2023-03-07T14:03:06.317Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n       name: /^[aeiou]$/i \n    }\n)"}}
{"t":{"$date":"2023-03-07T14:03:06.322Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"name":{}},"options":{}}}}
{"t":{"$date":"2023-03-07T14:04:54.688Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n        $and: [\n           {name: /^[aeiou]|/i},\n           {name: /[aeiou]$/i}\n        ]\n       \n    }\n)"}}
{"t":{"$date":"2023-03-07T14:04:54.705Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"name":{}}]},"options":{}}}}
{"t":{"$date":"2023-03-07T14:05:24.968Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n        $and: [\n           {name: /^[aeiou]/i},\n           {name: /[aeiou]$/i}\n        ]\n       \n    }\n)"}}
{"t":{"$date":"2023-03-07T14:05:24.973Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"name":{}}]},"options":{}}}}
{"t":{"$date":"2023-03-07T14:11:30.644Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n        name: /\\br\\\\w*\\\\b/\n    }\n)"}}
{"t":{"$date":"2023-03-07T14:11:30.649Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"name":{}},"options":{}}}}
{"t":{"$date":"2023-03-07T14:12:13.459Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n        name: /^[a-z]$/i\n    }\n)"}}
{"t":{"$date":"2023-03-07T14:12:13.466Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"name":{}},"options":{}}}}
{"t":{"$date":"2023-03-07T14:13:26.299Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n        $and: [\n           {name: /^[aeiouy]/i},\n           {name: /[aeiouy]$/i}\n        ] \n    }\n)"}}
{"t":{"$date":"2023-03-07T14:13:26.302Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"name":{}}]},"options":{}}}}
{"t":{"$date":"2023-03-07T14:14:14.222Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Invalid regular expression flag. (3:24)\n\n\u001b[0m \u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind(\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m     {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 3 |\u001b[39m         name\u001b[33m:\u001b[39m \u001b[33m/\u001b[39m\u001b[33m^\u001b[39m[a\u001b[33m-\u001b[39mz]$\u001b[33m/\u001b[39m\u001b[35m1\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 4 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"MalformedRegExpFlags","loc":{"line":3,"column":24,"index":51},"pos":51,"message":"Invalid regular expression flag. (3:24)\n\n\u001b[0m \u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind(\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m     {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 3 |\u001b[39m         name\u001b[33m:\u001b[39m \u001b[33m/\u001b[39m\u001b[33m^\u001b[39m[a\u001b[33m-\u001b[39mz]$\u001b[33m/\u001b[39m\u001b[35m1\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 4 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Invalid regular expression flag. (3:24)\n\n\u001b[0m \u001b[90m 1 |\u001b[39m db\u001b[33m.\u001b[39mrestaurants\u001b[33m.\u001b[39mfind(\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m     {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 3 |\u001b[39m         name\u001b[33m:\u001b[39m \u001b[33m/\u001b[39m\u001b[33m^\u001b[39m[a\u001b[33m-\u001b[39mz]$\u001b[33m/\u001b[39m\u001b[35m1\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 4 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-07T14:14:14.227Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m     }\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":1,"column":4,"index":4},"pos":4,"message":"Unexpected token (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m     }\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m     }\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-07T14:14:14.829Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token (1:0)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m )\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":1,"column":0,"index":0},"pos":0,"message":"Unexpected token (1:0)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m )\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token (1:0)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m )\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-07T14:14:48.624Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n        name: /^[a-z]$\\1/\n    }\n)"}}
{"t":{"$date":"2023-03-07T14:14:48.631Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"name":{}},"options":{}}}}
{"t":{"$date":"2023-03-07T14:14:48.645Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: Regular expression is invalid: reference to non-existent subpattern","attr":{"ok":0,"code":51091,"codeName":"Location51091","message":"Regular expression is invalid: reference to non-existent subpattern","name":"MongoServerError","stack":"MongoServerError: Regular expression is invalid: reference to non-existent subpattern\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-07T14:15:06.016Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n        name: /^[a-z]$/i\n    }\n)"}}
{"t":{"$date":"2023-03-07T14:15:06.020Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"name":{}},"options":{}}}}
{"t":{"$date":"2023-03-07T14:18:43.636Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n        name: /^p...p$/i\n    }\n)"}}
{"t":{"$date":"2023-03-07T14:18:43.644Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"name":{}},"options":{}}}}
{"t":{"$date":"2023-03-07T14:18:57.316Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n        name: /^p...p$/i\n    }\n).count()"}}
{"t":{"$date":"2023-03-07T14:18:57.320Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"name":{}},"options":{}}}}
{"t":{"$date":"2023-03-07T14:18:57.349Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-07T14:19:15.882Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n        name: /^e...e$/i\n    }\n)"}}
{"t":{"$date":"2023-03-07T14:19:15.888Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"name":{}},"options":{}}}}
{"t":{"$date":"2023-03-07T14:36:36.797Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n        name: /^e.*e$/i\n    }\n)"}}
{"t":{"$date":"2023-03-07T14:36:36.803Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"name":{}},"options":{}}}}
{"t":{"$date":"2023-03-07T14:42:15.344Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n        $and: [\n           {name: /^[aeiouy]/i},\n           {name: /[aeiouy]$/i}\n        ] \n    },\n    {name: 1}\n)"}}
{"t":{"$date":"2023-03-07T14:42:15.351Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"name":{}}]},"options":{"projection":{"name":1}}}}}
{"t":{"$date":"2023-03-07T14:42:57.428Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n        $and: [\n           {name: /^[aeiouy]/i},\n           {name: /[aeiouy]$/i}\n        ] \n    },\n    {_id:0, name: 1}\n)"}}
{"t":{"$date":"2023-03-07T14:42:57.435Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"$and":[{"name":{}},{"name":{}}]},"options":{"projection":{"_id":0,"name":1}}}}}
{"t":{"$date":"2023-03-07T14:47:41.164Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"b.restaurants.find(\n    {\n        name: /^(\\w).*\\1$/i\n    },\n    {_id:0, name:1}\n)"}}
{"t":{"$date":"2023-03-07T14:47:41.173Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"ReferenceError: b is not defined","attr":{"message":"b is not defined","name":"ReferenceError","stack":"ReferenceError: b is not defined\n    at REPL869:34:9\n    at REPL869:53:5\n    at REPL869:58:3\n    at Script.runInContext (node:vm:141:12)\n    at PrettyREPLServer.defaultEval (node:repl:574:29)\n    at bound (node:domain:433:15)\n    at PrettyREPLServer.runBound (node:domain:444:12)\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799948\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799676\n    at node:internal/util:364:7"}}
{"t":{"$date":"2023-03-07T14:47:52.394Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n        name: /^(\\w).*\\1$/i\n    },\n    {_id:0, name:1}\n)"}}
{"t":{"$date":"2023-03-07T14:47:52.399Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"name":{}},"options":{"projection":{"_id":0,"name":1}}}}}
{"t":{"$date":"2023-03-07T15:38:13.141Z"},"s":"I","c":"MONGOSH","id":1000000008,"ctx":"shell-api","msg":"Used \"use\" command","attr":{"db":"shop"}}
{"t":{"$date":"2023-03-07T15:38:13.177Z"},"s":"I","c":"MONGOSH","id":1000000004,"ctx":"connect","msg":"Connecting to server","attr":{"session_id":"6405cbd677e809a33e084c70","userId":null,"telemetryAnonymousId":"6405bc96ab70e5f05a1f88e2","connectionUri":"<mongodb uri><ip address>:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+1.8.0","is_atlas":false,"is_localhost":true,"is_do":false,"server_version":"6.0.4","node_version":"v16.19.1","mongosh_version":"1.8.0","server_os":"linux","server_arch":"x86_64","is_enterprise":false,"auth_type":"DEFAULT","is_data_federation":false,"dl_version":null,"atlas_version":null,"is_genuine":true,"non_genuine_server_name":"mongodb","fcv":"6.0","api_version":null,"api_strict":null,"api_deprecation_errors":null}}
{"t":{"$date":"2023-03-07T15:38:24.774Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.createCollection(\"inventory\");"}}
{"t":{"$date":"2023-03-07T15:38:24.778Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"createCollection","class":"Database","db":"shop","arguments":{"name":"inventory","options":{}}}}
{"t":{"$date":"2023-03-07T15:38:39.323Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.insertMany( [{\n      \"sale\" : true, \"price\" : 0.99,\n      \"society\" : \"Alex\", type: \"postcard\", qty: 19,\n      size: { h: 11, w: 29, uom: \"cm\" },\n      status: \"A\",\n      tags: [\"blank\", \"blank\", \"blank\"], \n      \"year\" : 2019  \n    },\n   { \n       \"sale\" : false,\n       \"price\" : 1.99,\n       \"society\" : \"Alan\",\n       type: \"journal\",\n       qty: 25,\n       size: { h: 14, w: 21, uom: \"cm\" },\n       status: \"A\",\n       tags: [\"blank\", \"red\", \"blank\", \"blank\"],\n       \"year\" : 2019  \n   },\n    { \n       \"sale\" : true,\n       \"price\" : 1.5,\n       \"society\" : \"Albert\",\n       type: \"notebook\",\n       qty: 50,\n       size: { h: 8.5, w: 11, uom: \"in\" },\n       status: \"A\",  \n       tags: [\"gray\"],\n       year : 2019\n   },\n   { \n       \"sale\" : true, \n       \"price\" : 7.99, \n       \"society\" : \"Alice\", \n       type: \"lux paper\", \n       qty: 100, \n       size: { h: 8.5, w: 11, uom: \"in\" }, \n       status: \"D\", \n       year : 2020 \n   },\n    { \n       \"sale\" : true, \n       \"price\" : 2.99, \n       \"society\" : \"Sophie\", \n       type: \"planner\", \n       qty: 75, \n       size: { h: 22.85, w: 30, uom: \"cm\" }, \n       status: \"D\", \n       tags: [\"gel\", \"blue\"], \n       year : 2017 \n   },\n   {\n       \"sale\" : false, \n       \"price\" : 0.99, \n       \"society\" : \"Phil\", \n       type: \"postcard\", \n       qty: 45, \n       size: { h: 10, w: 15.25, uom: \"cm\" }, \n       status: \"A\", \n       tags: [\"gray\"], \n       year : 2018 \n   },\n   { \n       \"sale\" : true, \n       \"price\" : 4.99, \n       \"society\" : \"Nel\", \n       type: \"journal\", \n       qty: 19, \n       size: { h: 10, w: 21, uom: \"cm\" }, \n       status: \"B\", \n       tags: [\"blank\", \"blank\", \"blank\", \"red\"], \n       \"year\" : 2019, \n       level : 100  \n   },\n   { \n       \"sale\" : true, \n       \"price\" : 4.99, \n       \"society\" : \"Alex\", \n       type: \"journal\", \n       qty: 15, \n       size: { h: 17, w: 20, uom: \"cm\" }, \n       status: \"C\", \n       tags: [\"blank\"], \n       \"year\" : 2019  \n   },\n   { \n       \"sale\" : false, \n       \"price\" : 5.99, \n       \"society\" : \"Tony\", \n       type: \"journal\", \n       qty: 100, \n       size: { h: 14, w: 21, uom: \"cm\" }, \n       status: \"B\", \n       tags: [\"blank\",\"blank\", \"blank\", \"red\"], \n       \"year\" : 2020  \n   },\n]);"}}
{"t":{"$date":"2023-03-07T15:38:39.336Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"insertMany","class":"Collection","db":"shop","coll":"inventory","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-07T15:40:16.929Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.findOne()"}}
{"t":{"$date":"2023-03-07T15:40:16.935Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-07T15:41:09.149Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n    type: journal\n})"}}
{"t":{"$date":"2023-03-07T15:41:09.156Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"ReferenceError: journal is not defined","attr":{"message":"journal is not defined","name":"ReferenceError","stack":"ReferenceError: journal is not defined\n    at REPL978:35:47\n    at REPL978:50:5\n    at REPL978:55:3\n    at Script.runInContext (node:vm:141:12)\n    at PrettyREPLServer.defaultEval (node:repl:574:29)\n    at bound (node:domain:433:15)\n    at PrettyREPLServer.runBound (node:domain:444:12)\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799948\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799676\n    at node:internal/util:364:7"}}
{"t":{"$date":"2023-03-07T15:41:20.402Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n    type: 'journal'\n})"}}
{"t":{"$date":"2023-03-07T15:41:20.413Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"type":"journal"},"options":{}}}}
{"t":{"$date":"2023-03-07T15:44:11.663Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n    type: 'journal'\n}).forEach(data =>{\n    let articleQty = []\n    articleQty.push(data.qty)\n    print(articleQty)\n})"}}
{"t":{"$date":"2023-03-07T15:44:11.669Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"type":"journal"},"options":{}}}}
{"t":{"$date":"2023-03-07T15:47:26.815Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n    type: 'journal'\n}).forEach(data =>{\n    let articleQty = []\n    articleQty.push(data.qty).concat()\n    print(articleQty)\n\n})"}}
{"t":{"$date":"2023-03-07T15:47:26.819Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"type":"journal"},"options":{}}}}
{"t":{"$date":"2023-03-07T15:47:26.829Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"TypeError: articleQty.pu ... a.qty).concat is not a function","attr":{"message":"articleQty.pu ... a.qty).concat is not a function","name":"TypeError","stack":"TypeError: articleQty.pu ... a.qty).concat is not a function\n    at REPL996:46:227\n    at REPL996:60:13\n    at Cursor.forEach (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1668580)\n    at async Cursor.forEach (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1755595)\n    at async Cursor.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1750244)\n    at async REPL996:65:25\n    at async ShellEvaluator.innerEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931343)\n    at async ShellEvaluator.customEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931482)\n    at async MongoshNodeRepl.eval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:843292)\n    at async PrettyREPLServer.h.eval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:800185)"}}
{"t":{"$date":"2023-03-07T15:48:19.508Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n    type: 'journal'\n}).forEach(data =>{\n    let articleQty = []\n    articleQty.push(data.qty).concat()\n    \n    articleQty.concat(articleQty)``\n    print(articleQty)\n})"}}
{"t":{"$date":"2023-03-07T15:48:19.521Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"type":"journal"},"options":{}}}}
{"t":{"$date":"2023-03-07T15:48:19.533Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"TypeError: articleQty.pu ... a.qty).concat is not a function","attr":{"message":"articleQty.pu ... a.qty).concat is not a function","name":"TypeError","stack":"TypeError: articleQty.pu ... a.qty).concat is not a function\n    at REPL1005:46:227\n    at REPL1005:61:13\n    at Cursor.forEach (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1668580)\n    at async Cursor.forEach (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1755595)\n    at async Cursor.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1750244)\n    at async REPL1005:66:25\n    at async ShellEvaluator.innerEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931343)\n    at async ShellEvaluator.customEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931482)\n    at async MongoshNodeRepl.eval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:843292)\n    at async PrettyREPLServer.h.eval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:800185)"}}
{"t":{"$date":"2023-03-07T15:48:34.276Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n    type: 'journal'\n}).forEach(data =>{\n    let articleQty = []\n    articleQty.push(data.qty)\n    \n    articleQty.concat(articleQty)\n    print(articleQty)\n})"}}
{"t":{"$date":"2023-03-07T15:48:34.285Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"type":"journal"},"options":{}}}}
{"t":{"$date":"2023-03-07T15:49:10.607Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n    type: 'journal'\n}).forEach(data =>{\n    let articleQty = []\n    articleQty.push(data.qty)\n    \n    articleQty.concat()\n    print(articleQty)\n})"}}
{"t":{"$date":"2023-03-07T15:49:10.614Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"type":"journal"},"options":{}}}}
{"t":{"$date":"2023-03-07T15:51:51.235Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n    type: 'journal'\n},\n{qty: {$sum: \"$qty\"}}\n\n)"}}
{"t":{"$date":"2023-03-07T15:51:51.246Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"type":"journal"},"options":{"projection":{"qty":{"$sum":"$qty"}}}}}}
{"t":{"$date":"2023-03-07T15:52:26.340Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n    type: 'journal'\n},\n{qty: 1, _id: 0}\n\n)"}}
{"t":{"$date":"2023-03-07T15:52:26.346Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"type":"journal"},"options":{"projection":{"qty":1,"_id":0}}}}}
{"t":{"$date":"2023-03-07T15:55:00.299Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n    type: 'journal'\n},\n{qty: 1, _id: 0}\n).forEach(data => {\n    let qty = data.qty\n    print (qty)\n})"}}
{"t":{"$date":"2023-03-07T15:55:00.313Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"type":"journal"},"options":{"projection":{"qty":1,"_id":0}}}}}
{"t":{"$date":"2023-03-07T15:56:03.348Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n    type: 'journal'\n},\n{qty: 1, _id: 0}\n).forEach(data => {\n    let qty = data.qty\n    print (qty)\n    let arrayOfqty = []\n    arrayOfqty.push(qty)\n})"}}
{"t":{"$date":"2023-03-07T15:56:03.361Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"type":"journal"},"options":{"projection":{"qty":1,"_id":0}}}}}
{"t":{"$date":"2023-03-07T15:56:21.871Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n    type: 'journal'\n},\n{qty: 1, _id: 0}\n).forEach(data => {\n    let qty = data.qty\n    print (qty)\n    let arrayOfqty = []\n    arrayOfqty.push(qty)\n    print(arrayOfqty)\n})"}}
{"t":{"$date":"2023-03-07T15:56:21.884Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"type":"journal"},"options":{"projection":{"qty":1,"_id":0}}}}}
{"t":{"$date":"2023-03-07T15:58:30.575Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n    type: 'journal'\n},\n{qty: 1, _id: 0}\n).forEach(data => {\n    let qty = data.qty\n    let arrayOfqty = []\n    arrayOfqty.push(qty)\n    print(arrayOfqty)\n    const combined = [].concat(arrayOfqty, arrayOfqty)\n    print(combined)\n})"}}
{"t":{"$date":"2023-03-07T15:58:30.587Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"type":"journal"},"options":{"projection":{"qty":1,"_id":0}}}}}
{"t":{"$date":"2023-03-07T15:58:51.191Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n    type: 'journal'\n},\n{qty: 1, _id: 0}\n).forEach(data => {\n    let qty = data.qty\n    let arrayOfqty = []\n    arrayOfqty.push(qty)\n    print(arrayOfqty)\n    const combined = [].concat(arrayOfqty)\n    print(combined)\n})"}}
{"t":{"$date":"2023-03-07T15:58:51.203Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"type":"journal"},"options":{"projection":{"qty":1,"_id":0}}}}}
{"t":{"$date":"2023-03-07T16:00:15.509Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.findOne()"}}
{"t":{"$date":"2023-03-07T16:00:15.516Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-07T16:01:35.457Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n    type: 'journal'\n},\n{qty: 1, _id: 0}\n).forEach(data => {\n    let qty = data.qty\n    let arrayOfqty = []\n    arrayOfqty.push(qty)\n    print(arrayOfqty)\n    const combined = arrayOfqty.push(...arrayOfqty)\n    print(combined)\n})"}}
{"t":{"$date":"2023-03-07T16:01:35.472Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"type":"journal"},"options":{"projection":{"qty":1,"_id":0}}}}}
{"t":{"$date":"2023-03-07T16:02:27.128Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        name: /^A/i\n    }\n)"}}
{"t":{"$date":"2023-03-07T16:02:27.133Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"name":{}},"options":{}}}}
{"t":{"$date":"2023-03-07T16:03:11.280Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        name: /^A/i\n    }\n)"}}
{"t":{"$date":"2023-03-07T16:03:11.291Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"name":{}},"options":{}}}}
{"t":{"$date":"2023-03-07T16:03:12.577Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        name: /^A/i\n    }\n).count()"}}
{"t":{"$date":"2023-03-07T16:03:12.584Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"name":{}},"options":{}}}}
{"t":{"$date":"2023-03-07T16:03:12.595Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-07T16:03:42.937Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        society: /^A/i\n    }\n)"}}
{"t":{"$date":"2023-03-07T16:03:42.943Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"society":{}},"options":{}}}}
{"t":{"$date":"2023-03-07T16:04:24.960Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        society: /^A/i\n    }, \n    {type:1, _id:0}\n)"}}
{"t":{"$date":"2023-03-07T16:04:24.966Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"society":{}},"options":{"projection":{"type":1,"_id":0}}}}}
{"t":{"$date":"2023-03-07T16:08:16.754Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        qty : {$gte: 45}\n    }, {name:1, _id:0}\n)"}}
{"t":{"$date":"2023-03-07T16:08:16.759Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"qty":{"$gte":45}},"options":{"projection":{"name":1,"_id":0}}}}}
{"t":{"$date":"2023-03-07T16:08:31.131Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        qty : {$gte: 45}\n    }, {name:1, _id:0}\n)"}}
{"t":{"$date":"2023-03-07T16:08:31.142Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"qty":{"$gte":45}},"options":{"projection":{"name":1,"_id":0}}}}}
{"t":{"$date":"2023-03-07T16:09:08.819Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        qty : {$gte: 45}\n    }\n)"}}
{"t":{"$date":"2023-03-07T16:09:08.825Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"qty":{"$gte":45}},"options":{}}}}
{"t":{"$date":"2023-03-07T16:09:39.613Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        qty : {$gte: 45}\n    },\n    {society:1, _id:0}\n)"}}
{"t":{"$date":"2023-03-07T16:09:39.617Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"qty":{"$gte":45}},"options":{"projection":{"society":1,"_id":0}}}}}
{"t":{"$date":"2023-03-07T16:11:13.599Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({ qty: { $gt: 45, $lt: 90 } }, { _id: 0, society: 1 })"}}
{"t":{"$date":"2023-03-07T16:11:13.604Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"qty":{"$gt":45,"$lt":90}},"options":{"projection":{"_id":0,"society":1}}}}}
{"t":{"$date":"2023-03-07T16:13:54.960Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        $or: [\n            {status: 'A'}, {type: 'journal'}\n        ]\n    },\n    {society: 1, _id:0}\n)"}}
{"t":{"$date":"2023-03-07T16:13:54.965Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"$or":[{"status":"A"},{"type":"journal"}]},"options":{"projection":{"society":1,"_id":0}}}}}
{"t":{"$date":"2023-03-07T16:18:33.700Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n  $and: [\n    { $or: [{ status: \"A\" }, { type: \"journal\" }] },\n    { qty: { $lt: 100 } }\n  ]\n}, { _id: 0, society: 1 })"}}
{"t":{"$date":"2023-03-07T16:18:33.709Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"$and":[{"$or":[{"status":"A"},{"type":"journal"}]},{"qty":{"$lt":100}}]},"options":{"projection":{"_id":0,"society":1}}}}}
{"t":{"$date":"2023-03-07T16:20:30.828Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n         $and: [\n            {$or: [\n                {price: '0.99'}, {price: '1.99'} \n            ]}\n         ]\n    },\n    {type:1, _id:0}\n)"}}
{"t":{"$date":"2023-03-07T16:20:30.834Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"$and":[{"$or":[{"price":"0.99"},{"price":"1.99"}]}]},"options":{"projection":{"type":1,"_id":0}}}}}
{"t":{"$date":"2023-03-07T16:24:03.193Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    { \n        tags: { $exists: true, $not: { $size: 0 } } \n    }, \n    { _id: 0, society: 1, tags: 1 }\n)"}}
{"t":{"$date":"2023-03-07T16:24:03.200Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"tags":{"$exists":true,"$not":{"$size":0}}},"options":{"projection":{"_id":0,"society":1,"tags":1}}}}}
{"t":{"$date":"2023-03-07T16:25:35.632Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n         $and: [\n            {$or: [{ price: '0.99' }, { price: '1.99' }] },\n            {sale: 'true'}  \n         ],\n         $or: [\n            {qty: {$lt: 45}}\n         ]\n    },\n    {type:1, _id:0}\n)"}}
{"t":{"$date":"2023-03-07T16:25:35.636Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"$and":[{"$or":[{"price":"0.99"},{"price":"1.99"}]},{"sale":"true"}],"$or":[{"qty":{"$lt":45}}]},"options":{"projection":{"type":1,"_id":0}}}}}
{"t":{"$date":"2023-03-07T16:25:48.727Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n         $and: [\n            {$or: [{ price: '0.99' }, { price: '1.99' }] },\n            {sale: 'true'}  \n         ],\n         $or: [\n            {qty: {$lt: 45}}\n         ]\n    },\n    {type:1, _id:0}\n).count()"}}
{"t":{"$date":"2023-03-07T16:25:48.733Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"$and":[{"$or":[{"price":"0.99"},{"price":"1.99"}]},{"sale":"true"}],"$or":[{"qty":{"$lt":45}}]},"options":{"projection":{"type":1,"_id":0}}}}}
{"t":{"$date":"2023-03-07T16:25:48.742Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-07T16:26:35.270Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n         $and: [\n            {$or: [{ price: 0.99 }, { price: 1.99 }] },\n            {sale: 'true'}  \n         ],\n         $or: [\n            {qty: {$lt: 45}}\n         ]\n    },\n    {type:1, _id:0}\n)"}}
{"t":{"$date":"2023-03-07T16:26:35.275Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"$and":[{"$or":[{"price":0.99},{"price":1.99}]},{"sale":"true"}],"$or":[{"qty":{"$lt":45}}]},"options":{"projection":{"type":1,"_id":0}}}}}
{"t":{"$date":"2023-03-07T16:27:11.566Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n         $and: [\n            {$or: [{ price: 0.99 }, { price: 1.99 }] },\n            {sale: true}  \n         ],\n         $or: [\n            {qty: {$lt: 45}}\n         ]\n    },\n    {type:1, _id:0}\n)"}}
{"t":{"$date":"2023-03-07T16:27:11.570Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"$and":[{"$or":[{"price":0.99},{"price":1.99}]},{"sale":true}],"$or":[{"qty":{"$lt":45}}]},"options":{"projection":{"type":1,"_id":0}}}}}
{"t":{"$date":"2023-03-07T16:30:23.693Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        tags: /blank/i\n    },\n    {society: 1, _id:0}\n)"}}
{"t":{"$date":"2023-03-07T16:30:23.697Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"tags":{}},"options":{"projection":{"society":1,"_id":0}}}}}
{"t":{"$date":"2023-03-08T07:52:05.042Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n    type: 'journal'\n},\n{qty: 1, _id: 0}\n).forEach(data => {\n    let qty = data.qty\n    const arrayOfqty = []\n    arrayOfqty.push(qty)\n    print(arrayOfqty)\n    const combined = arrayOfqty.push(...arrayOfqty)\n    print(combined)\n})"}}
{"t":{"$date":"2023-03-08T07:52:05.050Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"type":"journal"},"options":{"projection":{"qty":1,"_id":0}}}}}
{"t":{"$date":"2023-03-08T08:38:42.445Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.aggregate(\n    {\n      $match: {\n        type: \"journal\"\n      }\n    }, {\n      $group: {_id : null, sumQty: {$sum: '$qty'}}\n    }\n  )"}}
{"t":{"$date":"2023-03-08T08:38:42.452Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"shop","coll":"inventory","arguments":{"options":{},"pipeline":[{"$match":{"type":"journal"}},{"$group":{"_id":null,"sumQty":{"$sum":"$qty"}}}]}}}
{"t":{"$date":"2023-03-08T08:47:50.991Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n    type: 'journal'\n},\n{qty: 1, _id: 0, type:1}\n).forEach(({qty}) => {\n    sumQty += qty\n    print(sumQty)\n})"}}
{"t":{"$date":"2023-03-08T08:47:50.998Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"type":"journal"},"options":{"projection":{"qty":1,"_id":0,"type":1}}}}}
{"t":{"$date":"2023-03-08T08:47:51.012Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"ReferenceError: sumQty is not defined","attr":{"message":"sumQty is not defined","name":"ReferenceError","stack":"ReferenceError: sumQty is not defined\n    at REPL1262:50:17\n    at REPL1262:64:13\n    at Cursor.forEach (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1668580)\n    at async Cursor.forEach (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1755595)\n    at async Cursor.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1750244)\n    at async REPL1262:69:25\n    at async ShellEvaluator.innerEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931343)\n    at async ShellEvaluator.customEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931482)\n    at async MongoshNodeRepl.eval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:843292)\n    at async PrettyREPLServer.h.eval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:800185)"}}
{"t":{"$date":"2023-03-08T08:48:37.143Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let sumQty = 0;"}}
{"t":{"$date":"2023-03-08T08:48:37.406Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n    type: 'journal'\n},\n{qty: 1, _id: 0, type:1}\n).forEach(({qty}) => {\n    sumQty += qty\n    print(sumQty)\n})"}}
{"t":{"$date":"2023-03-08T08:48:37.413Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"type":"journal"},"options":{"projection":{"qty":1,"_id":0,"type":1}}}}}
{"t":{"$date":"2023-03-08T09:47:12.447Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        $or: [\n            {status: 'A'}, {type: 'journal'}\n        ]\n    },\n    {society: 1, _id:0}\n)"}}
{"t":{"$date":"2023-03-08T09:47:12.455Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"$or":[{"status":"A"},{"type":"journal"}]},"options":{"projection":{"society":1,"_id":0}}}}}
{"t":{"$date":"2023-03-08T10:16:10.895Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let res = []"}}
{"t":{"$date":"2023-03-08T10:16:11.267Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n  tags : \"blank\"\n}, \n{_id: 0, society: 1, tags: 1}\n).forEach(({tags, society})=>{\n    let count = 0 ;\n    for(const tag of tags){\n        if( tag === 'blank') count+=1 ;\n\n        if(count == 2) {res.push({tags, society}); break; }\n    }\n});"}}
{"t":{"$date":"2023-03-08T10:16:11.276Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"tags":"blank"},"options":{"projection":{"_id":0,"society":1,"tags":1}}}}}
{"t":{"$date":"2023-03-08T10:16:11.343Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-08T10:16:11.400Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"print(res);"}}
{"t":{"$date":"2023-03-08T10:19:57.924Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let res = []"}}
{"t":{"$date":"2023-03-08T10:19:58.334Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n  tags : \"blank\"\n}, \n{_id: 0, society: 1, tags: 1}\n).forEach(({tags, society})=>{\n    let count = 0 ;\n    for(const tag of tags){\n        if( tag === 'blank') count+=1 ;\n        if(count === 2) {res.push({tags, society}); break; }\n    }\n});"}}
{"t":{"$date":"2023-03-08T10:19:58.337Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"tags":"blank"},"options":{"projection":{"_id":0,"society":1,"tags":1}}}}}
{"t":{"$date":"2023-03-08T10:19:58.378Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"print(res);"}}
{"t":{"$date":"2023-03-08T10:20:34.585Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let res = []"}}
{"t":{"$date":"2023-03-08T10:20:34.899Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n  tags : \"blank\"\n}, \n{_id: 0, society: 1, tags: 1}\n).forEach(({tags, society})=>{\n    let count = 0 ;\n    for(const tag of tags){\n        if( tag === 'blank') count+=1 ;\n        if(count == 2) {res.push({tags, society}); break; }\n    }\n});"}}
{"t":{"$date":"2023-03-08T10:20:34.903Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"tags":"blank"},"options":{"projection":{"_id":0,"society":1,"tags":1}}}}}
{"t":{"$date":"2023-03-08T10:20:34.940Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"print(res);"}}
{"t":{"$date":"2023-03-08T10:20:34.981Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"print(res.society)"}}
{"t":{"$date":"2023-03-08T10:20:52.916Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let res = []"}}
{"t":{"$date":"2023-03-08T10:20:53.288Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n  tags : \"blank\"\n}, \n{_id: 0, society: 1, tags: 1}\n).forEach(({tags, society})=>{\n    let count = 0 ;\n    for(const tag of tags){\n        if( tag === 'blank') count+=1 ;\n        if(count == 2) {res.push({tags, society}); break; }\n    }\n});"}}
{"t":{"$date":"2023-03-08T10:20:53.291Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"tags":"blank"},"options":{"projection":{"_id":0,"society":1,"tags":1}}}}}
{"t":{"$date":"2023-03-08T10:20:53.334Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-08T10:20:53.367Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"print(res.society)"}}
{"t":{"$date":"2023-03-08T10:21:16.969Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let res = []"}}
{"t":{"$date":"2023-03-08T10:21:17.270Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n  tags : \"blank\"\n}, \n{_id: 0, society: 1, tags: 1}\n).forEach(({tags, society})=>{\n    let count = 0 ;\n    for(const tag of tags){\n        if( tag === 'blank') count+=1 ;\n        if(count == 2) {res.push({tags, society}); break; }\n    }\n});"}}
{"t":{"$date":"2023-03-08T10:21:17.273Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"tags":"blank"},"options":{"projection":{"_id":0,"society":1,"tags":1}}}}}
{"t":{"$date":"2023-03-08T10:21:17.299Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-08T10:21:17.330Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"print(res)"}}
{"t":{"$date":"2023-03-08T10:23:45.567Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let res = []"}}
{"t":{"$date":"2023-03-08T10:23:45.829Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n  tags : \"blank\"\n}, \n{_id: 0, society: 1, tags: 1}\n).forEach(({tags, society})=>{\n    let count = 0 ;\n    for(const tag of tags){\n        if( tag === 'blank') count+=1 ;\n        \n    }\n    if(count == 3) {res.push({tags, society}) }\n});"}}
{"t":{"$date":"2023-03-08T10:23:45.831Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"tags":"blank"},"options":{"projection":{"_id":0,"society":1,"tags":1}}}}}
{"t":{"$date":"2023-03-08T10:23:45.859Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-08T10:23:45.907Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"print(res)"}}
{"t":{"$date":"2023-03-08T11:24:05.978Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.updateMany(\n    {\n        $or: [\n            {status: 'C'},\n            {status: 'D'}\n        ]\n    },\n    {$mul: {qty: 0.5}},\n    {society: 1, _id:0, qty:1}\n)"}}
{"t":{"$date":"2023-03-08T11:24:05.995Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"shop","coll":"inventory","arguments":{"filter":{"$or":[{"status":"C"},{"status":"D"}]},"options":{"society":1,"_id":0,"qty":1}}}}
{"t":{"$date":"2023-03-08T11:25:16.633Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        $or: [\n            {status: 'C'},\n            {status: 'D'}\n        ]\n    },\n    {_id: 0, society: 1, qty: 1}\n)"}}
{"t":{"$date":"2023-03-08T11:25:16.639Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"$or":[{"status":"C"},{"status":"D"}]},"options":{"projection":{"_id":0,"society":1,"qty":1}}}}}
{"t":{"$date":"2023-03-08T11:26:19.557Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.updateMany(\n    {\n        $or: [\n            {status: 'C'},\n            {status: 'D'}\n        ]\n    },\n    {$mul: {qty: 1.5}}\n)"}}
{"t":{"$date":"2023-03-08T11:26:19.562Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"shop","coll":"inventory","arguments":{"filter":{"$or":[{"status":"C"},{"status":"D"}]},"options":{}}}}
{"t":{"$date":"2023-03-08T11:26:29.356Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        $or: [\n            {status: 'C'},\n            {status: 'D'}\n        ]\n    },\n    {_id: 0, society: 1, qty: 1}\n)"}}
{"t":{"$date":"2023-03-08T11:26:29.360Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"$or":[{"status":"C"},{"status":"D"}]},"options":{"projection":{"_id":0,"society":1,"qty":1}}}}}
{"t":{"$date":"2023-03-08T11:26:41.500Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.updateMany(\n    {\n        $or: [\n            {status: 'C'},\n            {status: 'D'}\n        ]\n    },\n    {$mul: {qty: 1.5}}\n)"}}
{"t":{"$date":"2023-03-08T11:26:41.510Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"shop","coll":"inventory","arguments":{"filter":{"$or":[{"status":"C"},{"status":"D"}]},"options":{}}}}
{"t":{"$date":"2023-03-08T11:26:48.346Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        $or: [\n            {status: 'C'},\n            {status: 'D'}\n        ]\n    },\n    {_id: 0, society: 1, qty: 1}\n)"}}
{"t":{"$date":"2023-03-08T11:26:48.350Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"$or":[{"status":"C"},{"status":"D"}]},"options":{"projection":{"_id":0,"society":1,"qty":1}}}}}
{"t":{"$date":"2023-03-08T11:31:47.095Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.updateMany(\n    {\n        $and : [\n            {$or: [{status: 'A'}, {status: 'B'}]},\n            {tags: ['blank', 'blank', 'blank']}\n        ]\n        \n    },\n    {$mul: {qty: 2.5}}\n)"}}
{"t":{"$date":"2023-03-08T11:31:47.102Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"shop","coll":"inventory","arguments":{"filter":{"$and":[{"$or":[{"status":"A"},{"status":"B"}]},{"tags":["blank","blank","blank"]}]},"options":{}}}}
{"t":{"$date":"2023-03-08T11:32:40.341Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        $and : [\n            {$or: [{status: 'A'}, {status: 'B'}]},\n            {tags: ['blank', 'blank', 'blank']}\n        ]\n    },\n    {_id: 0, society: 1, qty: 1}\n)"}}
{"t":{"$date":"2023-03-08T11:32:40.345Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"$and":[{"$or":[{"status":"A"},{"status":"B"}]},{"tags":["blank","blank","blank"]}]},"options":{"projection":{"_id":0,"society":1,"qty":1}}}}}
{"t":{"$date":"2023-03-08T11:35:54.659Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let res = []"}}
{"t":{"$date":"2023-03-08T11:35:55.726Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.updateMany({\n    $and : [\n        {$or: [{status: 'A'}, {status: 'B'}]},\n        {tags: \"blank\"}\n    ]\n}, \n{_id: 0, society: 1, tags: 1}\n).forEach(({tags, society})=>{\n    let count = 0 ;\n    for(const tag of tags){\n        if( tag === 'blank') count+=1 ;  \n    }\n    if(count == 3) {res.push({tags, society}) }\n});"}}
{"t":{"$date":"2023-03-08T11:35:55.731Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"shop","coll":"inventory","arguments":{"filter":{"$and":[{"$or":[{"status":"A"},{"status":"B"}]},{"tags":"blank"}]},"options":{}}}}
{"t":{"$date":"2023-03-08T11:35:55.745Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoInvalidArgumentError: Update document requires atomic operators","attr":{"message":"Update document requires atomic operators","name":"MongoInvalidArgumentError","stack":"MongoInvalidArgumentError: Update document requires atomic operators\n    at new UpdateManyOperation (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1438409)\n    at Collection.updateMany (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1295254)\n    at CliServiceProvider.updateMany (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:946502)\n    at Proxy.updateMany (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1689187)\n    at async Proxy.updateMany (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1755595)\n    at async Proxy.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1749809)\n    at async Proxy.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1750244)\n    at async REPL1470:48:25\n    at async ShellEvaluator.innerEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931343)\n    at async ShellEvaluator.customEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931482)"}}
{"t":{"$date":"2023-03-08T11:36:47.121Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let res = []"}}
{"t":{"$date":"2023-03-08T11:36:48.437Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.updateMany({\n    $and : [\n        {$or: [{status: 'A'}, {status: 'B'}]},\n        {tags: \"blank\"}\n    ]\n}\n).forEach(({tags, society})=>{\n    let count = 0 ;\n    for(const tag of tags){\n        if( tag === 'blank') count+=1 ;  \n    }\n    if(count == 3) {res.push({tags, society}) }\n});"}}
{"t":{"$date":"2023-03-08T11:36:48.444Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"shop","coll":"inventory","arguments":{"filter":{"$and":[{"$or":[{"status":"A"},{"status":"B"}]},{"tags":"blank"}]},"options":{}}}}
{"t":{"$date":"2023-03-08T11:36:48.453Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoInvalidArgumentError: Update document requires atomic operators","attr":{"message":"Update document requires atomic operators","name":"MongoInvalidArgumentError","stack":"MongoInvalidArgumentError: Update document requires atomic operators\n    at new UpdateManyOperation (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1438409)\n    at Collection.updateMany (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1295254)\n    at CliServiceProvider.updateMany (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:946502)\n    at Proxy.updateMany (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1689187)\n    at async Proxy.updateMany (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1755595)\n    at async Proxy.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1749809)\n    at async Proxy.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1750244)\n    at async REPL1484:44:25\n    at async ShellEvaluator.innerEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931343)\n    at async ShellEvaluator.customEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931482)"}}
{"t":{"$date":"2023-03-08T11:47:26.647Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        $and : [\n            {$or: [{status: 'A'}, {status: 'B'}]},\n            {tags: \"blank\"}\n        ]\n    }\n).forEach(data => {\n    let tab= data.tags\n    print(tab)\n})"}}
{"t":{"$date":"2023-03-08T11:47:26.655Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"$and":[{"$or":[{"status":"A"},{"status":"B"}]},{"tags":"blank"}]},"options":{}}}}
{"t":{"$date":"2023-03-08T11:52:26.628Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        $and : [\n            {$or: [{status: 'A'}, {status: 'B'}]},\n            {tags: \"blank\"}\n        ]\n    }\n).forEach(data => {\n    let tagsArray= data.tags\n    print(tagsArray)\n    \n})"}}
{"t":{"$date":"2023-03-08T11:52:26.633Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"$and":[{"$or":[{"status":"A"},{"status":"B"}]},{"tags":"blank"}]},"options":{}}}}
{"t":{"$date":"2023-03-08T11:53:13.551Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        $and : [\n            {$or: [{status: 'A'}, {status: 'B'}]},\n            {tags: \"blank\"}\n        ]\n    },{_id:0, society: 1, tags: 1}\n).forEach(data => {\n    let tagsArray= data.tags\n    print(tagsArray)\n    \n})"}}
{"t":{"$date":"2023-03-08T11:53:13.556Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"$and":[{"$or":[{"status":"A"},{"status":"B"}]},{"tags":"blank"}]},"options":{"projection":{"_id":0,"society":1,"tags":1}}}}}
{"t":{"$date":"2023-03-08T11:53:48.892Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        $and : [\n            {$or: [{status: 'A'}, {status: 'B'}]},\n            {tags: \"blank\"}\n        ]\n    },{_id:0, society: 1, tags: 1}\n).forEach(data => {\n    const tagsArray= data.tags\n    print(tagsArray)\n    \n})"}}
{"t":{"$date":"2023-03-08T11:53:48.898Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"$and":[{"$or":[{"status":"A"},{"status":"B"}]},{"tags":"blank"}]},"options":{"projection":{"_id":0,"society":1,"tags":1}}}}}
{"t":{"$date":"2023-03-08T11:59:36.887Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        $and : [\n            {$or: [{status: 'A'}, {status: 'B'}]},\n            {tags: \"blank\"}\n        ]\n    },{_id:0, society: 1, tags: 1}\n).forEach(data => {\n    let tagsArray= data.tags;\n    const occ = {};\n    for (let n of tagsArray){\n        occ[n] = occ[n] ? occ[n] + 1 : 1;\n    }\n    print(ocs[\"blank\"])\n}\n)"}}
{"t":{"$date":"2023-03-08T11:59:36.895Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"$and":[{"$or":[{"status":"A"},{"status":"B"}]},{"tags":"blank"}]},"options":{"projection":{"_id":0,"society":1,"tags":1}}}}}
{"t":{"$date":"2023-03-08T11:59:36.912Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"ReferenceError: ocs is not defined","attr":{"message":"ocs is not defined","name":"ReferenceError","stack":"ReferenceError: ocs is not defined\n    at REPL1547:64:187\n    at REPL1547:77:13\n    at Cursor.forEach (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1668580)\n    at async Cursor.forEach (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1755595)\n    at async Cursor.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1750244)\n    at async REPL1547:82:25\n    at async ShellEvaluator.innerEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931343)\n    at async ShellEvaluator.customEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931482)\n    at async MongoshNodeRepl.eval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:843292)\n    at async PrettyREPLServer.h.eval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:800185)"}}
{"t":{"$date":"2023-03-08T11:59:50.859Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        $and : [\n            {$or: [{status: 'A'}, {status: 'B'}]},\n            {tags: \"blank\"}\n        ]\n    },{_id:0, society: 1, tags: 1}\n).forEach(data => {\n    let tagsArray= data.tags;\n    const occ = {};\n    for (let n of tagsArray){\n        occ[n] = occ[n] ? occ[n] + 1 : 1;\n    }\n    print(occ[\"blank\"])\n}\n)"}}
{"t":{"$date":"2023-03-08T11:59:50.866Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"$and":[{"$or":[{"status":"A"},{"status":"B"}]},{"tags":"blank"}]},"options":{"projection":{"_id":0,"society":1,"tags":1}}}}}
{"t":{"$date":"2023-03-08T12:04:41.593Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token (18:26)\n\n\u001b[0m \u001b[90m 16 |\u001b[39m     \u001b[36mif\u001b[39m (number \u001b[33m==\u001b[39m \u001b[35m3\u001b[39m) {\u001b[0m\n\u001b[0m \u001b[90m 17 |\u001b[39m         db\u001b[33m.\u001b[39minventory\u001b[33m.\u001b[39mupdateMany({\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 18 |\u001b[39m            $mul\u001b[33m:\u001b[39m {qty\u001b[33m:\u001b[39m \u001b[35m2\u001b[39m\u001b[33m,\u001b[39m\u001b[35m5\u001b[39m}\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 19 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":18,"column":26,"index":451},"pos":451,"message":"Unexpected token (18:26)\n\n\u001b[0m \u001b[90m 16 |\u001b[39m     \u001b[36mif\u001b[39m (number \u001b[33m==\u001b[39m \u001b[35m3\u001b[39m) {\u001b[0m\n\u001b[0m \u001b[90m 17 |\u001b[39m         db\u001b[33m.\u001b[39minventory\u001b[33m.\u001b[39mupdateMany({\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 18 |\u001b[39m            $mul\u001b[33m:\u001b[39m {qty\u001b[33m:\u001b[39m \u001b[35m2\u001b[39m\u001b[33m,\u001b[39m\u001b[35m5\u001b[39m}\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 19 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token (18:26)\n\n\u001b[0m \u001b[90m 16 |\u001b[39m     \u001b[36mif\u001b[39m (number \u001b[33m==\u001b[39m \u001b[35m3\u001b[39m) {\u001b[0m\n\u001b[0m \u001b[90m 17 |\u001b[39m         db\u001b[33m.\u001b[39minventory\u001b[33m.\u001b[39mupdateMany({\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 18 |\u001b[39m            $mul\u001b[33m:\u001b[39m {qty\u001b[33m:\u001b[39m \u001b[35m2\u001b[39m\u001b[33m,\u001b[39m\u001b[35m5\u001b[39m}\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 19 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-08T12:04:41.621Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token (1:8)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m         })\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":1,"column":8,"index":8},"pos":8,"message":"Unexpected token (1:8)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m         })\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token (1:8)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m         })\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-08T12:04:41.625Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m     }\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":1,"column":4,"index":4},"pos":4,"message":"Unexpected token (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m     }\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m     }\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-08T12:04:41.630Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token (1:0)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m }\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":1,"column":0,"index":0},"pos":0,"message":"Unexpected token (1:0)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m }\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token (1:0)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m }\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-08T12:04:41.635Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token (1:0)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m ) \u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":1,"column":0,"index":0},"pos":0,"message":"Unexpected token (1:0)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m ) \u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token (1:0)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m ) \u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-08T12:06:23.655Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token (20:24)\n\n\u001b[0m \u001b[90m 18 |\u001b[39m            data\u001b[0m\n\u001b[0m \u001b[90m 19 |\u001b[39m         }\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 20 |\u001b[39m         {$mul\u001b[33m:\u001b[39m {qty\u001b[33m:\u001b[39m \u001b[35m2\u001b[39m\u001b[33m,\u001b[39m\u001b[35m5\u001b[39m}})\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 21 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":20,"column":24,"index":476},"pos":476,"message":"Unexpected token (20:24)\n\n\u001b[0m \u001b[90m 18 |\u001b[39m            data\u001b[0m\n\u001b[0m \u001b[90m 19 |\u001b[39m         }\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 20 |\u001b[39m         {$mul\u001b[33m:\u001b[39m {qty\u001b[33m:\u001b[39m \u001b[35m2\u001b[39m\u001b[33m,\u001b[39m\u001b[35m5\u001b[39m}})\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 21 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token (20:24)\n\n\u001b[0m \u001b[90m 18 |\u001b[39m            data\u001b[0m\n\u001b[0m \u001b[90m 19 |\u001b[39m         }\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 20 |\u001b[39m         {$mul\u001b[33m:\u001b[39m {qty\u001b[33m:\u001b[39m \u001b[35m2\u001b[39m\u001b[33m,\u001b[39m\u001b[35m5\u001b[39m}})\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 21 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-08T12:06:23.665Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m     }\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":1,"column":4,"index":4},"pos":4,"message":"Unexpected token (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m     }\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m     }\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-08T12:06:23.673Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token (1:0)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m }\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":1,"column":0,"index":0},"pos":0,"message":"Unexpected token (1:0)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m }\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token (1:0)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m }\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-08T13:09:30.344Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token (1:0)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m ) db\u001b[33m.\u001b[39minventory\u001b[33m.\u001b[39mupdateMany(\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":1,"column":0,"index":0},"pos":0,"message":"Unexpected token (1:0)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m ) db\u001b[33m.\u001b[39minventory\u001b[33m.\u001b[39mupdateMany(\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token (1:0)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m ) db\u001b[33m.\u001b[39minventory\u001b[33m.\u001b[39mupdateMany(\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-08T13:09:31.475Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token (3:5)\n\n\u001b[0m \u001b[90m 1 |\u001b[39m     {\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m         qty\u001b[33m:\u001b[39m {$gt\u001b[33m:\u001b[39m \u001b[35m75\u001b[39m}\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 3 |\u001b[39m     }\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m      \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 4 |\u001b[39m     {\u001b[0m\n\u001b[0m \u001b[90m 5 |\u001b[39m         $set\u001b[33m:\u001b[39m {\u001b[32m\"scores\"\u001b[39m\u001b[33m:\u001b[39m []\u001b[33m,\u001b[39m scores\u001b[33m:\u001b[39m \u001b[35m19\u001b[39m   }\u001b[0m\n\u001b[0m \u001b[90m 6 |\u001b[39m     }\u001b[33m,\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":3,"column":5,"index":34},"pos":34,"message":"Unexpected token (3:5)\n\n\u001b[0m \u001b[90m 1 |\u001b[39m     {\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m         qty\u001b[33m:\u001b[39m {$gt\u001b[33m:\u001b[39m \u001b[35m75\u001b[39m}\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 3 |\u001b[39m     }\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m      \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 4 |\u001b[39m     {\u001b[0m\n\u001b[0m \u001b[90m 5 |\u001b[39m         $set\u001b[33m:\u001b[39m {\u001b[32m\"scores\"\u001b[39m\u001b[33m:\u001b[39m []\u001b[33m,\u001b[39m scores\u001b[33m:\u001b[39m \u001b[35m19\u001b[39m   }\u001b[0m\n\u001b[0m \u001b[90m 6 |\u001b[39m     }\u001b[33m,\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token (3:5)\n\n\u001b[0m \u001b[90m 1 |\u001b[39m     {\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m         qty\u001b[33m:\u001b[39m {$gt\u001b[33m:\u001b[39m \u001b[35m75\u001b[39m}\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 3 |\u001b[39m     }\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m      \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 4 |\u001b[39m     {\u001b[0m\n\u001b[0m \u001b[90m 5 |\u001b[39m         $set\u001b[33m:\u001b[39m {\u001b[32m\"scores\"\u001b[39m\u001b[33m:\u001b[39m []\u001b[33m,\u001b[39m scores\u001b[33m:\u001b[39m \u001b[35m19\u001b[39m   }\u001b[0m\n\u001b[0m \u001b[90m 6 |\u001b[39m     }\u001b[33m,\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-08T13:12:05.209Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.updateOne(\n    { qty: {$gt: 75} },\n    {\n      $set: { \"score\": [], scores: 19 },\n      $currentDate: { lastModified: true }\n    },\n     {\"upsert\": true}\n )"}}
{"t":{"$date":"2023-03-08T13:12:05.218Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateOne","class":"Collection","db":"shop","coll":"inventory","arguments":{"filter":{"qty":{"$gt":75}},"options":{"upsert":true}}}}
{"t":{"$date":"2023-03-08T13:12:37.975Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.updateMany(\n    { qty: {$gt: 75} },\n    {\n      $set: { \"score\": [], scores: 19 },\n      $currentDate: { lastModified: true }\n    },\n     {\"upsert\": true}\n )"}}
{"t":{"$date":"2023-03-08T13:12:37.981Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"shop","coll":"inventory","arguments":{"filter":{"qty":{"$gt":75}},"options":{"upsert":true}}}}
{"t":{"$date":"2023-03-08T13:13:02.172Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find()"}}
{"t":{"$date":"2023-03-08T13:13:02.176Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-08T13:13:18.750Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.updateMany(\n    { qty: {$gt: 75} },\n    {\n      $set: { \"scores\": [], scores: 19 },\n      $currentDate: { lastModified: true }\n    },\n     {\"upsert\": true}\n )"}}
{"t":{"$date":"2023-03-08T13:13:18.756Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"shop","coll":"inventory","arguments":{"filter":{"qty":{"$gt":75}},"options":{"upsert":true}}}}
{"t":{"$date":"2023-03-08T13:13:27.773Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find()"}}
{"t":{"$date":"2023-03-08T13:13:27.776Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-08T13:14:32.181Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.updateMany(\n    { qty: {$gt: 75} },\n    {\n      $set: { \"scores\": [], scores: 19 },\n      $currentDate: { lastModified: true }\n    },\n     {\"upsert\": true}\n )"}}
{"t":{"$date":"2023-03-08T13:14:32.189Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"shop","coll":"inventory","arguments":{"filter":{"qty":{"$gt":75}},"options":{"upsert":true}}}}
{"t":{"$date":"2023-03-08T13:14:44.368Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find()"}}
{"t":{"$date":"2023-03-08T13:14:44.372Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-08T13:18:02.968Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.updateMany(\n    {\n        society: /a/i\n    },\n    {\n        $set: {\"scores\": [], scores:11},\n        $currentDate: { lastModified: true }\n    }, \n    {\"upsert\": true}\n )"}}
{"t":{"$date":"2023-03-08T13:18:02.973Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"shop","coll":"inventory","arguments":{"filter":{"society":{}},"options":{"upsert":true}}}}
{"t":{"$date":"2023-03-08T13:18:15.587Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find()"}}
{"t":{"$date":"2023-03-08T13:18:15.591Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-08T13:19:26.949Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.updateMany(\n    {\n        society: /a/i\n    },\n    {\n        $set: {\"scores\": []},\n        $addToSet : {scores: 11},\n        $currentDate: { lastModified: true }\n    }, \n    {\"upsert\": true}\n )"}}
{"t":{"$date":"2023-03-08T13:19:26.953Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"shop","coll":"inventory","arguments":{"filter":{"society":{}},"options":{"upsert":true}}}}
{"t":{"$date":"2023-03-08T13:19:26.985Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: Updating the path 'scores' would create a conflict at 'scores'","attr":{"index":0,"code":40,"message":"Updating the path 'scores' would create a conflict at 'scores'","name":"MongoServerError","stack":"MongoServerError: Updating the path 'scores' would create a conflict at 'scores'\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1438621\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1277217\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1460311\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1459256\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267726)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)"}}
{"t":{"$date":"2023-03-08T13:19:46.228Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.updateMany(\n    {\n        society: /a/i\n    },\n    {\n        $set: {\"score\": []},\n        $addToSet : {score: 11},\n        $currentDate: { lastModified: true }\n    }, \n    {\"upsert\": true}\n )"}}
{"t":{"$date":"2023-03-08T13:19:46.233Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"shop","coll":"inventory","arguments":{"filter":{"society":{}},"options":{"upsert":true}}}}
{"t":{"$date":"2023-03-08T13:19:46.241Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: Updating the path 'score' would create a conflict at 'score'","attr":{"index":0,"code":40,"message":"Updating the path 'score' would create a conflict at 'score'","name":"MongoServerError","stack":"MongoServerError: Updating the path 'score' would create a conflict at 'score'\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1438621\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1277217\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1460311\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1459256\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267726)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)"}}
{"t":{"$date":"2023-03-08T13:20:03.864Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.updateMany(\n    {\n        society: /a/i\n    },\n    {\n        $set: {\"score1\": []},\n        $addToSet : {score1: 11},\n        $currentDate: { lastModified: true }\n    }, \n    {\"upsert\": true}\n )"}}
{"t":{"$date":"2023-03-08T13:20:03.871Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"shop","coll":"inventory","arguments":{"filter":{"society":{}},"options":{"upsert":true}}}}
{"t":{"$date":"2023-03-08T13:20:03.881Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: Updating the path 'score1' would create a conflict at 'score1'","attr":{"index":0,"code":40,"message":"Updating the path 'score1' would create a conflict at 'score1'","name":"MongoServerError","stack":"MongoServerError: Updating the path 'score1' would create a conflict at 'score1'\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1438621\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1277217\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1460311\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1459256\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267726)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)"}}
{"t":{"$date":"2023-03-08T13:21:38.050Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.updateMany(\n    {\n        society: /a/i\n    },\n    {\n        $set: {\"scores\": [11]},\n        $currentDate: { lastModified: true }\n    }, \n    {\"upsert\": true}\n )"}}
{"t":{"$date":"2023-03-08T13:21:38.056Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"shop","coll":"inventory","arguments":{"filter":{"society":{}},"options":{"upsert":true}}}}
{"t":{"$date":"2023-03-08T13:21:45.300Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find()"}}
{"t":{"$date":"2023-03-08T13:21:45.309Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-08T13:23:04.825Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        scores: 11\n    },\n    {_id: 0, society: 1}\n )"}}
{"t":{"$date":"2023-03-08T13:23:04.830Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"scores":11},"options":{"projection":{"_id":0,"society":1}}}}}
{"t":{"$date":"2023-03-08T13:25:18.540Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.updateMany(\n    {\n        society: 'Alex'\n    },\n    {\n        $set: {\"comment\": \"Hello Alex\"},\n        $currentDate: { lastModified: true }\n    },\n    {\"upsert\": true}\n )"}}
{"t":{"$date":"2023-03-08T13:25:18.547Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"shop","coll":"inventory","arguments":{"filter":{"society":"Alex"},"options":{"upsert":true}}}}
{"t":{"$date":"2023-03-08T13:27:49.847Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        comment: { $exists: false } \n    },\n    {_id:0, society:1}\n )"}}
{"t":{"$date":"2023-03-08T13:27:49.852Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"comment":{"$exists":false}},"options":{"projection":{"_id":0,"society":1}}}}}
{"t":{"$date":"2023-03-08T13:28:51.500Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find(\n    {\n        level: { $exists: true } \n    },\n    {_id:0, society:1}\n )"}}
{"t":{"$date":"2023-03-08T13:28:51.504Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"level":{"$exists":true}},"options":{"projection":{"_id":0,"society":1}}}}}
{"t":{"$date":"2023-03-08T13:30:30.399Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.updateOne(\n    {\n    society: \"Nel\"\n    },\n    {$unset: {level: \"\"}},\n    {'upsert': false}\n )"}}
{"t":{"$date":"2023-03-08T13:30:30.405Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateOne","class":"Collection","db":"shop","coll":"inventory","arguments":{"filter":{"society":"Nel"},"options":{"upsert":false}}}}
{"t":{"$date":"2023-03-08T13:31:08.004Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.findOne(\n    {\n        society: \"Nel\"\n    }\n )"}}
{"t":{"$date":"2023-03-08T13:31:08.011Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"society":"Nel"},"options":{}}}}
{"t":{"$date":"2023-03-08T13:35:05.282Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.updateMany(\n    { qty: {$gt: 75} },\n    {\n      $set: { \"scores\": []},\n      $currentDate: { lastModified: true }\n    },\n    {$push: { scores: 19}},\n     {\"upsert\": true}\n )"}}
{"t":{"$date":"2023-03-08T13:35:05.289Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"shop","coll":"inventory","arguments":{"filter":{"qty":{"$gt":75}},"options":{"$push":{"scores":19}}}}}
{"t":{"$date":"2023-03-08T13:36:16.145Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n     qty: {$gt: 75} \n },\n )"}}
{"t":{"$date":"2023-03-08T13:36:16.149Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"qty":{"$gt":75}},"options":{}}}}
{"t":{"$date":"2023-03-08T13:37:59.780Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.updateMany(\n    {\n        qty: {$gt: 75}\n    },\n    {$unset: {scores: \"\", score: \"\"}},\n    {'upsert': false}\n )"}}
{"t":{"$date":"2023-03-08T13:37:59.784Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"shop","coll":"inventory","arguments":{"filter":{"qty":{"$gt":75}},"options":{"upsert":false}}}}
{"t":{"$date":"2023-03-08T13:38:16.036Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n     qty: {$gt: 75} \n },\n )"}}
{"t":{"$date":"2023-03-08T13:38:16.041Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"qty":{"$gt":75}},"options":{}}}}
{"t":{"$date":"2023-03-08T13:39:09.527Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.updateMany(\n    { qty: {$gt: 75} },\n    {\n      $set: { \"scores\": []},\n      $currentDate: { lastModified: true }\n    },\n    {$push: { scores: 19}},\n     {\"upsert\": true}\n )"}}
{"t":{"$date":"2023-03-08T13:39:09.543Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"shop","coll":"inventory","arguments":{"filter":{"qty":{"$gt":75}},"options":{"$push":{"scores":19}}}}}
{"t":{"$date":"2023-03-08T13:39:21.064Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n     qty: {$gt: 75} \n },\n )"}}
{"t":{"$date":"2023-03-08T13:39:21.069Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"qty":{"$gt":75}},"options":{}}}}
{"t":{"$date":"2023-03-08T13:40:35.772Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.updateMany(\n    { qty: {$gt: 75} },\n    {\n        $push: { scores: 19},\n      $currentDate: { lastModified: true }\n    }\n )"}}
{"t":{"$date":"2023-03-08T13:40:35.776Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"shop","coll":"inventory","arguments":{"filter":{"qty":{"$gt":75}},"options":{}}}}
{"t":{"$date":"2023-03-08T13:40:41.592Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find({\n     qty: {$gt: 75} \n },\n )"}}
{"t":{"$date":"2023-03-08T13:40:41.596Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"query":{"qty":{"$gt":75}},"options":{}}}}
{"t":{"$date":"2023-03-08T13:48:11.048Z"},"s":"I","c":"MONGOSH","id":1000000008,"ctx":"shell-api","msg":"Used \"use\" command","attr":{"db":"ny"}}
{"t":{"$date":"2023-03-08T13:48:11.076Z"},"s":"I","c":"MONGOSH","id":1000000004,"ctx":"connect","msg":"Connecting to server","attr":{"session_id":"6405cbd677e809a33e084c70","userId":null,"telemetryAnonymousId":"6405bc96ab70e5f05a1f88e2","connectionUri":"<mongodb uri><ip address>:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+1.8.0","is_atlas":false,"is_localhost":true,"is_do":false,"server_version":"6.0.4","node_version":"v16.19.1","mongosh_version":"1.8.0","server_os":"linux","server_arch":"x86_64","is_enterprise":false,"auth_type":"DEFAULT","is_data_federation":false,"dl_version":null,"atlas_version":null,"is_genuine":true,"non_genuine_server_name":"mongodb","fcv":"6.0","api_version":null,"api_strict":null,"api_deprecation_errors":null}}
{"t":{"$date":"2023-03-08T13:48:19.012Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$match : { borough : \"Brooklyn\"}},\n    {\n        $addFields: {\n            gradeA:\n            {\n                $function:\n                {\n                    body: function (grades) {\n                        const gradeA = grades.filter(g => g.grade === 'A').map(g => 1)\n\n                        return Array.sum(gradeA)\n                    },\n                    args: [\"$grades\"],\n                    lang: \"js\"\n                }\n            }\n        }\n    },\n    { $project: { gradeA: 1, borough: 1, name: 1, _id: 0, address : 1 } },\n    { $group : { _id : \"$gradeA\", names: { $push: { name : \"$name\" , address : \"$address\"} } } },\n    { $sort : { gradeA : -1 } },\n    { $limit : 1}\n]);"}}
{"t":{"$date":"2023-03-08T13:48:19.026Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"borough":"Brooklyn"}},{"$addFields":{"gradeA":{"$function":{"args":["$grades"],"lang":"js"}}}},{"$project":{"gradeA":1,"borough":1,"name":1,"_id":0,"address":1}},{"$group":{"_id":"$gradeA","names":{"$push":{"name":"$name","address":"$address"}}}},{"$sort":{"gradeA":-1}},{"$limit":1}]}}}
{"t":{"$date":"2023-03-08T13:49:33.810Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.findOne({borough: 'Brooklyn' })"}}
{"t":{"$date":"2023-03-08T13:49:33.814Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"borough":"Brooklyn"},"options":{}}}}
{"t":{"$date":"2023-03-08T13:51:17.117Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.findOne({name: 'Crown Fried Chicken' })"}}
{"t":{"$date":"2023-03-08T13:51:17.122Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"name":"Crown Fried Chicken"},"options":{}}}}
{"t":{"$date":"2023-03-08T14:12:13.335Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$match : { borough : \"Brooklyn\"}},\n    {\n        $addFields: {\n            gradeA:\n            {\n                $function:\n                {\n                    body: function (grades) {\n                        const gradeA = grades.filter(g => g.grade === 'A').map(g => 1)\n\n                        return Array.sum(gradeA)\n                    },\n                    args: [\"$grades\"],\n                    lang: \"js\"\n                }\n            }\n        }\n    },\n    { $project: { gradeA: 1, borough: 1, name: 1, _id: 0, address : 1 } },\n    { $group : { _id : \"$gradeA\", names: { $push: { name : \"$name\" , address : \"$address\"} } } },\n    { $sort : { gradeA : -1 } },\n    { $limit : 1}\n]);"}}
{"t":{"$date":"2023-03-08T14:12:13.341Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"borough":"Brooklyn"}},{"$addFields":{"gradeA":{"$function":{"args":["$grades"],"lang":"js"}}}},{"$project":{"gradeA":1,"borough":1,"name":1,"_id":0,"address":1}},{"$group":{"_id":"$gradeA","names":{"$push":{"name":"$name","address":"$address"}}}},{"$sort":{"gradeA":-1}},{"$limit":1}]}}}
{"t":{"$date":"2023-03-08T15:09:19.871Z"},"s":"I","c":"MONGOSH","id":1000000008,"ctx":"shell-api","msg":"Used \"use\" command","attr":{"db":"shop"}}
{"t":{"$date":"2023-03-08T15:09:19.889Z"},"s":"I","c":"MONGOSH","id":1000000004,"ctx":"connect","msg":"Connecting to server","attr":{"session_id":"6405cbd677e809a33e084c70","userId":null,"telemetryAnonymousId":"6405bc96ab70e5f05a1f88e2","connectionUri":"<mongodb uri><ip address>:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+1.8.0","is_atlas":false,"is_localhost":true,"is_do":false,"server_version":"6.0.4","node_version":"v16.19.1","mongosh_version":"1.8.0","server_os":"linux","server_arch":"x86_64","is_enterprise":false,"auth_type":"DEFAULT","is_data_federation":false,"dl_version":null,"atlas_version":null,"is_genuine":true,"non_genuine_server_name":"mongodb","fcv":"6.0","api_version":null,"api_strict":null,"api_deprecation_errors":null}}
{"t":{"$date":"2023-03-08T16:03:49.631Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.aggregate(\n    [\n        {$group: {\n            _id: qty,\n            count: {$sum: 1}\n        }}\n    ]\n)"}}
{"t":{"$date":"2023-03-08T16:03:49.641Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"ReferenceError: qty is not defined","attr":{"message":"qty is not defined","name":"ReferenceError","stack":"ReferenceError: qty is not defined\n    at REPL1854:36:44\n    at REPL1854:55:5\n    at REPL1854:60:3\n    at Script.runInContext (node:vm:141:12)\n    at PrettyREPLServer.defaultEval (node:repl:574:29)\n    at bound (node:domain:433:15)\n    at PrettyREPLServer.runBound (node:domain:444:12)\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799948\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799676\n    at node:internal/util:364:7"}}
{"t":{"$date":"2023-03-08T16:04:05.129Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.find()"}}
{"t":{"$date":"2023-03-08T16:04:05.134Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"shop","coll":"inventory","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-08T16:04:28.611Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.aggregate(\n    [\n        {$group: {\n            _id: 'qty',\n            count: {$sum: 1}\n        }}\n    ]\n)"}}
{"t":{"$date":"2023-03-08T16:04:28.617Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"shop","coll":"inventory","arguments":{"options":{},"pipeline":[{"$group":{"_id":"qty","count":{"$sum":1}}}]}}}
{"t":{"$date":"2023-03-08T16:05:18.249Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.aggregate(\n    [\n        {$group: {\n            _id: 'qty',\n            count: {$sum: 10}\n        }}\n    ]\n)"}}
{"t":{"$date":"2023-03-08T16:05:18.255Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"shop","coll":"inventory","arguments":{"options":{},"pipeline":[{"$group":{"_id":"qty","count":{"$sum":10}}}]}}}
{"t":{"$date":"2023-03-08T16:06:34.829Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.aggregate(\n    [\n        {$group: {\n            _id : null, sumQty: {$sum: '$qty'}\n        }}\n    ]\n)"}}
{"t":{"$date":"2023-03-08T16:06:34.834Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"shop","coll":"inventory","arguments":{"options":{},"pipeline":[{"$group":{"_id":null,"sumQty":{"$sum":"$qty"}}}]}}}
{"t":{"$date":"2023-03-08T16:18:57.838Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.aggregate(\n    [\n        {$group: {\n            _id : $society, \n            sumQty: {$sum: '$qty'}\n        }}\n    ]\n)"}}
{"t":{"$date":"2023-03-08T16:18:57.848Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"ReferenceError: $society is not defined","attr":{"message":"$society is not defined","name":"ReferenceError","stack":"ReferenceError: $society is not defined\n    at REPL1886:36:49\n    at REPL1886:55:5\n    at REPL1886:60:3\n    at Script.runInContext (node:vm:141:12)\n    at PrettyREPLServer.defaultEval (node:repl:574:29)\n    at bound (node:domain:433:15)\n    at PrettyREPLServer.runBound (node:domain:444:12)\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799948\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799676\n    at node:internal/util:364:7"}}
{"t":{"$date":"2023-03-08T16:19:24.458Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.aggregate(\n    [\n        {$group: {\n            _id : \"$society\", \n            sumQty: {$sum: '$qty'}\n        }}\n    ]\n)"}}
{"t":{"$date":"2023-03-08T16:19:24.464Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"shop","coll":"inventory","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$society","sumQty":{"$sum":"$qty"}}}]}}}
{"t":{"$date":"2023-03-08T16:23:32.507Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.aggregate(\n    [\n        {$group: {\n            _id: \"$society\",\n            total: {$sum: \"$qty\"}\n        }},\n        {$match : {total: {gte: 75}}},\n    ]\n)"}}
{"t":{"$date":"2023-03-08T16:23:32.512Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"shop","coll":"inventory","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$society","total":{"$sum":"$qty"}}},{"$match":{"total":{"gte":75}}}]}}}
{"t":{"$date":"2023-03-08T16:24:00.141Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.inventory.aggregate(\n    [\n        {$group: {\n            _id: \"$society\",\n            total: {$sum: \"$qty\"}\n        }},\n        {$match : {total: {$gte: 75}}},\n    ]\n)"}}
{"t":{"$date":"2023-03-08T16:24:00.145Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"shop","coll":"inventory","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$society","total":{"$sum":"$qty"}}},{"$match":{"total":{"$gte":75}}}]}}}
{"t":{"$date":"2023-03-09T08:52:03.557Z"},"s":"I","c":"MONGOSH","id":1000000008,"ctx":"shell-api","msg":"Used \"use\" command","attr":{"db":"ny"}}
{"t":{"$date":"2023-03-09T08:52:03.574Z"},"s":"I","c":"MONGOSH","id":1000000004,"ctx":"connect","msg":"Connecting to server","attr":{"session_id":"6405cbd677e809a33e084c70","userId":null,"telemetryAnonymousId":"6405bc96ab70e5f05a1f88e2","connectionUri":"<mongodb uri><ip address>:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+1.8.0","is_atlas":false,"is_localhost":true,"is_do":false,"server_version":"6.0.4","node_version":"v16.19.1","mongosh_version":"1.8.0","server_os":"linux","server_arch":"x86_64","is_enterprise":false,"auth_type":"DEFAULT","is_data_federation":false,"dl_version":null,"atlas_version":null,"is_genuine":true,"non_genuine_server_name":"mongodb","fcv":"6.0","api_version":null,"api_strict":null,"api_deprecation_errors":null}}
{"t":{"$date":"2023-03-09T08:54:10.448Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find()"}}
{"t":{"$date":"2023-03-09T08:54:10.455Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-09T09:06:00.795Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate(\n    [\n        {$match: {\n            cuisine: 'American',\n            'grades.grade' : 'A'\n        }},\n        {$project: {\n            fullAddress: [\"$adress.building\", \"$adress.street\", \"$adress.zipcode\"],\n            fullname: [\"$name\", {$toUpper: \"$borough\"}]\n        }},\n        {$match: {\n            cuisine: 'American',\n            'grades.grade' : 'A'\n        }},\n        {$project: {\n            \"fullAdress\": 1, \"fullname\": 1, \"cuisine\": 1, \"grades\": 1, \"_id\": 0\n        }}\n    ]\n)"}}
{"t":{"$date":"2023-03-09T09:06:00.799Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"American","grades.grade":"A"}},{"$project":{"fullAddress":["$adress.building","$adress.street","$adress.zipcode"],"fullname":["$name",{"$toUpper":"$borough"}]}},{"$match":{"cuisine":"American","grades.grade":"A"}},{"$project":{"fullAdress":1,"fullname":1,"cuisine":1,"grades":1,"_id":0}}]}}}
{"t":{"$date":"2023-03-09T09:06:46.116Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate(\n    [\n        {$match: {\n            cuisine: 'American',\n            'grades.grade' : 'A'\n        }},\n        {$project: {\n            fullAddress: [\"$adress.building\", \"$adress.street\", \"$adress.zipcode\"],\n            fullname: [\"$name\", {$toUpper: \"$borough\"}]\n        }},\n        \n    ]\n)"}}
{"t":{"$date":"2023-03-09T09:06:46.121Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"American","grades.grade":"A"}},{"$project":{"fullAddress":["$adress.building","$adress.street","$adress.zipcode"],"fullname":["$name",{"$toUpper":"$borough"}]}}]}}}
{"t":{"$date":"2023-03-09T09:07:36.314Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate(\n    [\n        {$match: {\n            cuisine: 'American',\n            'grades.grade' : 'A'\n        }},\n        {$project: {\n            fullAddress: [\"$address.building\", \"$address.street\", \"$address.zipcode\"],\n            fullname: [\"$name\", {$toUpper: \"$borough\"}]\n        }},\n        \n    ]\n)"}}
{"t":{"$date":"2023-03-09T09:07:36.319Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"American","grades.grade":"A"}},{"$project":{"fullAddress":["$address.building","$address.street","$address.zipcode"],"fullname":["$name",{"$toUpper":"$borough"}]}}]}}}
{"t":{"$date":"2023-03-09T09:09:40.970Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate(\n    [\n        {$match: {\n            cuisine: 'American',\n            'grades.grade' : 'A'\n        }},\n        {$project: {\n            fullAddress: [\"$address.building\", \"$address.street\", \"$address.zipcode\"],\n            fullname: [\"$name\", ({$toUpper: \"$borough\"})]\n        }},\n        \n    ]\n)"}}
{"t":{"$date":"2023-03-09T09:09:40.976Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"American","grades.grade":"A"}},{"$project":{"fullAddress":["$address.building","$address.street","$address.zipcode"],"fullname":["$name",{"$toUpper":"$borough"}]}}]}}}
{"t":{"$date":"2023-03-09T09:10:53.152Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate(\n    [\n        {$match: {\n            cuisine: 'American',\n            'grades.grade' : 'A'\n        }},\n        {$project: {\n            fullAddress: [\"$address.building\", \"$address.street\", \"$address.zipcode\"],\n            fullname: [\"$name\", ({$toUpper: \"$borough\"})],\n            \"fullAdress\": 1, \"fullname\": 1, \"cuisine\": 1, \"grades\": 1, \"_id\": 0\n        }},\n        \n    ]\n)"}}
{"t":{"$date":"2023-03-09T09:10:53.156Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"American","grades.grade":"A"}},{"$project":{"fullAddress":["$address.building","$address.street","$address.zipcode"],"fullname":1,"fullAdress":1,"cuisine":1,"grades":1,"_id":0}}]}}}
{"t":{"$date":"2023-03-09T09:13:08.400Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate(\n    [\n        {$match: {\n            cuisine: 'American',\n            'grades.grade' : 'A'\n        }},\n        {$project: {\n            fullAddress: [\"$address.building\", \"$address.street\", \"$address.zipcode\"],\n            fullname: [\"$name\", ({$toUpper: \"$borough\"})],\n            \"fullAdress\": 1, \"fullname\": 1, \"cuisine\": 1, \"grades\": 1, \"_id\": 0\n        }},\n        \n    ]\n)"}}
{"t":{"$date":"2023-03-09T09:13:08.404Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"American","grades.grade":"A"}},{"$project":{"fullAddress":["$address.building","$address.street","$address.zipcode"],"fullname":1,"fullAdress":1,"cuisine":1,"grades":1,"_id":0}}]}}}
{"t":{"$date":"2023-03-09T09:18:11.731Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate(\n    [\n        {$match: {\n            cuisine: 'American',\n            'grades.grade' : 'A'\n        }},\n        {$project: {\n            fullAddress: [{$concat: [\"$address.building\", \"$address.street\"]}, \"$address.zipcode\"],\n            fullname: [\"$name\", ({$toUpper: \"$borough\"})],\n            \"fullAdress\": 1, \"fullname\": 1, \"cuisine\": 1, \"grades\": 1, \"_id\": 0\n        }},\n        \n    ]\n)"}}
{"t":{"$date":"2023-03-09T09:18:11.735Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"American","grades.grade":"A"}},{"$project":{"fullAddress":[{"$concat":["$address.building","$address.street"]},"$address.zipcode"],"fullname":1,"fullAdress":1,"cuisine":1,"grades":1,"_id":0}}]}}}
{"t":{"$date":"2023-03-09T09:18:57.958Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate(\n    [\n        {$match: {\n            cuisine: 'American',\n            'grades.grade' : 'A'\n        }},\n        {$project: {\n            fullAddress: [{$concat: [\"$address.building\", \"$address.street\"]}, \"$address.zipcode\"],\n            fullname: [\"$name\", ({$toUpper: \"$borough\"})],\n            \"fullname\": 1, \"fullAddress\": 1, \"cuisine\": 1, \"grades\": 1, \"_id\": 0\n        }},\n        \n    ]\n)"}}
{"t":{"$date":"2023-03-09T09:18:57.966Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"American","grades.grade":"A"}},{"$project":{"fullAddress":1,"fullname":1,"cuisine":1,"grades":1,"_id":0}}]}}}
{"t":{"$date":"2023-03-09T09:19:26.688Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate(\n    [\n        {$match: {\n            cuisine: 'American',\n            'grades.grade' : 'A'\n        }},\n        {$project: {\n            fullAddress: [{$concat: [\"$address.building\", \"$address.street\"]}, \"$address.zipcode\"],\n            fullname: [\"$name\", ({$toUpper: \"$borough\"})],\n            \"$fullname\": 1, \"$fullAddress\": 1, \"cuisine\": 1, \"grades\": 1, \"_id\": 0\n        }},\n        \n    ]\n)"}}
{"t":{"$date":"2023-03-09T09:19:26.694Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"American","grades.grade":"A"}},{"$project":{"fullAddress":[{"$concat":["$address.building","$address.street"]},"$address.zipcode"],"fullname":["$name",{"$toUpper":"$borough"}],"$fullname":1,"$fullAddress":1,"cuisine":1,"grades":1,"_id":0}}]}}}
{"t":{"$date":"2023-03-09T09:19:26.731Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: Invalid $project :: caused by :: FieldPath field names may not start with '$'. Consider using $getField or $setField.","attr":{"ok":0,"code":16410,"codeName":"Location16410","message":"Invalid $project :: caused by :: FieldPath field names may not start with '$'. Consider using $getField or $setField.","name":"MongoServerError","stack":"MongoServerError: Invalid $project :: caused by :: FieldPath field names may not start with '$'. Consider using $getField or $setField.\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-09T09:19:48.085Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate(\n    [\n        {$match: {\n            cuisine: 'American',\n            'grades.grade' : 'A'\n        }},\n        {$project: {\n            fullAddress: [{$concat: [\"$address.building\", \"$address.street\"]}, \"$address.zipcode\"],\n            fullname: [\"$name\", ({$toUpper: \"$borough\"})],\n            \"fullname\": 1, \"fullAddress\": 1, \"cuisine\": 1, \"grades\": 1, \"_id\": 0\n        }},\n        \n    ]\n)"}}
{"t":{"$date":"2023-03-09T09:19:48.092Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"American","grades.grade":"A"}},{"$project":{"fullAddress":1,"fullname":1,"cuisine":1,"grades":1,"_id":0}}]}}}
{"t":{"$date":"2023-03-09T09:20:37.220Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate(\n    [\n        {$match: {\n            cuisine: 'American',\n            'grades.grade' : 'A'\n        }},\n        {$project: {\n            fullAddress: [{$concat: [\"$address.building\", \"$address.street\"]}, \"$address.zipcode\"],\n            fullname: [\"$name\", ({$toUpper: \"$borough\"})],\n             \"cuisine\": 1, \"grades\": 1, \"_id\": 0\n        }},\n        \n    ]\n)"}}
{"t":{"$date":"2023-03-09T09:20:37.228Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"American","grades.grade":"A"}},{"$project":{"fullAddress":[{"$concat":["$address.building","$address.street"]},"$address.zipcode"],"fullname":["$name",{"$toUpper":"$borough"}],"cuisine":1,"grades":1,"_id":0}}]}}}
{"t":{"$date":"2023-03-09T09:35:01.849Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate(\n    [\n        {$match: {\n            cuisine: 'American',\n            'grades.grade' : 'A'\n        }},\n        {$project: {\n            fullAddress: {\n                $concat: [\n                    \"$address.building\",\n                    \" \",\n                    \"$address.street\",\n                    \", \",\n                    \"$address.zipcode\"\n                ] \n            },\n            fullname: {\n                $concat: [\n                    \"$name\",\n                    \" \",\n                    \"(\",\n                    \" \",\n                    {$toUpper: \"$borough\"},\n                    \")\"\n                ] \n            } \n            ,\n             \"cuisine\": 1, \"grades\": 1, \"_id\": 0\n        }},   \n    ]\n)"}}
{"t":{"$date":"2023-03-09T09:35:01.874Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"American","grades.grade":"A"}},{"$project":{"fullAddress":{"$concat":["$address.building"," ","$address.street",", ","$address.zipcode"]},"fullname":{"$concat":["$name"," ","("," ",{"$toUpper":"$borough"},")"]},"cuisine":1,"grades":1,"_id":0}}]}}}
{"t":{"$date":"2023-03-09T09:51:48.739Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.findOne(\n    {\n        borough: 'Missing'\n    }\n)"}}
{"t":{"$date":"2023-03-09T09:51:48.745Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"borough":"Missing"},"options":{}}}}
{"t":{"$date":"2023-03-09T10:25:53.499Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.createCollection(\"sales\", \n    { capped : true, size : 5242880, max : 5000, validator : {\n            $jsonSchema : {\n                bsonType : \"object\",\n                required : [\"price\"],\n                properties : {\n                    agency : {\n                        bsonType: \"string\"\n                    },\n                    price : {\n                        bsonType : \"decimal\",\n                        description : \"must be a number and is required\"\n                    },\n                    date : {\n                        bsonType : \"date\",\n                    },\n                    restaurant_id : {\n                        bsonType : \"string\"\n                    }\n                }\n            }\n        }\n    }\n)"}}
{"t":{"$date":"2023-03-09T10:25:53.506Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"createCollection","class":"Database","db":"ny","arguments":{"name":"sales","options":{"capped":true,"size":5242880,"max":5000,"validator":{"$jsonSchema":{"bsonType":"object","required":["price"],"properties":{"agency":{"bsonType":"string"},"price":{"bsonType":"decimal","description":"must be a number and is required"},"date":{"bsonType":"date"},"restaurant_id":{"bsonType":"string"}}}}}}}}
{"t":{"$date":"2023-03-09T10:26:05.262Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.sales.insertMany([\n  {  \"restaurant_id\" : \"5e79995fee344ac7b3cde77d\", \"agency\" : \"abc\" , \"price\" : NumberDecimal(\"100000\"),  \"date\" : ISODate(\"2014-03-01T08:00:00Z\") },\n  {  \"restaurant_id\" : \"5e79995fee344ac7b3cde784\", \"agency\" : \"xyz\" , \"price\" : NumberDecimal(\"200000\"),  \"date\" : ISODate(\"2014-03-01T09:00:00Z\") },\n  { \"restaurant_id\" : \"5e79995fee344ac7b3cde77f\", \"agency\" : \"abc\" , \"price\" : NumberDecimal(\"5000000\"),  \"date\" : ISODate(\"2014-03-15T09:00:00Z\") },\n  {  \"restaurant_id\" : \"5e79995fee344ac7b3cde785\", \"agency\" : \"uvw\" , \"price\" : NumberDecimal(\"5000000\"),  \"date\" : ISODate(\"2014-04-04T11:21:39.736Z\") },\n  {  \"restaurant_id\" : \"5e79995fee344ac7b3cde788\", \"agency\" : \"uvw\" , \"price\" : NumberDecimal(\"10000000\"),  \"date\" : ISODate(\"2014-04-04T21:23:13.331Z\") },\n  {  \"restaurant_id\" : \"5e79995fee344ac7b3cde790\", \"agency\" : \"abc\" , \"price\" : NumberDecimal(\"700000.5\"),  \"date\" : ISODate(\"2015-06-04T05:08:13Z\") },\n  {  \"restaurant_id\" : \"5e79995fee344ac7b3cde78a\", \"agency\" : \"xyz\" , \"price\" : NumberDecimal(\"700000.5\"),  \"date\" : ISODate(\"2015-09-10T08:43:00Z\") },\n  {  \"restaurant_id\" : \"5e79995fee344ac7b3cde781\", \"agency\" : \"abc\" , \"price\" : NumberDecimal(\"1000000\") , \"date\" : ISODate(\"2016-02-06T20:20:13Z\") },\n])"}}
{"t":{"$date":"2023-03-09T10:26:05.285Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"insertMany","class":"Collection","db":"ny","coll":"sales","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-09T10:29:14.188Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.sales.aggregate( [\n  {\n    $group: {\n       _id: null,\n       count: { $sum: 1 }\n    }\n  }\n] )"}}
{"t":{"$date":"2023-03-09T10:29:14.194Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"sales","arguments":{"options":{},"pipeline":[{"$group":{"_id":null,"count":{"$sum":1}}}]}}}
{"t":{"$date":"2023-03-09T10:29:45.891Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.sales.aggregate( [\n    {\n      $group: {\n         _id: \"$agency\",\n         count: { $sum: 1 }\n      }\n    }\n  ] )"}}
{"t":{"$date":"2023-03-09T10:29:45.898Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"sales","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$agency","count":{"$sum":1}}}]}}}
{"t":{"$date":"2023-03-09T10:30:17.529Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.sales.aggregate( [\n    {\n      $group: {\n         _id: \"$price\",\n         count: { $sum: 1 }\n      }\n    }\n  ] )"}}
{"t":{"$date":"2023-03-09T10:30:17.534Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"sales","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$price","count":{"$sum":1}}}]}}}
{"t":{"$date":"2023-03-09T10:34:31.793Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.sales.aggregate( [\n    {\n      $group: {\n         _id: \"$agency\",\n         count: { $sum: \"$price\" }\n      }\n    }\n  ] )"}}
{"t":{"$date":"2023-03-09T10:34:31.799Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"sales","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$agency","count":{"$sum":"$price"}}}]}}}
{"t":{"$date":"2023-03-09T10:38:54.172Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.sales.aggregate( [\n    {\n      $group: {\n         _id: \"$agency\",\n         count: { $sum: \"$price\" }\n      },\n      $match: {\n        \"count\": {$gt: 950000}\n      }\n    }\n  ] )"}}
{"t":{"$date":"2023-03-09T10:38:54.180Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"sales","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$agency","count":{"$sum":"$price"}},"$match":{"count":{"$gt":950000}}}]}}}
{"t":{"$date":"2023-03-09T10:38:54.196Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: A pipeline stage specification object must contain exactly one field.","attr":{"ok":0,"code":40323,"codeName":"Location40323","message":"A pipeline stage specification object must contain exactly one field.","name":"MongoServerError","stack":"MongoServerError: A pipeline stage specification object must contain exactly one field.\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-09T10:39:29.600Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.sales.aggregate( [\n    {\n      $group: {\n         _id: \"$agency\",\n         count: { $sum: \"$price\" }\n      },\n      $match: {\n        \"$count\": {$gt: 950000}\n      }\n    }\n  ] )"}}
{"t":{"$date":"2023-03-09T10:39:29.606Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"sales","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$agency","count":{"$sum":"$price"}},"$match":{"$count":{"$gt":950000}}}]}}}
{"t":{"$date":"2023-03-09T10:39:29.615Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: A pipeline stage specification object must contain exactly one field.","attr":{"ok":0,"code":40323,"codeName":"Location40323","message":"A pipeline stage specification object must contain exactly one field.","name":"MongoServerError","stack":"MongoServerError: A pipeline stage specification object must contain exactly one field.\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-09T10:40:47.915Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.sales.aggregate( [\n    {\n      $group: {\n         _id: \"$agency\",\n         count: { $sum: \"$price\" }\n      },\n      \n    },\n    {$match: {\n        \"$count\": {$gt: 950000}\n      }}\n  ] )"}}
{"t":{"$date":"2023-03-09T10:40:47.920Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"sales","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$agency","count":{"$sum":"$price"}}},{"$match":{"$count":{"$gt":950000}}}]}}}
{"t":{"$date":"2023-03-09T10:40:47.936Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: unknown top level operator: $count. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.","attr":{"ok":0,"code":2,"codeName":"BadValue","message":"unknown top level operator: $count. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.","name":"MongoServerError","stack":"MongoServerError: unknown top level operator: $count. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-09T10:41:03.933Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.sales.aggregate( [\n    {\n      $group: {\n         _id: \"$agency\",\n         count: { $sum: \"$price\" }\n      },\n      \n    },\n    {$match: {\n        \"count\": {$gt: 950000}\n      }}\n  ] )"}}
{"t":{"$date":"2023-03-09T10:41:03.937Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"sales","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$agency","count":{"$sum":"$price"}}},{"$match":{"count":{"$gt":950000}}}]}}}
{"t":{"$date":"2023-03-09T10:47:17.411Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate( [\n    {$group: {\n        _id: \"$name\",\n        borough: \"$borough\",\n        cuisine: \"$cuisine\"\n    }},\n    {$project:{\n        name: 1,\n        _id:1,\n    }}\n  ] )"}}
{"t":{"$date":"2023-03-09T10:47:17.416Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$name","borough":"$borough","cuisine":"$cuisine"}},{"$project":{"name":1,"_id":1}}]}}}
{"t":{"$date":"2023-03-09T10:47:17.432Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: The field 'borough' must be an accumulator object","attr":{"ok":0,"code":40234,"codeName":"Location40234","message":"The field 'borough' must be an accumulator object","name":"MongoServerError","stack":"MongoServerError: The field 'borough' must be an accumulator object\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-09T10:47:59.929Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate( [\n    {$group: {\n        \"_id\": \"$name\",\n        \"borough\": \"$borough\",\n        \"cuisine\": \"$cuisine\"\n    }},\n    {$project:{\n        name: 1,\n        _id:1,\n    }}\n  ] )"}}
{"t":{"$date":"2023-03-09T10:47:59.934Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$name","borough":"$borough","cuisine":"$cuisine"}},{"$project":{"name":1,"_id":1}}]}}}
{"t":{"$date":"2023-03-09T10:47:59.945Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: The field 'borough' must be an accumulator object","attr":{"ok":0,"code":40234,"codeName":"Location40234","message":"The field 'borough' must be an accumulator object","name":"MongoServerError","stack":"MongoServerError: The field 'borough' must be an accumulator object\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-09T10:54:41.977Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate( [\n    {$group: {\n        _id: {$concat: [\n            \"$cuisine\",\n            \" \",\n            \"$borough\",\n        ] },\n    }},\n    {$project:{\n        name: 1,\n        _id:1,\n    }}\n  ] )"}}
{"t":{"$date":"2023-03-09T10:54:41.983Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":{"$concat":["$cuisine"," ","$borough"]}}},{"$project":{"name":1,"_id":1}}]}}}
{"t":{"$date":"2023-03-09T10:55:47.455Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate( [\n    {$group: {\n        _id: {$concat: [\n            \"$cuisine\",\n            \" \",\n            \"$borough\",\n        ] },\n        count: {$sum: 1}\n    }},\n    {$project:{\n        name: 1,\n        _id:1,\n    }}\n  ] )"}}
{"t":{"$date":"2023-03-09T10:55:47.465Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":{"$concat":["$cuisine"," ","$borough"]},"count":{"$sum":1}}},{"$project":{"name":1,"_id":1}}]}}}
{"t":{"$date":"2023-03-09T10:56:29.293Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate( [\n    {$group: {\n        _id: {$concat: [\n            \"$cuisine\",\n            \" \",\n            \"$borough\",\n        ] },\n        count: {$sum: 1}\n    }},\n    {$project:{\n        name: 1,\n        _id:1,\n        count: 1\n    }}\n  ] )"}}
{"t":{"$date":"2023-03-09T10:56:29.301Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":{"$concat":["$cuisine"," ","$borough"]},"count":{"$sum":1}}},{"$project":{"name":1,"_id":1,"count":1}}]}}}
{"t":{"$date":"2023-03-09T10:57:56.700Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n        cuisne: \"Donuts\",\n        borough: \"Queens\"\n    }\n).count()"}}
{"t":{"$date":"2023-03-09T10:57:56.707Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"cuisne":"Donuts","borough":"Queens"},"options":{}}}}
{"t":{"$date":"2023-03-09T10:57:56.745Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-09T10:58:10.329Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find(\n    {\n        cuisine: \"Donuts\",\n        borough: \"Queens\"\n    }\n).count()"}}
{"t":{"$date":"2023-03-09T10:58:10.336Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"cuisine":"Donuts","borough":"Queens"},"options":{}}}}
{"t":{"$date":"2023-03-09T10:58:10.359Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-09T11:01:40.887Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    { $group : {_id: \"$borough\", total : {$sum : 1}, names: { $push: {$concat:[ \"$name\", \" \",\"id: \", \"$restaurant_id\" ]} } } },\n    { $project : {_id: 1 , names: 1}}\n]);"}}
{"t":{"$date":"2023-03-09T11:01:40.893Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$borough","total":{"$sum":1},"names":{"$push":{"$concat":["$name"," ","id: ","$restaurant_id"]}}}},{"$project":{"_id":1,"names":1}}]}}}
{"t":{"$date":"2023-03-09T11:02:34.849Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    { $group : {_id: \"$borough\", total : {$sum : 1}, names: { $push: {$concat:[ \"$name\", \" \",\"id: \", \"$restaurant_id\" ]} } } },\n    { $project : {_id: 1 , names: 1}},\n    {$limit: 2}\n]);"}}
{"t":{"$date":"2023-03-09T11:02:34.857Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$borough","total":{"$sum":1},"names":{"$push":{"$concat":["$name"," ","id: ","$restaurant_id"]}}}},{"$project":{"_id":1,"names":1}},{"$limit":2}]}}}
{"t":{"$date":"2023-03-09T11:05:09.558Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    { $group : {\n        _id: \"$borough\", \n        total : {$sum : 1}, \n        names: { $push: {$concat:[ \"$name\", \" \",\"id: \", \"$restaurant_id\" ]} },\n        cuisine: \"$cuisine\"\n    } },\n        \n    { $project : {_id: 1 , name: 1}},\n    {$limit: 2}\n]);"}}
{"t":{"$date":"2023-03-09T11:05:09.567Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$borough","total":{"$sum":1},"names":{"$push":{"$concat":["$name"," ","id: ","$restaurant_id"]}},"cuisine":"$cuisine"}},{"$project":{"_id":1,"name":1}},{"$limit":2}]}}}
{"t":{"$date":"2023-03-09T11:05:09.589Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: The field 'cuisine' must be an accumulator object","attr":{"ok":0,"code":40234,"codeName":"Location40234","message":"The field 'cuisine' must be an accumulator object","name":"MongoServerError","stack":"MongoServerError: The field 'cuisine' must be an accumulator object\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-09T11:05:32.228Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    { $group : {\n        _id: \"$borough\", \n        total : {$sum : 1}, \n        names: { $push: {$concat:[ \"$name\", \" \",\"id: \", \"$restaurant_id\" ]} },\n        type: \"$cuisine\"\n    } },\n        \n    { $project : {_id: 1 , name: 1}},\n    {$limit: 2}\n]);"}}
{"t":{"$date":"2023-03-09T11:05:32.238Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$borough","total":{"$sum":1},"names":{"$push":{"$concat":["$name"," ","id: ","$restaurant_id"]}},"type":"$cuisine"}},{"$project":{"_id":1,"name":1}},{"$limit":2}]}}}
{"t":{"$date":"2023-03-09T11:05:32.258Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: The field 'type' must be an accumulator object","attr":{"ok":0,"code":40234,"codeName":"Location40234","message":"The field 'type' must be an accumulator object","name":"MongoServerError","stack":"MongoServerError: The field 'type' must be an accumulator object\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-09T11:06:10.942Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    { $group : {\n        _id: \"$borough\", \n        total : {$sum : 1}, \n        names: { $push: {$concat:[ \"$name\", \" \",\"id: \", \"$restaurant_id\" ]} },\n        type: {$push: \"$cuisine\"}\n    } },\n        \n    { $project : {_id: 1 , name: 1}},\n    {$limit: 2}\n]);"}}
{"t":{"$date":"2023-03-09T11:06:10.948Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$borough","total":{"$sum":1},"names":{"$push":{"$concat":["$name"," ","id: ","$restaurant_id"]}},"type":{"$push":"$cuisine"}}},{"$project":{"_id":1,"name":1}},{"$limit":2}]}}}
{"t":{"$date":"2023-03-09T11:06:49.020Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    { $group : {\n        _id: \"$borough\", \n        total : {$sum : 1}, \n        names: { $push: {$concat:[ \"$name\", \" \",\"id: \", \"$restaurant_id\" ]} },\n        type: {$push: \"$cuisine\"}\n    } },\n        \n    { $project : {_id: 1 , name: 1, type: 1}},\n    {$limit: 2}\n]);"}}
{"t":{"$date":"2023-03-09T11:06:49.028Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$borough","total":{"$sum":1},"names":{"$push":{"$concat":["$name"," ","id: ","$restaurant_id"]}},"type":{"$push":"$cuisine"}}},{"$project":{"_id":1,"name":1,"type":1}},{"$limit":2}]}}}
{"t":{"$date":"2023-03-09T11:09:20.755Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    { $group : {\n        _id: \"$borough\", \n        total : {$sum : 1}, \n    } \n    },\n    {$goupe: {\n        _id: \"$cuisine\",\n\n    }},\n        \n    { $project : {_id: 1 , name: 1}},\n    {$limit: 2}\n]);"}}
{"t":{"$date":"2023-03-09T11:09:20.762Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$borough","total":{"$sum":1}}},{"$goupe":{"_id":"$cuisine"}},{"$project":{"_id":1,"name":1}},{"$limit":2}]}}}
{"t":{"$date":"2023-03-09T11:09:20.774Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: Unrecognized pipeline stage name: '$goupe'","attr":{"ok":0,"code":40324,"codeName":"Location40324","message":"Unrecognized pipeline stage name: '$goupe'","name":"MongoServerError","stack":"MongoServerError: Unrecognized pipeline stage name: '$goupe'\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-09T11:09:41.859Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    { $group : {\n        _id: \"$borough\", \n        total : {$sum : 1}, \n    } \n    },\n    {$group: {\n        _id: \"$cuisine\",\n\n    }},\n        \n    { $project : {_id: 1 , name: 1}},\n    {$limit: 2}\n]);"}}
{"t":{"$date":"2023-03-09T11:09:41.865Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$borough","total":{"$sum":1}}},{"$group":{"_id":"$cuisine"}},{"$project":{"_id":1,"name":1}},{"$limit":2}]}}}
{"t":{"$date":"2023-03-09T11:10:28.167Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    { $group : {\n        _id: \"$borough\", \n        total : {$sum : 1}, \n    } \n    },\n        \n    { $project : {_id: 1 , name: 1}},\n    {$limit: 2}\n]);"}}
{"t":{"$date":"2023-03-09T11:10:28.175Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$borough","total":{"$sum":1}}},{"$project":{"_id":1,"name":1}},{"$limit":2}]}}}
{"t":{"$date":"2023-03-09T11:10:40.537Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    { $group : {\n        _id: \"$borough\", \n        total : {$sum : 1}, \n    } \n    },\n        \n    { $project : {_id: 1 , name: 1}},\n]);"}}
{"t":{"$date":"2023-03-09T11:10:40.542Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$borough","total":{"$sum":1}}},{"$project":{"_id":1,"name":1}}]}}}
{"t":{"$date":"2023-03-09T11:11:03.810Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    { $group : {\n        _id: \"$borough\", \n        total : {$sum : \"$cuisine\"}, \n    } \n    },\n        \n    { $project : {_id: 1 , name: 1}},\n]);"}}
{"t":{"$date":"2023-03-09T11:11:03.818Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$borough","total":{"$sum":"$cuisine"}}},{"$project":{"_id":1,"name":1}}]}}}
{"t":{"$date":"2023-03-09T11:11:22.003Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    { $group : {\n        _id: \"$borough\", \n        total : {$sum : \"$cuisine\"}, \n    } \n    },\n        \n    { $project : {_id: 1 , name: 1, total:1}},\n]);"}}
{"t":{"$date":"2023-03-09T11:11:22.013Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$borough","total":{"$sum":"$cuisine"}}},{"$project":{"_id":1,"name":1,"total":1}}]}}}
{"t":{"$date":"2023-03-09T11:12:17.282Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    { $group : {\n        _id: \"$borough\", \n        total : {$sum : \"$cuisine\"}, \n    } \n    },\n        \n]);"}}
{"t":{"$date":"2023-03-09T11:12:17.291Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$borough","total":{"$sum":"$cuisine"}}}]}}}
{"t":{"$date":"2023-03-09T11:12:52.511Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    { $group : {\n        _id: \"$borough\", \n        total : {$sum : 1}, \n    } \n    },\n        \n]);"}}
{"t":{"$date":"2023-03-09T11:12:52.517Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$borough","total":{"$sum":1}}}]}}}
{"t":{"$date":"2023-03-09T11:14:37.404Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    { $group : {\n        _id: \"$borough\", \n        total : {$sum : 1}, \n    } \n    },\n    {$project: {\n        _id:1, name:1\n    }},\n    {$limit:2}\n        \n]);"}}
{"t":{"$date":"2023-03-09T11:14:37.411Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$borough","total":{"$sum":1}}},{"$project":{"_id":1,"name":1}},{"$limit":2}]}}}
{"t":{"$date":"2023-03-09T11:14:53.243Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    { $group : {\n        _id: \"$borough\", \n        total : {$sum : 1}, \n    } \n    },\n    {$project: {\n        _id:1, name:1, total:1\n    }},\n    {$limit:2}\n        \n]);"}}
{"t":{"$date":"2023-03-09T11:14:53.250Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$borough","total":{"$sum":1}}},{"$project":{"_id":1,"name":1,"total":1}},{"$limit":2}]}}}
{"t":{"$date":"2023-03-09T11:17:58.260Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate( [\n    { $group: { _id: { borough: \"$borough\", cuisine: \"$cuisine\" },\n                count: { $sum: 1 } } },\n    { $match: { count: { $gt: 1 } } },\n    { $project: { _id: 1,  \n                  name: \"$name\", \n                  count: 1}},\n    {$limit: 2}\n ] )"}}
{"t":{"$date":"2023-03-09T11:17:58.266Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":{"borough":"$borough","cuisine":"$cuisine"},"count":{"$sum":1}}},{"$match":{"count":{"$gt":1}}},{"$project":{"_id":1,"name":"$name","count":1}},{"$limit":2}]}}}
{"t":{"$date":"2023-03-09T11:18:29.583Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate( [\n    { $group: { _id: { borough: \"$borough\", cuisine: \"$cuisine\" },\n                count: { $sum: 1 } } },\n    \n    { $project: { _id: 1,  \n                  name: \"$name\", \n                  count: 1}},\n    {$limit: 2}\n ] )"}}
{"t":{"$date":"2023-03-09T11:18:29.592Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":{"borough":"$borough","cuisine":"$cuisine"},"count":{"$sum":1}}},{"$project":{"_id":1,"name":"$name","count":1}},{"$limit":2}]}}}
{"t":{"$date":"2023-03-09T11:19:59.249Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate( [\n    { $group: { _id: { borough: \"$borough\", cuisine: \"$cuisine\" },\n                count: { $sum: 1 } } },\n    \n    { $project: { _id: 1,  \n                  name: 1, \n                  count: 1\n                }\n    },\n    {$limit: 2}\n ] )"}}
{"t":{"$date":"2023-03-09T11:19:59.257Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":{"borough":"$borough","cuisine":"$cuisine"},"count":{"$sum":1}}},{"$project":{"_id":1,"name":1,"count":1}},{"$limit":2}]}}}
{"t":{"$date":"2023-03-09T11:20:55.579Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate( [\n    { $group: { _id: { borough: \"$borough\", cuisine: \"$cuisine\" },\n                count: { $sum: 1 } } },\n    \n    { $project: { _id: 1,  \n                  name: 1, \n                }\n    },\n    {$limit: 2}\n ] )"}}
{"t":{"$date":"2023-03-09T11:20:55.585Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":{"borough":"$borough","cuisine":"$cuisine"},"count":{"$sum":1}}},{"$project":{"_id":1,"name":1}},{"$limit":2}]}}}
{"t":{"$date":"2023-03-09T11:21:13.625Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate( [\n    { $group: { _id: { borough: \"$borough\", cuisine: \"$cuisine\" },\n                count: { $sum: 1 } } },\n    \n    { $project: { _id: 0,  \n                  name: 1, \n                }\n    },\n    {$limit: 2}\n ] )"}}
{"t":{"$date":"2023-03-09T11:21:13.630Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":{"borough":"$borough","cuisine":"$cuisine"},"count":{"$sum":1}}},{"$project":{"_id":0,"name":1}},{"$limit":2}]}}}
{"t":{"$date":"2023-03-09T11:25:34.584Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$match: {\n        cuisine: \"$cuisine\",\n        borough: \"$borough\"\n    }},\n    { $group : {\n        _id: \"$borough\", \n        total : {$sum : 1}, \n    } \n    },\n    {$project: {\n        _id:1, name:1, total:1\n    }},\n    {$limit:2}\n        \n]);"}}
{"t":{"$date":"2023-03-09T11:25:34.589Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"$cuisine","borough":"$borough"}},{"$group":{"_id":"$borough","total":{"$sum":1}}},{"$project":{"_id":1,"name":1,"total":1}},{"$limit":2}]}}}
{"t":{"$date":"2023-03-09T11:25:36.261Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-09T11:28:01.918Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$match: {\n        cuisine: \"$cuisine\",\n        borough: \"$borough\"\n    }},\n    { $group : {\n        _id: \"$name\", \n        total : {$sum : 1}, \n    } \n    },\n    {$project: {\n        _id:1, name:1, total:1\n    }},\n    {$limit:2}\n        \n]);"}}
{"t":{"$date":"2023-03-09T11:28:01.927Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"$cuisine","borough":"$borough"}},{"$group":{"_id":"$name","total":{"$sum":1}}},{"$project":{"_id":1,"name":1,"total":1}},{"$limit":2}]}}}
{"t":{"$date":"2023-03-09T11:29:41.482Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$match: {\n        cuisine: \"$cuisine\",\n        borough: \"$borough\"\n    }},\n    {$project: {\n        _id:1, name:1, total:1\n    }},\n\n    { $group : {\n        _id: \"$name\", \n        total : {$sum : 1}, \n    } \n    },\n   \n    {$limit:2}\n        \n]);"}}
{"t":{"$date":"2023-03-09T11:29:41.488Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"$cuisine","borough":"$borough"}},{"$project":{"_id":1,"name":1,"total":1}},{"$group":{"_id":"$name","total":{"$sum":1}}},{"$limit":2}]}}}
{"t":{"$date":"2023-03-09T11:30:19.315Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$match: {\n        cuisine: \"$cuisine\",\n        borough: \"$borough\"\n    }},\n    {$project: {\n        cuisine:1, name:1, borough\n    }},\n\n    { $group : {\n        _id: \"$name\", \n        total : {$sum : 1}, \n    } \n    },\n   \n    {$limit:2}\n        \n]);"}}
{"t":{"$date":"2023-03-09T11:30:19.329Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"ReferenceError: borough is not defined","attr":{"message":"borough is not defined","name":"ReferenceError","stack":"ReferenceError: borough is not defined\n    at REPL2570:43:52\n    at REPL2570:68:5\n    at REPL2570:73:3\n    at Script.runInContext (node:vm:141:12)\n    at PrettyREPLServer.defaultEval (node:repl:574:29)\n    at bound (node:domain:433:15)\n    at PrettyREPLServer.runBound (node:domain:444:12)\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799948\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799676\n    at node:internal/util:364:7"}}
{"t":{"$date":"2023-03-09T11:30:33.148Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$match: {\n        cuisine: \"$cuisine\",\n        borough: \"$borough\"\n    }},\n    {$project: {\n        cuisine:1, name:1, borough:1\n    }},\n\n    { $group : {\n        _id: \"$name\", \n        total : {$sum : 1}, \n    } \n    },\n   \n    {$limit:2}\n        \n]);"}}
{"t":{"$date":"2023-03-09T11:30:33.154Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"$cuisine","borough":"$borough"}},{"$project":{"cuisine":1,"name":1,"borough":1}},{"$group":{"_id":"$name","total":{"$sum":1}}},{"$limit":2}]}}}
{"t":{"$date":"2023-03-09T11:31:36.199Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.sales.aggregate( [\n    {\n      $group: {\n         _id: \"$agency\",\n         count: { $sum: \"$price\" }\n      },\n      \n    },\n    {$match: {\n        \"count\": {$gt: 950000}\n      }}\n  ] )"}}
{"t":{"$date":"2023-03-09T11:31:36.208Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"sales","arguments":{"options":{},"pipeline":[{"$group":{"_id":"$agency","count":{"$sum":"$price"}}},{"$match":{"count":{"$gt":950000}}}]}}}
{"t":{"$date":"2023-03-09T11:35:02.388Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$match: {\n        cuisne: 'Italian'\n    }},\n    {$group: {\n        _id: \"$borough\"\n    }}\n])"}}
{"t":{"$date":"2023-03-09T11:35:02.392Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisne":"Italian"}},{"$group":{"_id":"$borough"}}]}}}
{"t":{"$date":"2023-03-09T11:35:15.946Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$match: {\n        cuisine: 'Italian'\n    }},\n    {$group: {\n        _id: \"$borough\"\n    }}\n])"}}
{"t":{"$date":"2023-03-09T11:35:15.951Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"Italian"}},{"$group":{"_id":"$borough"}}]}}}
{"t":{"$date":"2023-03-09T11:35:42.034Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$match: {\n        cuisine: 'Italian'\n    }},\n    {$group: {\n        _id: \"$name\"\n    }}\n])"}}
{"t":{"$date":"2023-03-09T11:35:42.039Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"Italian"}},{"$group":{"_id":"$name"}}]}}}
{"t":{"$date":"2023-03-09T11:36:43.186Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$match: {\n        cuisine: 'Italian',\n        borough: \"$borough\"\n    }},\n    {$group: {\n        _id: \"$name\"\n    }}\n])"}}
{"t":{"$date":"2023-03-09T11:36:43.190Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"Italian","borough":"$borough"}},{"$group":{"_id":"$name"}}]}}}
{"t":{"$date":"2023-03-09T11:37:21.419Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$match: {\n        cuisine: 'Italian',\n    }},\n    {$group: {\n        _id: \"$name\",\n        borough: '$borough'\n    }}\n])"}}
{"t":{"$date":"2023-03-09T11:37:21.424Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"Italian"}},{"$group":{"_id":"$name","borough":"$borough"}}]}}}
{"t":{"$date":"2023-03-09T11:37:21.434Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: The field 'borough' must be an accumulator object","attr":{"ok":0,"code":40234,"codeName":"Location40234","message":"The field 'borough' must be an accumulator object","name":"MongoServerError","stack":"MongoServerError: The field 'borough' must be an accumulator object\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-09T11:40:46.538Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$match: {\n        cuisine: 'Italian',\n    }},\n    {$group: {\n        _id: \"$borough\",\n        names: {$push: {$concat:[\"$name\", \" \", \"id: \",\"$restaurant_id\"]}}\n    }},\n    {$project: {\n        names:1\n    }}\n])"}}
{"t":{"$date":"2023-03-09T11:40:46.545Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"Italian"}},{"$group":{"_id":"$borough","names":{"$push":{"$concat":["$name"," ","id: ","$restaurant_id"]}}}},{"$project":{"names":1}}]}}}
{"t":{"$date":"2023-03-09T11:43:07.684Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$match: {\n        cuisine: \"$cuisine\",\n        borough: \"$borough\"\n    }},\n    { $group : {\n        _id: \"$borough\", \n        names: {$push: {$concat:[\"$name\", \" \", \"id: \",\"$restaurant_id\"]}} \n    } \n    },\n    {$project: {\n        names: 1 \n    }},\n    {$limit:2}\n        \n]);"}}
{"t":{"$date":"2023-03-09T11:43:07.696Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"$cuisine","borough":"$borough"}},{"$group":{"_id":"$borough","names":{"$push":{"$concat":["$name"," ","id: ","$restaurant_id"]}}}},{"$project":{"names":1}},{"$limit":2}]}}}
{"t":{"$date":"2023-03-09T11:43:26.395Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$match: {\n        cuisine: \"$cuisine\",\n    }},\n    { $group : {\n        _id: \"$borough\", \n        names: {$push: {$concat:[\"$name\", \" \", \"id: \",\"$restaurant_id\"]}} \n    } \n    },\n    {$project: {\n        names: 1 \n    }},\n    {$limit:2}\n        \n]);"}}
{"t":{"$date":"2023-03-09T11:43:26.400Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"$cuisine"}},{"$group":{"_id":"$borough","names":{"$push":{"$concat":["$name"," ","id: ","$restaurant_id"]}}}},{"$project":{"names":1}},{"$limit":2}]}}}
{"t":{"$date":"2023-03-09T11:44:11.212Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$match: {\n        cuisine: null,\n    }},\n    { $group : {\n        _id: \"$borough\", \n        names: {$push: {$concat:[\"$name\", \" \", \"id: \",\"$restaurant_id\"]}} \n    } \n    },\n    {$project: {\n        names: 1 \n    }},\n    {$limit:2}\n        \n]);"}}
{"t":{"$date":"2023-03-09T11:44:11.217Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":null}},{"$group":{"_id":"$borough","names":{"$push":{"$concat":["$name"," ","id: ","$restaurant_id"]}}}},{"$project":{"names":1}},{"$limit":2}]}}}
{"t":{"$date":"2023-03-09T11:47:07.310Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.findOne()"}}
{"t":{"$date":"2023-03-09T11:47:07.315Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-09T11:50:13.509Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$unwind : \"$grades\" } ,\n    {$match: {\n        cuisine: 'Italian',\n    }},\n    {$group: {\n        _id: \"$borough\",\n        names: {$push: {$concat:[\"$name\", \" \", \"id: \",\"$restaurant_id\"]}},\n        moyenne: {$avg: \"$score\"}\n    }},\n    {$sort: {moyenne: -1}}\n])"}}
{"t":{"$date":"2023-03-09T11:50:13.514Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$unwind":"$grades"},{"$match":{"cuisine":"Italian"}},{"$group":{"_id":"$borough","names":{"$push":{"$concat":["$name"," ","id: ","$restaurant_id"]}},"moyenne":{"$avg":"$score"}}},{"$sort":{"moyenne":-1}}]}}}
{"t":{"$date":"2023-03-09T11:51:04.561Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.findOne()"}}
{"t":{"$date":"2023-03-09T11:51:04.566Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-09T11:51:32.342Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    \n    {$match: {\n        cuisine: 'Italian',\n    }},\n    {$group: {\n        _id: \"$borough\",\n        names: {$push: {$concat:[\"$name\", \" \", \"id: \",\"$restaurant_id\"]}},\n        moyenne: {$avg: \"$grades.score\"}\n    }},\n    {$sort: {moyenne: -1}}\n])"}}
{"t":{"$date":"2023-03-09T11:51:32.348Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"Italian"}},{"$group":{"_id":"$borough","names":{"$push":{"$concat":["$name"," ","id: ","$restaurant_id"]}},"moyenne":{"$avg":"$grades.score"}}},{"$sort":{"moyenne":-1}}]}}}
{"t":{"$date":"2023-03-09T11:51:59.787Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    \n    {$match: {\n        cuisine: 'Italian',\n    }},\n    {$group: {\n        _id: \"$name\",\n        names: {$push: {$concat:[\"$name\", \" \", \"id: \",\"$restaurant_id\"]}},\n        moyenne: {$avg: \"$grades.score\"}\n    }},\n    {$sort: {moyenne: -1}}\n])"}}
{"t":{"$date":"2023-03-09T11:51:59.796Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"Italian"}},{"$group":{"_id":"$name","names":{"$push":{"$concat":["$name"," ","id: ","$restaurant_id"]}},"moyenne":{"$avg":"$grades.score"}}},{"$sort":{"moyenne":-1}}]}}}
{"t":{"$date":"2023-03-09T11:51:59.865Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-09T13:28:42.201Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    { $unwind : \"$grades\" } ,\n    {$match: {\n        cuisine: 'Italian',\n    }},\n    {$group: {\n        _id: \"$borough\",\n        names: {$push: {$concat:[\"$name\", \" \", \"id: \",\"$restaurant_id\"]}},\n        moyenne: {$avg: \"$grades.score\"}\n    }},\n    {$sort: {moyenne: -1}}\n])"}}
{"t":{"$date":"2023-03-09T13:28:42.209Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$unwind":"$grades"},{"$match":{"cuisine":"Italian"}},{"$group":{"_id":"$borough","names":{"$push":{"$concat":["$name"," ","id: ","$restaurant_id"]}},"moyenne":{"$avg":"$grades.score"}}},{"$sort":{"moyenne":-1}}]}}}
{"t":{"$date":"2023-03-09T13:28:42.377Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-09T13:29:11.027Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    { $unwind : \"$grades\" } ,\n    {$group: {\n        _id: \"$name\",\n        names: {$push: {$concat:[\"$name\", \" \", \"id: \",\"$restaurant_id\"]}},\n        moyenne: {$avg: \"$grades.score\"}\n    }},\n    {$sort: {moyenne: -1}}\n])"}}
{"t":{"$date":"2023-03-09T13:29:11.032Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$unwind":"$grades"},{"$group":{"_id":"$name","names":{"$push":{"$concat":["$name"," ","id: ","$restaurant_id"]}},"moyenne":{"$avg":"$grades.score"}}},{"$sort":{"moyenne":-1}}]}}}
{"t":{"$date":"2023-03-09T13:33:28.953Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$group: {\n        _id: {cuisine: \"$cuisine\", borough: \"$borough\" },\n        names: {$push: {name: \"$name\", restaurant: \"$restaurant_id\"}}\n    }},\n    {limit: 2}\n])"}}
{"t":{"$date":"2023-03-09T13:33:28.959Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":{"cuisine":"$cuisine","borough":"$borough"},"names":{"$push":{"name":"$name","restaurant":"$restaurant_id"}}}},{"limit":2}]}}}
{"t":{"$date":"2023-03-09T13:33:28.968Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: Unrecognized pipeline stage name: 'limit'","attr":{"ok":0,"code":40324,"codeName":"Location40324","message":"Unrecognized pipeline stage name: 'limit'","name":"MongoServerError","stack":"MongoServerError: Unrecognized pipeline stage name: 'limit'\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-09T13:33:38.730Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$group: {\n        _id: {cuisine: \"$cuisine\", borough: \"$borough\" },\n        names: {$push: {name: \"$name\", restaurant: \"$restaurant_id\"}}\n    }},\n    {$limit: 2}\n])"}}
{"t":{"$date":"2023-03-09T13:33:38.735Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$group":{"_id":{"cuisine":"$cuisine","borough":"$borough"},"names":{"$push":{"name":"$name","restaurant":"$restaurant_id"}}}},{"$limit":2}]}}}
{"t":{"$date":"2023-03-09T13:39:53.097Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$match: {\n        cuisine: 'Italian'\n    }},\n    {$unwind : \"$grades\"},\n    {$project: {\n        name: 1,\n        avg: {$avg: \"$grades.score\"},\n        _id: 0\n    }},\n    {$sort: {avg: -1}},\n    {$limit:5},\n    {$out: \"top5\"}\n])"}}
{"t":{"$date":"2023-03-09T13:39:53.107Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"cuisine":"Italian"}},{"$unwind":"$grades"},{"$project":{"name":1,"avg":{"$avg":"$grades.score"},"_id":0}},{"$sort":{"avg":-1}},{"$limit":5},{"$out":"top5"}]}}}
{"t":{"$date":"2023-03-09T13:40:09.926Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Missing semicolon. (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m shox collections\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"MissingSemicolon","loc":{"line":1,"column":4,"index":4},"pos":4,"message":"Missing semicolon. (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m shox collections\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Missing semicolon. (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m shox collections\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-09T13:40:16.618Z"},"s":"I","c":"MONGOSH","id":1000000009,"ctx":"shell-api","msg":"Used \"show\" command","attr":{"method":"show collections"}}
{"t":{"$date":"2023-03-09T13:40:27.638Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.top5.find()"}}
{"t":{"$date":"2023-03-09T13:40:27.642Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"top5","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-09T13:49:24.914Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$match: {\n        \"grades.score\": {$gte: 30}\n    }},\n    {$group: {\n        _id: {cuisine: \"$cuisine\", borough: \"$borough\"},\n        sumResto: {$sum: 1}  \n    }},\n    {$sort: {sumResto: -1}},\n])"}}
{"t":{"$date":"2023-03-09T13:49:24.922Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$match":{"grades.score":{"$gte":30}}},{"$group":{"_id":{"cuisine":"$cuisine","borough":"$borough"},"sumResto":{"$sum":1}}},{"$sort":{"sumResto":-1}}]}}}
{"t":{"$date":"2023-03-09T13:54:19.036Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$unwind : \"$grades\"},\n    {$project: {\n        name: 1,\n        avg: {$avg: \"$grades.score\"},\n        _id: 0\n    }},\n    {$sort: {avg: -1}},\n    {$limit:5},\n    {$out: \"top5Best\"}\n])"}}
{"t":{"$date":"2023-03-09T13:54:19.042Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$unwind":"$grades"},{"$project":{"name":1,"avg":{"$avg":"$grades.score"},"_id":0}},{"$sort":{"avg":-1}},{"$limit":5},{"$out":"top5Best"}]}}}
{"t":{"$date":"2023-03-09T13:54:33.861Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.top5Best.find()"}}
{"t":{"$date":"2023-03-09T13:54:33.867Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"top5Best","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-09T13:55:52.976Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$unwind : \"$grades\"},\n    {$group: {\n        name: 1,\n        avg: {$avg: \"$grades.score\"},\n        _id: \"$borough\"\n    }},\n    {$project: {\n        name: 1,\n        avg: {$avg: \"$grades.score\"},\n        _id: 0\n    }},\n    {$sort: {avg: -1}},\n    {$limit:5},\n])"}}
{"t":{"$date":"2023-03-09T13:55:52.980Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$unwind":"$grades"},{"$group":{"name":1,"avg":{"$avg":"$grades.score"},"_id":"$borough"}},{"$project":{"name":1,"avg":{"$avg":"$grades.score"},"_id":0}},{"$sort":{"avg":-1}},{"$limit":5}]}}}
{"t":{"$date":"2023-03-09T13:55:52.995Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: The field 'name' must be an accumulator object","attr":{"ok":0,"code":40234,"codeName":"Location40234","message":"The field 'name' must be an accumulator object","name":"MongoServerError","stack":"MongoServerError: The field 'name' must be an accumulator object\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-09T13:56:17.959Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$unwind : \"$grades\"},\n    {$group: {\n        name: 1,\n        avg: {$avg: \"$grades.score\"},\n        _id: \"$borough\"\n    }},\n    {$sort: {avg: -1}},\n    {$limit:5},\n])"}}
{"t":{"$date":"2023-03-09T13:56:17.965Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$unwind":"$grades"},{"$group":{"name":1,"avg":{"$avg":"$grades.score"},"_id":"$borough"}},{"$sort":{"avg":-1}},{"$limit":5}]}}}
{"t":{"$date":"2023-03-09T13:56:17.974Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: The field 'name' must be an accumulator object","attr":{"ok":0,"code":40234,"codeName":"Location40234","message":"The field 'name' must be an accumulator object","name":"MongoServerError","stack":"MongoServerError: The field 'name' must be an accumulator object\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-09T13:56:46.577Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$unwind : \"$grades\"},\n    {$group: {\n        name: \"$name\",\n        avg: {$avg: \"$grades.score\"},\n        _id: \"$borough\"\n    }},\n    {$sort: {avg: -1}},\n    {$limit:5},\n])"}}
{"t":{"$date":"2023-03-09T13:56:46.583Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$unwind":"$grades"},{"$group":{"name":"$name","avg":{"$avg":"$grades.score"},"_id":"$borough"}},{"$sort":{"avg":-1}},{"$limit":5}]}}}
{"t":{"$date":"2023-03-09T13:56:46.595Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: The field 'name' must be an accumulator object","attr":{"ok":0,"code":40234,"codeName":"Location40234","message":"The field 'name' must be an accumulator object","name":"MongoServerError","stack":"MongoServerError: The field 'name' must be an accumulator object\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-09T13:56:58.499Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$unwind : \"$grades\"},\n    {$group: {\n        avg: {$avg: \"$grades.score\"},\n        _id: \"$borough\"\n    }},\n    {$sort: {avg: -1}},\n    {$limit:5},\n])"}}
{"t":{"$date":"2023-03-09T13:56:58.505Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$unwind":"$grades"},{"$group":{"avg":{"$avg":"$grades.score"},"_id":"$borough"}},{"$sort":{"avg":-1}},{"$limit":5}]}}}
{"t":{"$date":"2023-03-09T13:58:08.200Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$unwind : \"$grades\"},\n    {$group: {\n        avg: {$avg: \"$grades.score\"},\n        _id: \"$name\"\n    }},\n    {$sort: {avg: -1}},\n    {$limit:5},\n])"}}
{"t":{"$date":"2023-03-09T13:58:08.205Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$unwind":"$grades"},{"$group":{"avg":{"$avg":"$grades.score"},"_id":"$name"}},{"$sort":{"avg":-1}},{"$limit":5}]}}}
{"t":{"$date":"2023-03-09T14:03:13.492Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$unwind : \"$grades\"},\n    {$group: {\n        avg: {$avg: \"$grades.score\"},\n        _id: \"$borough\"\n    }},\n    {$sort: {avg: -1}},\n    {$limit:5},\n])"}}
{"t":{"$date":"2023-03-09T14:03:13.499Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$unwind":"$grades"},{"$group":{"avg":{"$avg":"$grades.score"},"_id":"$borough"}},{"$sort":{"avg":-1}},{"$limit":5}]}}}
{"t":{"$date":"2023-03-09T14:14:17.201Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$unwind : \"$grades\"},\n    {$group: {\n        avg: {$avg: \"$grades.score\"},\n        _id: {borough:\"$borough\"},\n        names: {name: {$push: \"$name\"} }\n    }},\n    {$sort: {avg: -1}},\n    {$limit:5},\n])"}}
{"t":{"$date":"2023-03-09T14:14:17.207Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$unwind":"$grades"},{"$group":{"avg":{"$avg":"$grades.score"},"_id":{"borough":"$borough"},"names":{"name":{"$push":"$name"}}}},{"$sort":{"avg":-1}},{"$limit":5}]}}}
{"t":{"$date":"2023-03-09T14:14:17.216Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: The field 'names' must be an accumulator object","attr":{"ok":0,"code":40234,"codeName":"Location40234","message":"The field 'names' must be an accumulator object","name":"MongoServerError","stack":"MongoServerError: The field 'names' must be an accumulator object\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-09T14:15:12.240Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$unwind : \"$grades\"},\n    {$group: {\n        avg: {$avg: \"$grades.score\"},\n        _id: \"$borough\",\n        names:  {$push: \"$name\"} \n    }},\n    {$sort: {avg: -1}},\n    {$limit:5},\n])"}}
{"t":{"$date":"2023-03-09T14:15:12.246Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$unwind":"$grades"},{"$group":{"avg":{"$avg":"$grades.score"},"_id":"$borough","names":{"$push":"$name"}}},{"$sort":{"avg":-1}},{"$limit":5}]}}}
{"t":{"$date":"2023-03-09T14:17:15.952Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {$unwind : \"$grades\"},\n    {$group: {\n        avg: {$avg: \"$grades.score\"},\n        _id: \"$borough\",\n        names:  {$push: \"$name\"} \n    }},\n    {$project: {\n        names:1, avg:1\n    }},\n    {$sort: {avg: -1}},\n    {$limit:5},\n])"}}
{"t":{"$date":"2023-03-09T14:17:15.959Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$unwind":"$grades"},{"$group":{"avg":{"$avg":"$grades.score"},"_id":"$borough","names":{"$push":"$name"}}},{"$project":{"names":1,"avg":1}},{"$sort":{"avg":-1}},{"$limit":5}]}}}
{"t":{"$date":"2023-03-09T14:34:19.887Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    { $unwind : \"$grades\" } ,\n    { $project: {\n        _id: 0,\n        name: 1,\n        avg: { $avg: \"$grades.score\" },\n        borough: 1\n    }},\n    { $sort: { avg: -1 } },\n    { $limit: 1 },\n])"}}
{"t":{"$date":"2023-03-09T14:34:19.895Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$unwind":"$grades"},{"$project":{"_id":0,"name":1,"avg":{"$avg":"$grades.score"},"borough":1}},{"$sort":{"avg":-1}},{"$limit":1}]}}}
{"t":{"$date":"2023-03-09T14:34:37.267Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    { $unwind : \"$grades\" } ,\n    { $project: {\n        _id: 0,\n        name: 1,\n        avg: { $avg: \"$grades.score\" },\n        borough: 1\n    }},\n    { $sort: { avg: -1 } },\n   \n])"}}
{"t":{"$date":"2023-03-09T14:34:37.276Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$unwind":"$grades"},{"$project":{"_id":0,"name":1,"avg":{"$avg":"$grades.score"},"borough":1}},{"$sort":{"avg":-1}}]}}}
{"t":{"$date":"2023-03-09T14:36:29.345Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {\n        $addFields: {\n            gradeA: {\n                $function:{\n                    body: function(grades){\n\n                        return grades.filter(g => g.grade === \"A\" ).length\n                    },\n                    args: [\"$grades\"],\n                    lang: \"js\"\n                }\n            }\n        }\n    },\n    { $project: { gradeA: 1, name: 1, _id: 0, restaurant_id: 1}},\n    { $group: { _id: \"$gradeA\", restaurant_id: { $push : \"$restaurant_id\" }  }},\n    { $sort: { gradeA: -1 } },\n    { $limit: 1 },\n])"}}
{"t":{"$date":"2023-03-09T14:36:29.357Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$addFields":{"gradeA":{"$function":{"args":["$grades"],"lang":"js"}}}},{"$project":{"gradeA":1,"name":1,"_id":0,"restaurant_id":1}},{"$group":{"_id":"$gradeA","restaurant_id":{"$push":"$restaurant_id"}}},{"$sort":{"gradeA":-1}},{"$limit":1}]}}}
{"t":{"$date":"2023-03-09T14:37:28.630Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.aggregate([\n    {\n        $addFields: {\n            gradeA: {\n                $function:{\n                    body: function(grades){\n\n                        return grades.filter(g => g.grade === \"A\" ).length\n                    },\n                    args: [\"$grades\"],\n                    lang: \"js\"\n                }\n            }\n        }\n    },\n    { $project: { gradeA: 1, name: 1, _id: 0, name: 1}},\n    { $group: { _id: \"$gradeA\", name: { $push : \"$name\" }  }},\n    { $sort: { gradeA: -1 } },\n    { $limit: 1 },\n])"}}
{"t":{"$date":"2023-03-09T14:37:28.642Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{},"pipeline":[{"$addFields":{"gradeA":{"$function":{"args":["$grades"],"lang":"js"}}}},{"$project":{"gradeA":1,"name":1,"_id":0}},{"$group":{"_id":"$gradeA","name":{"$push":"$name"}}},{"$sort":{"gradeA":-1}},{"$limit":1}]}}}
{"t":{"$date":"2023-03-10T08:09:20.983Z"},"s":"I","c":"MONGOSH","id":1000000008,"ctx":"shell-api","msg":"Used \"use\" command","attr":{"db":"bookstore"}}
{"t":{"$date":"2023-03-10T08:09:21.005Z"},"s":"I","c":"MONGOSH","id":1000000004,"ctx":"connect","msg":"Connecting to server","attr":{"session_id":"6405cbd677e809a33e084c70","userId":null,"telemetryAnonymousId":"6405bc96ab70e5f05a1f88e2","connectionUri":"<mongodb uri><ip address>:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+1.8.0","is_atlas":false,"is_localhost":true,"is_do":false,"server_version":"6.0.4","node_version":"v16.19.1","mongosh_version":"1.8.0","server_os":"linux","server_arch":"x86_64","is_enterprise":false,"auth_type":"DEFAULT","is_data_federation":false,"dl_version":null,"atlas_version":null,"is_genuine":true,"non_genuine_server_name":"mongodb","fcv":"6.0","api_version":null,"api_strict":null,"api_deprecation_errors":null}}
{"t":{"$date":"2023-03-10T08:10:10.287Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.createCollection('categories')"}}
{"t":{"$date":"2023-03-10T08:10:10.295Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"createCollection","class":"Database","db":"bookstore","arguments":{"name":"categories","options":{}}}}
{"t":{"$date":"2023-03-10T08:13:14.863Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categories.insertMany([\n    { name : \"Programmation\"},\n    { name : \"SQL\"},\n    { name : \"NoSQL\"}\n])"}}
{"t":{"$date":"2023-03-10T08:13:14.871Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"insertMany","class":"Collection","db":"bookstore","coll":"categories","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T08:13:56.174Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.createCollection('books')"}}
{"t":{"$date":"2023-03-10T08:13:56.181Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"createCollection","class":"Database","db":"bookstore","arguments":{"name":"books","options":{}}}}
{"t":{"$date":"2023-03-10T08:14:56.284Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.insertMany([\n    { title : \"Python\" },\n   { title : \"JS\" }, \n   { title : \"PosgreSQL\" }, \n   { title : \"MySQL\" }, \n   { title : \"MongoDB\" }\n])"}}
{"t":{"$date":"2023-03-10T08:14:56.290Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"insertMany","class":"Collection","db":"bookstore","coll":"books","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T08:23:21.167Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.updateMany({}, [\n    { $lookup: {\n        from: \"categories\",\n        localField: \"title\",\n        foreignField: \"name\",\n        as: \"category\"\n    }},\n    { $addFields: {\n        category_id: { $arrayElemAt: [\"$category._id\", 0] }\n    }},\n    { $project: { category: 0 }}\n  ])"}}
{"t":{"$date":"2023-03-10T08:23:21.172Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"books","arguments":{"filter":{},"options":{}}}}
{"t":{"$date":"2023-03-10T08:23:21.190Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: $lookup is not allowed to be used within an update","attr":{"index":0,"code":72,"message":"$lookup is not allowed to be used within an update","name":"MongoServerError","stack":"MongoServerError: $lookup is not allowed to be used within an update\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1438621\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1277217\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1460311\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1459256\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267726)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)"}}
{"t":{"$date":"2023-03-10T08:28:15.685Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.aggregate([\n    { $lookup: {\n        from: \"categories\",\n        localField: \"title\",\n        foreignField: \"name\",\n        as: \"category\"\n    }},\n    { $addFields: {\n        category_id: { $arrayElemAt: [\"$category._id\", 0] }\n    }},\n    { $project: { category: 0 }}\n  ])"}}
{"t":{"$date":"2023-03-10T08:28:15.691Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"aggregate","class":"Collection","db":"bookstore","coll":"books","arguments":{"options":{},"pipeline":[{"$lookup":{"from":"categories","localField":"title","foreignField":"name","as":"category"}},{"$addFields":{"category_id":{"$arrayElemAt":["$category._id",0]}}},{"$project":{"category":0}}]}}}
{"t":{"$date":"2023-03-10T08:29:01.063Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.find()"}}
{"t":{"$date":"2023-03-10T08:29:01.067Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"books","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T08:29:23.126Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categories.find()"}}
{"t":{"$date":"2023-03-10T08:29:23.135Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"categories","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T08:45:03.008Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.findOne()"}}
{"t":{"$date":"2023-03-10T08:45:03.016Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"books","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T09:18:59.503Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"TypeError: Cannot assign to read only property 'message' of object 'SyntaxError: 'import' and 'export' may appear only with 'sourceType: \"module\"' (1:0)\nConsider renaming the file to '.mjs', or setting sourceType:module or sourceType:unambiguous in your Babel config for this file.'","attr":{"message":"Cannot assign to read only property 'message' of object 'SyntaxError: 'import' and 'export' may appear only with 'sourceType: \"module\"' (1:0)\nConsider renaming the file to '.mjs', or setting sourceType:module or sourceType:unambiguous in your Babel config for this file.'","name":"TypeError","stack":"TypeError: Cannot assign to read only property 'message' of object 'SyntaxError: 'import' and 'export' may appear only with 'sourceType: \"module\"' (1:0)\nConsider renaming the file to '.mjs', or setting sourceType:module or sourceType:unambiguous in your Babel config for this file.'\n    at t.default (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:10:78830)\n    at t.default.next (<anonymous>)\n    at t.default (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:22:12196)\n    at t.default.next (<anonymous>)\n    at t.run (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:22:10004)\n    at t.run.next (<anonymous>)\n    at Object.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:22:1802)\n    at Generator.next (<anonymous>)\n    at c (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:655013)\n    at Object.sync (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:657036)"}}
{"t":{"$date":"2023-03-10T09:18:59.922Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-10T09:19:00.220Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"const CONNECTION_STRING = \"<mongodb uri>\";"}}
{"t":{"$date":"2023-03-10T09:19:00.225Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-10T09:19:00.228Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"const client = new MongoClient(CONNECTION_STRING);"}}
{"t":{"$date":"2023-03-10T09:19:00.230Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"ReferenceError: MongoClient is not defined","attr":{"message":"MongoClient is not defined","name":"ReferenceError","stack":"ReferenceError: MongoClient is not defined\n    at REPL3019:36:20\n    at REPL3019:51:5\n    at REPL3019:56:3\n    at Script.runInContext (node:vm:141:12)\n    at PrettyREPLServer.defaultEval (node:repl:574:29)\n    at bound (node:domain:433:15)\n    at PrettyREPLServer.runBound (node:domain:444:12)\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799948\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799676\n    at node:internal/util:364:7"}}
{"t":{"$date":"2023-03-10T09:19:00.232Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"let db = null;"}}
{"t":{"$date":"2023-03-10T09:19:00.234Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoshInvalidInputError: [COMMON-10002] Cannot reassign 'db' to non-Database type","attr":{"name":"MongoshInvalidInputError","code":"COMMON-10002","scope":"COMMON","metadata":null,"message":"[COMMON-10002] Cannot reassign 'db' to non-Database type","stack":"MongoshInvalidInputError: [COMMON-10002] Cannot reassign 'db' to non-Database type\n    at Object.t (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1851170)\n    at REPL3020:36:23\n    at REPL3020:51:5\n    at REPL3020:56:3\n    at Script.runInContext (node:vm:141:12)\n    at PrettyREPLServer.defaultEval (node:repl:574:29)\n    at bound (node:domain:433:15)\n    at PrettyREPLServer.runBound (node:domain:444:12)\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799948\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799676"}}
{"t":{"$date":"2023-03-10T09:19:00.238Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-10T09:19:00.240Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token (2:0)\n\n\u001b[0m \u001b[90m 1 |\u001b[39m   \u001b[36mexport\u001b[39m \u001b[36mfunction\u001b[39m openDataBase(dbName) {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":2,"column":0,"index":41},"pos":41,"message":"Unexpected token (2:0)\n\n\u001b[0m \u001b[90m 1 |\u001b[39m   \u001b[36mexport\u001b[39m \u001b[36mfunction\u001b[39m openDataBase(dbName) {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token (2:0)\n\n\u001b[0m \u001b[90m 1 |\u001b[39m   \u001b[36mexport\u001b[39m \u001b[36mfunction\u001b[39m openDataBase(dbName) {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-10T09:19:00.242Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: 'return' outside of function. (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m     \u001b[36mreturn\u001b[39m client\u001b[33m.\u001b[39mconnect\u001b[33m.\u001b[39mthen(() \u001b[33m=>\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"IllegalReturn","loc":{"line":1,"column":4,"index":4},"pos":4,"message":"'return' outside of function. (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m     \u001b[36mreturn\u001b[39m client\u001b[33m.\u001b[39mconnect\u001b[33m.\u001b[39mthen(() \u001b[33m=>\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: 'return' outside of function. (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m     \u001b[36mreturn\u001b[39m client\u001b[33m.\u001b[39mconnect\u001b[33m.\u001b[39mthen(() \u001b[33m=>\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-10T09:19:00.245Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"console.log('Connection to mongoDB initialized ...');"}}
{"t":{"$date":"2023-03-10T09:19:00.246Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-10T09:19:00.247Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db = client.db(dbName);"}}
{"t":{"$date":"2023-03-10T09:19:00.249Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"TypeError: Cannot read properties of undefined (reading 'db')","attr":{"message":"Cannot read properties of undefined (reading 'db')","name":"TypeError","stack":"TypeError: Cannot read properties of undefined (reading 'db')\n    at REPL3026:34:126\n    at REPL3026:48:5\n    at REPL3026:53:3\n    at Script.runInContext (node:vm:141:12)\n    at PrettyREPLServer.defaultEval (node:repl:574:29)\n    at bound (node:domain:433:15)\n    at PrettyREPLServer.runBound (node:domain:444:12)\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799948\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799676\n    at node:internal/util:364:7"}}
{"t":{"$date":"2023-03-10T09:19:00.252Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-10T09:19:00.253Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: 'return' outside of function. (1:8)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m         \u001b[36mreturn\u001b[39m db\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"IllegalReturn","loc":{"line":1,"column":8,"index":8},"pos":8,"message":"'return' outside of function. (1:8)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m         \u001b[36mreturn\u001b[39m db\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: 'return' outside of function. (1:8)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m         \u001b[36mreturn\u001b[39m db\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-10T09:19:00.254Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":1,"column":4,"index":4},"pos":4,"message":"Unexpected token (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-10T09:19:00.256Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token (1:2)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m   }\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":1,"column":2,"index":2},"pos":2,"message":"Unexpected token (1:2)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m   }\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token (1:2)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m   }\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-10T09:19:00.257Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-10T09:19:00.258Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token (2:0)\n\n\u001b[0m \u001b[90m 1 |\u001b[39m   \u001b[36mexport\u001b[39m \u001b[36mfunction\u001b[39m getCollection(collectionName) {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":2,"column":0,"index":50},"pos":50,"message":"Unexpected token (2:0)\n\n\u001b[0m \u001b[90m 1 |\u001b[39m   \u001b[36mexport\u001b[39m \u001b[36mfunction\u001b[39m getCollection(collectionName) {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token (2:0)\n\n\u001b[0m \u001b[90m 1 |\u001b[39m   \u001b[36mexport\u001b[39m \u001b[36mfunction\u001b[39m getCollection(collectionName) {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-10T09:19:00.261Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"console.log(`Retrieving collection ${collectionName} …`);"}}
{"t":{"$date":"2023-03-10T09:19:00.263Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"ReferenceError: collectionName is not defined","attr":{"message":"collectionName is not defined","name":"ReferenceError","stack":"ReferenceError: collectionName is not defined\n    at REPL3033:34:201\n    at REPL3033:48:5\n    at REPL3033:53:3\n    at Script.runInContext (node:vm:141:12)\n    at PrettyREPLServer.defaultEval (node:repl:574:29)\n    at bound (node:domain:433:15)\n    at PrettyREPLServer.runBound (node:domain:444:12)\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799948\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799676\n    at node:internal/util:364:7"}}
{"t":{"$date":"2023-03-10T09:19:00.264Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-10T09:19:00.265Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: 'return' outside of function. (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m     \u001b[36mreturn\u001b[39m db\u001b[33m.\u001b[39mcollection(collectionName)\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"IllegalReturn","loc":{"line":1,"column":4,"index":4},"pos":4,"message":"'return' outside of function. (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m     \u001b[36mreturn\u001b[39m db\u001b[33m.\u001b[39mcollection(collectionName)\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: 'return' outside of function. (1:4)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m     \u001b[36mreturn\u001b[39m db\u001b[33m.\u001b[39mcollection(collectionName)\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-10T09:19:00.266Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"SyntaxError: Unexpected token (1:2)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m   }\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","attr":{"code":"BABEL_PARSE_ERROR","reasonCode":"UnexpectedToken","loc":{"line":1,"column":2,"index":2},"pos":2,"message":"Unexpected token (1:2)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m   }\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m","name":"SyntaxError","stack":"SyntaxError: Unexpected token (1:2)\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m   }\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n"}}
{"t":{"$date":"2023-03-10T09:22:41.111Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"const categories = db.categories.find().toArray()"}}
{"t":{"$date":"2023-03-10T09:22:41.117Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"categories","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T09:22:41.140Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-10T09:22:41.498Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"// Parcourir tous les documents de la collection books"}}
{"t":{"$date":"2023-03-10T09:22:42.121Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.find().forEach(book => {\n  // Trouver la catégorie correspondante dans le tableau categories\n  const category = categories.find(c => c.name === book.title)\n  // Si une catégorie est trouvée, associer l'id de la catégorie au livre\n  if (category) {\n    db.books.updateOne(\n      { _id: book._id },\n      { $set: { category_id: category._id } }\n    )\n  }\n})"}}
{"t":{"$date":"2023-03-10T09:22:42.134Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"books","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T09:22:59.375Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.find()"}}
{"t":{"$date":"2023-03-10T09:22:59.383Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"books","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T09:24:41.434Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.dropDataBase('bookstore')"}}
{"t":{"$date":"2023-03-10T09:24:41.443Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"TypeError: db.dropDataBase is not a function","attr":{"message":"db.dropDataBase is not a function","name":"TypeError","stack":"TypeError: db.dropDataBase is not a function\n    at REPL3052:34:120\n    at REPL3052:48:5\n    at REPL3052:53:3\n    at Script.runInContext (node:vm:141:12)\n    at PrettyREPLServer.defaultEval (node:repl:574:29)\n    at bound (node:domain:433:15)\n    at PrettyREPLServer.runBound (node:domain:444:12)\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799948\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799676\n    at node:internal/util:364:7"}}
{"t":{"$date":"2023-03-10T09:24:55.654Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.dropDatabase('bookstore')"}}
{"t":{"$date":"2023-03-10T09:25:05.951Z"},"s":"I","c":"MONGOSH","id":1000000008,"ctx":"shell-api","msg":"Used \"use\" command","attr":{"db":"bookstore"}}
{"t":{"$date":"2023-03-10T09:25:05.967Z"},"s":"I","c":"MONGOSH","id":1000000004,"ctx":"connect","msg":"Connecting to server","attr":{"session_id":"6405cbd677e809a33e084c70","userId":null,"telemetryAnonymousId":"6405bc96ab70e5f05a1f88e2","connectionUri":"<mongodb uri><ip address>:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+1.8.0","is_atlas":false,"is_localhost":true,"is_do":false,"server_version":"6.0.4","node_version":"v16.19.1","mongosh_version":"1.8.0","server_os":"linux","server_arch":"x86_64","is_enterprise":false,"auth_type":"DEFAULT","is_data_federation":false,"dl_version":null,"atlas_version":null,"is_genuine":true,"non_genuine_server_name":"mongodb","fcv":"6.0","api_version":null,"api_strict":null,"api_deprecation_errors":null}}
{"t":{"$date":"2023-03-10T09:25:16.004Z"},"s":"I","c":"MONGOSH","id":1000000009,"ctx":"shell-api","msg":"Used \"show\" command","attr":{"method":"show collections"}}
{"t":{"$date":"2023-03-10T09:26:09.654Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.createCollection('categories')"}}
{"t":{"$date":"2023-03-10T09:26:09.661Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"createCollection","class":"Database","db":"bookstore","arguments":{"name":"categories","options":{}}}}
{"t":{"$date":"2023-03-10T09:26:22.370Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"const categories = \n[\n    { name : \"Programmation\"},\n    { name : \"SQL\"},\n    { name : \"NoSQL\"}\n];"}}
{"t":{"$date":"2023-03-10T09:26:31.975Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categories.insertMany(categories)"}}
{"t":{"$date":"2023-03-10T09:26:31.987Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"insertMany","class":"Collection","db":"bookstore","coll":"categories","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T09:26:41.771Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.createCollection('books')"}}
{"t":{"$date":"2023-03-10T09:26:41.779Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"createCollection","class":"Database","db":"bookstore","arguments":{"name":"books","options":{}}}}
{"t":{"$date":"2023-03-10T09:26:49.333Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"const books = [\n    { title : \"Python\" }, // programmation\n    { title : \"JS\" }, // programmation\n    { title : \"PosgreSQL\" }, // SQL\n    { title : \"MySQL\" }, // SQL\n    { title : \"MongoDB\" } // NoSQL\n ];"}}
{"t":{"$date":"2023-03-10T09:27:01.886Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.insertMany(books)"}}
{"t":{"$date":"2023-03-10T09:27:01.893Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"insertMany","class":"Collection","db":"bookstore","coll":"books","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T09:32:20.253Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"const categories = db.categories.find({},{_id:1}).toArray();"}}
{"t":{"$date":"2023-03-10T09:32:20.260Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"categories","arguments":{"query":{},"options":{"projection":{"_id":1}}}}}
{"t":{"$date":"2023-03-10T09:32:20.772Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"console.log(categories);"}}
{"t":{"$date":"2023-03-10T09:34:13.288Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"const categoriesDict = {};"}}
{"t":{"$date":"2023-03-10T09:34:13.400Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"categories.forEach(category => {\n      categoriesDict[category.name] = category._id;\n    });"}}
{"t":{"$date":"2023-03-10T09:34:13.938Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"console.log(categoriesDict);"}}
{"t":{"$date":"2023-03-10T09:39:15.354Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.updateOne(\n    { title: \"Python\" },\n    { $set: { category_id: categories[0]._id } }\n  );"}}
{"t":{"$date":"2023-03-10T09:39:15.363Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateOne","class":"Collection","db":"bookstore","coll":"books","arguments":{"filter":{"title":"Python"},"options":{}}}}
{"t":{"$date":"2023-03-10T09:39:15.409Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-10T09:39:15.512Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.updateOne(\n    { title: \"JS\" },\n    { $set: { category_id: categories[0]._id } }\n  );"}}
{"t":{"$date":"2023-03-10T09:39:15.516Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateOne","class":"Collection","db":"bookstore","coll":"books","arguments":{"filter":{"title":"JS"},"options":{}}}}
{"t":{"$date":"2023-03-10T09:39:15.601Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-10T09:39:15.605Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.updateOne(\n    { title: \"PosgreSQL\" },\n    { $set: { category_id: categories[1]._id } }\n  );"}}
{"t":{"$date":"2023-03-10T09:39:15.695Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateOne","class":"Collection","db":"bookstore","coll":"books","arguments":{"filter":{"title":"PosgreSQL"},"options":{}}}}
{"t":{"$date":"2023-03-10T09:39:15.698Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-10T09:39:15.700Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.updateOne(\n    { title: \"MySQL\" },\n    { $set: { category_id: categories[1]._id } }\n  );"}}
{"t":{"$date":"2023-03-10T09:39:15.810Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateOne","class":"Collection","db":"bookstore","coll":"books","arguments":{"filter":{"title":"MySQL"},"options":{}}}}
{"t":{"$date":"2023-03-10T09:39:15.814Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-10T09:39:16.755Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.updateOne(\n    { title: \"MongoDB\" },\n    { $set: { category_id: categories[2]._id } }\n  );"}}
{"t":{"$date":"2023-03-10T09:39:16.762Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateOne","class":"Collection","db":"bookstore","coll":"books","arguments":{"filter":{"title":"MongoDB"},"options":{}}}}
{"t":{"$date":"2023-03-10T09:39:35.327Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.find()"}}
{"t":{"$date":"2023-03-10T09:39:35.332Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"books","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T09:43:38.322Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.find({ category_id: db.categories.findOne({ name: \"Programmation\" })._id })"}}
{"t":{"$date":"2023-03-10T09:43:38.329Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categories","arguments":{"query":{"name":"Programmation"},"options":{}}}}
{"t":{"$date":"2023-03-10T09:43:38.332Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"books","arguments":{"query":{"category_id":"640af7c733a6bfabe2fd7754"},"options":{}}}}
{"t":{"$date":"2023-03-10T09:44:59.671Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.find(\n    { category_id: db.categories.findOne(\n        { name: \"NoSQL\" })._id }).count()"}}
{"t":{"$date":"2023-03-10T09:44:59.676Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categories","arguments":{"query":{"name":"NoSQL"},"options":{}}}}
{"t":{"$date":"2023-03-10T09:44:59.679Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"books","arguments":{"query":{"category_id":"640af7c733a6bfabe2fd7756"},"options":{}}}}
{"t":{"$date":"2023-03-10T09:44:59.686Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-10T09:48:35.114Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.insertMany(newBooks)"}}
{"t":{"$date":"2023-03-10T09:48:35.122Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"ReferenceError: newBooks is not defined","attr":{"message":"newBooks is not defined","name":"ReferenceError","stack":"ReferenceError: newBooks is not defined\n    at REPL3109:34:229\n    at REPL3109:48:5\n    at REPL3109:53:3\n    at Script.runInContext (node:vm:141:12)\n    at PrettyREPLServer.defaultEval (node:repl:574:29)\n    at bound (node:domain:433:15)\n    at PrettyREPLServer.runBound (node:domain:444:12)\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799948\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:1917:799676\n    at node:internal/util:364:7"}}
{"t":{"$date":"2023-03-10T09:48:42.388Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"const newBooks = [\n    { title : \"Python & SQL\"}, // programmation & SQL\n    { title : \"JS SQL ou NoSQL\" }, // programmation\n    { title : \"Pandas & SQL & NoSQL\"}, // SQL, NoSQL et programmation\n    { title : \"Modélisation des données\"} // aucune catégorie\n]"}}
{"t":{"$date":"2023-03-10T09:48:48.018Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.insertMany(newBooks)"}}
{"t":{"$date":"2023-03-10T09:48:48.026Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"insertMany","class":"Collection","db":"bookstore","coll":"books","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T09:57:42.727Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.updateOne(\n    { title: \"Python & SQL\" },\n    { $set: { category_id: [categories[0]._id, categories[1]._id] } }\n  );"}}
{"t":{"$date":"2023-03-10T09:57:42.738Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateOne","class":"Collection","db":"bookstore","coll":"books","arguments":{"filter":{"title":"Python & SQL"},"options":{}}}}
{"t":{"$date":"2023-03-10T09:57:42.774Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-10T09:57:42.955Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.updateOne(\n    { title: \"JS SQL ou NoSQL\" },\n    { $set: { category_id: [categories[0]._id] } }\n  );"}}
{"t":{"$date":"2023-03-10T09:57:43.119Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateOne","class":"Collection","db":"bookstore","coll":"books","arguments":{"filter":{"title":"JS SQL ou NoSQL"},"options":{}}}}
{"t":{"$date":"2023-03-10T09:57:43.124Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-10T09:57:43.210Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.updateOne(\n    { title: \"Pandas & SQL & NoSQL\" },\n    {\n      $set: {\n        category_id: [categories[0]._id, categories[1]._id, categories[2]._id],\n      },\n    }\n  );"}}
{"t":{"$date":"2023-03-10T09:57:43.214Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateOne","class":"Collection","db":"bookstore","coll":"books","arguments":{"filter":{"title":"Pandas & SQL & NoSQL"},"options":{}}}}
{"t":{"$date":"2023-03-10T09:57:43.218Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-10T09:57:43.999Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.updateOne(\n    { title: \"Modélisation des données\" },\n    { $unset: { category_id: \"\" } }\n  );"}}
{"t":{"$date":"2023-03-10T09:57:44.005Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateOne","class":"Collection","db":"bookstore","coll":"books","arguments":{"filter":{"title":"Modélisation des données"},"options":{}}}}
{"t":{"$date":"2023-03-10T09:58:37.694Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.find()"}}
{"t":{"$date":"2023-03-10T09:58:37.701Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"books","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T09:59:50.834Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.find({\n    category_id: {$exist: false}\n})"}}
{"t":{"$date":"2023-03-10T09:59:50.838Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"books","arguments":{"query":{"category_id":{"$exist":false}},"options":{}}}}
{"t":{"$date":"2023-03-10T09:59:50.850Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: unknown operator: $exist","attr":{"ok":0,"code":2,"codeName":"BadValue","message":"unknown operator: $exist","name":"MongoServerError","stack":"MongoServerError: unknown operator: $exist\n    at Connection.onMessage (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1267623)\n    at MessageStream.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1265503)\n    at MessageStream.emit (node:events:513:28)\n    at MessageStream.emit (node:domain:489:12)\n    at p (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1287145)\n    at MessageStream._write (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1285766)\n    at writeOrBuffer (node:internal/streams/writable:391:12)\n    at _write (node:internal/streams/writable:332:10)\n    at MessageStream.Writable.write (node:internal/streams/writable:336:10)\n    at Socket.ondata (node:internal/streams/readable:754:22)"}}
{"t":{"$date":"2023-03-10T10:00:50.252Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.books.find({\n    category_id: {$exists: false}\n})"}}
{"t":{"$date":"2023-03-10T10:00:50.256Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"books","arguments":{"query":{"category_id":{"$exists":false}},"options":{}}}}
{"t":{"$date":"2023-03-10T10:02:49.260Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.createCollection('categoriestree')"}}
{"t":{"$date":"2023-03-10T10:02:49.266Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"createCollection","class":"Database","db":"bookstore","arguments":{"name":"categoriestree","options":{}}}}
{"t":{"$date":"2023-03-10T10:04:16.434Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categoriestree.insertMany([\n    [\n        {\n           _id: \"Books\",\n           parent: null,\n           name: \"Informatique\"\n        },\n        {\n           _id: \"Programming\",\n           parent: \"Books\",\n           books: [\n                 \"Python apprendre\",\n                 \"Pandas & Python\",\n                 \"async/await JS & Python\",\n                 \"JS paradigme objet\",\n                 \"Anaconda\"\n           ]\n        },\n        {\n           _id: \"Database\",\n           parent: \"Programming\",\n           books: [\n                 \"NoSQL & devenir expert avec la console\",\n                 \"NoSQL drivers\",\n                 \"SQL\"\n           ]\n        },\n        {\n           _id: \"MongoDB\",\n           parent: \"Database\",\n           books: [\n                 \"Introduction à MongoDB\",\n                 \"MongoDB aggrégation\"\n           ]\n        }\n     ]\n])"}}
{"t":{"$date":"2023-03-10T10:04:16.442Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"insertMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T10:04:36.032Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categoriestree.find()"}}
{"t":{"$date":"2023-03-10T10:04:36.037Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T10:05:30.047Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categoriestree.insertMany(\n    [\n        {\n           _id: \"Books\",\n           parent: null,\n           name: \"Informatique\"\n        },\n        {\n           _id: \"Programming\",\n           parent: \"Books\",\n           books: [\n                 \"Python apprendre\",\n                 \"Pandas & Python\",\n                 \"async/await JS & Python\",\n                 \"JS paradigme objet\",\n                 \"Anaconda\"\n           ]\n        },\n        {\n           _id: \"Database\",\n           parent: \"Programming\",\n           books: [\n                 \"NoSQL & devenir expert avec la console\",\n                 \"NoSQL drivers\",\n                 \"SQL\"\n           ]\n        },\n        {\n           _id: \"MongoDB\",\n           parent: \"Database\",\n           books: [\n                 \"Introduction à MongoDB\",\n                 \"MongoDB aggrégation\"\n           ]\n        }\n     ]\n)"}}
{"t":{"$date":"2023-03-10T10:05:30.053Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"insertMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T10:05:35.507Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categoriestree.find()"}}
{"t":{"$date":"2023-03-10T10:05:35.513Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T10:09:30.909Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categoriestree.createIndex( { parent: 1 } );"}}
{"t":{"$date":"2023-03-10T10:09:30.916Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"createIndex","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"keys":{"parent":1},"options":{}}}}
{"t":{"$date":"2023-03-10T10:09:41.176Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categoriestree.find()"}}
{"t":{"$date":"2023-03-10T10:09:41.181Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T10:26:08.267Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"const categoriestree = db.categoriestree.find();"}}
{"t":{"$date":"2023-03-10T10:26:08.272Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T10:26:08.769Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-10T10:26:08.773Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"// Parcourir toutes les catégories"}}
{"t":{"$date":"2023-03-10T10:26:09.294Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"categoriestree.forEach(function(category) {\n\n  // Initialiser la liste des ancêtres\n  let ancestors = [];\n\n  // Trouver le parent de la catégorie courante\n  let parent = db.categoriestree.findOne({_id: category.parent_id});\n\n  // Tant qu'il y a un parent, l'ajouter à la liste des ancêtres\n  while (parent) {\n    ancestors.push(parent);\n    parent = db.categoriestree.findOne({_id: parent.parent_id});\n  }\n\n  // Ajouter la liste des ancêtres à la catégorie courante\n  db.categoriestree.update({_id: category._id}, {$addToSet: {ancestors: {$each: ancestors.reverse()}}});\n});"}}
{"t":{"$date":"2023-03-10T10:26:09.301Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:26:09.304Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"update","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"640b00a033a6bfabe2fd7760"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:26:09.307Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:26:09.310Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"update","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"Books"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:26:09.315Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:26:09.321Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"update","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"Programming"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:26:09.325Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:26:09.327Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"update","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"Database"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:26:09.329Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:26:09.333Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"update","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"MongoDB"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:26:09.345Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Collection","method":"update"}}
{"t":{"$date":"2023-03-10T10:26:25.964Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"const categoriestree = db.categoriestree.find();"}}
{"t":{"$date":"2023-03-10T10:26:25.971Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T10:26:26.528Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-10T10:26:26.532Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"// Parcourir toutes les catégories"}}
{"t":{"$date":"2023-03-10T10:26:27.073Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"categoriestree.forEach(function(category) {\n\n  // Initialiser la liste des ancêtres\n  let ancestors = [];\n\n  // Trouver le parent de la catégorie courante\n  let parent = db.categoriestree.findOne({_id: category.parent_id});\n\n  // Tant qu'il y a un parent, l'ajouter à la liste des ancêtres\n  while (parent) {\n    ancestors.push(parent);\n    parent = db.categoriestree.findOne({_id: parent.parent_id});\n  }\n\n  // Ajouter la liste des ancêtres à la catégorie courante\n  db.categoriestree.updateMany({_id: category._id}, {$addToSet: {ancestors: {$each: ancestors.reverse()}}});\n});"}}
{"t":{"$date":"2023-03-10T10:26:27.091Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:26:27.096Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"640b00a033a6bfabe2fd7760"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:26:27.101Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:26:27.107Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"Books"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:26:27.109Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:26:27.112Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"Programming"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:26:27.115Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:26:27.118Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"Database"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:26:27.120Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:26:27.124Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"MongoDB"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:26:36.147Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categoriestree.find(\n   { _id : \"MongoDB\" },\n   { ancestors : 1 }\n);"}}
{"t":{"$date":"2023-03-10T10:26:36.153Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"MongoDB"},"options":{"projection":{"ancestors":1}}}}}
{"t":{"$date":"2023-03-10T10:26:36.760Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-10T10:29:03.659Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"const categoriestree = db.categoriestree.find();"}}
{"t":{"$date":"2023-03-10T10:29:03.666Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T10:29:04.138Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-10T10:29:04.140Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"// Parcourir toutes les catégories"}}
{"t":{"$date":"2023-03-10T10:29:04.632Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"categoriestree.forEach(function(category) {\n\n  // Initialiser la liste des ancêtres\n  let ancestors = [];\n\n  // Trouver le parent de la catégorie courante\n  let parent = db.categoriestree.findOne({_id: category.parent});\n\n  // Tant qu'il y a un parent, l'ajouter à la liste des ancêtres\n  while (parent) {\n    ancestors.push(parent);\n    parent = db.categoriestree.findOne({_id: parent.parent});\n  }\n\n  // Ajouter la liste des ancêtres à la catégorie courante\n  db.categoriestree.updateMany({_id: category._id}, {$addToSet: {ancestors: {$each: ancestors.reverse()}}});\n});"}}
{"t":{"$date":"2023-03-10T10:29:04.641Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:29:04.643Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"640b00a033a6bfabe2fd7760"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:29:04.647Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":null},"options":{}}}}
{"t":{"$date":"2023-03-10T10:29:04.649Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"Books"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:29:04.652Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Books"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:29:04.656Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":null},"options":{}}}}
{"t":{"$date":"2023-03-10T10:29:04.658Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"Programming"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:29:04.661Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Programming"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:29:04.664Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Books"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:29:04.667Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":null},"options":{}}}}
{"t":{"$date":"2023-03-10T10:29:04.669Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"Database"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:29:04.674Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Database"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:29:04.676Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Programming"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:29:04.678Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Books"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:29:04.680Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":null},"options":{}}}}
{"t":{"$date":"2023-03-10T10:29:04.683Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"MongoDB"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:29:12.607Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"const categoriestree = db.categoriestree.find();"}}
{"t":{"$date":"2023-03-10T10:29:12.612Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T10:29:18.077Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categoriestree.find( { _id: \"MongoDB\" }, { ancestors: 1 });"}}
{"t":{"$date":"2023-03-10T10:29:18.082Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"MongoDB"},"options":{"projection":{"ancestors":1}}}}}
{"t":{"$date":"2023-03-10T10:33:38.292Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"const categoriestree = db.categoriestree.find();"}}
{"t":{"$date":"2023-03-10T10:33:38.303Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T10:33:38.841Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-10T10:33:38.847Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"// Parcourir toutes les catégories"}}
{"t":{"$date":"2023-03-10T10:33:39.737Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"categoriestree.forEach(function(category) {\n\n  // Initialiser la liste des ancêtres\n  let ancestors = [];\n\n  // Trouver le parent de la catégorie courante\n  let parent = db.categoriestree.findOne({_id: category.parent}, {parent: 1});\n\n  // Tant qu'il y a un parent, l'ajouter à la liste des ancêtres\n  while (parent) {\n    ancestors.push(parent);\n    parent = db.categoriestree.findOne({_id: parent.parent});\n  }\n\n  // Ajouter la liste des ancêtres à la catégorie courante\n  db.categoriestree.updateMany({_id: category._id}, {$addToSet: {ancestors: {$each: ancestors.reverse()}}});\n});"}}
{"t":{"$date":"2023-03-10T10:33:39.748Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{"projection":{"parent":1}}}}}
{"t":{"$date":"2023-03-10T10:33:39.751Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"640b00a033a6bfabe2fd7760"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:33:39.755Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":null},"options":{"projection":{"parent":1}}}}}
{"t":{"$date":"2023-03-10T10:33:39.758Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"Books"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:33:39.764Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Books"},"options":{"projection":{"parent":1}}}}}
{"t":{"$date":"2023-03-10T10:33:39.767Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":null},"options":{}}}}
{"t":{"$date":"2023-03-10T10:33:39.769Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"Programming"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:33:39.772Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Programming"},"options":{"projection":{"parent":1}}}}}
{"t":{"$date":"2023-03-10T10:33:39.775Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Books"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:33:39.777Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":null},"options":{}}}}
{"t":{"$date":"2023-03-10T10:33:39.780Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"Database"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:33:39.782Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Database"},"options":{"projection":{"parent":1}}}}}
{"t":{"$date":"2023-03-10T10:33:39.786Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Programming"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:33:39.788Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Books"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:33:39.790Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":null},"options":{}}}}
{"t":{"$date":"2023-03-10T10:33:39.792Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"MongoDB"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:33:49.717Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categoriestree.find();"}}
{"t":{"$date":"2023-03-10T10:33:49.720Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T10:34:50.140Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"categoriestree.forEach(function(category) {\n\n  // Initialiser la liste des ancêtres\n  let ancestors = [];\n\n  // Trouver le parent de la catégorie courante\n  let parent = db.categoriestree.findOne({_id: category._id}, {_id: 1});\n\n  // Tant qu'il y a un parent, l'ajouter à la liste des ancêtres\n  while (parent) {\n    ancestors.push(parent);\n    parent = db.categoriestree.findOne({_id: parent.parent});\n  }\n\n  // Ajouter la liste des ancêtres à la catégorie courante\n  db.categoriestree.updateMany({_id: category._id}, {$addToSet: {ancestors: {$each: ancestors.reverse()}}});\n});"}}
{"t":{"$date":"2023-03-10T10:34:50.165Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoCursorExhaustedError: Cursor is exhausted","attr":{"message":"Cursor is exhausted","name":"MongoCursorExhaustedError","stack":"MongoCursorExhaustedError: Cursor is exhausted\n    at FindCursor.tryNext (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1327404)\n    at Cursor.tryNext (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1668678)\n    at Cursor.tryNext (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1755603)\n    at Cursor.tryNext (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1754740)\n    at Cursor.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1750338)\n    at Cursor.tryNext (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1754740)\n    at Cursor.[Symbol.asyncIterator] (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1668822)\n    at l.next (<anonymous>)\n    at Cursor.forEach (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1668556)\n    at Cursor.forEach (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1755603)"}}
{"t":{"$date":"2023-03-10T10:35:03.683Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"const categoriestree = db.categoriestree.find();"}}
{"t":{"$date":"2023-03-10T10:35:03.690Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T10:35:04.286Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-10T10:35:04.290Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"// Parcourir toutes les catégories"}}
{"t":{"$date":"2023-03-10T10:35:04.856Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"categoriestree.forEach(function(category) {\n\n  // Initialiser la liste des ancêtres\n  let ancestors = [];\n\n  // Trouver le parent de la catégorie courante\n  let parent = db.categoriestree.findOne({_id: category._id}, {_id: 1});\n\n  // Tant qu'il y a un parent, l'ajouter à la liste des ancêtres\n  while (parent) {\n    ancestors.push(parent);\n    parent = db.categoriestree.findOne({_id: parent.parent});\n  }\n\n  // Ajouter la liste des ancêtres à la catégorie courante\n  db.categoriestree.updateMany({_id: category._id}, {$addToSet: {ancestors: {$each: ancestors.reverse()}}});\n});"}}
{"t":{"$date":"2023-03-10T10:35:04.871Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"640b00a033a6bfabe2fd7760"},"options":{"projection":{"_id":1}}}}}
{"t":{"$date":"2023-03-10T10:35:04.873Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:35:04.878Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"640b00a033a6bfabe2fd7760"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:35:04.882Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Books"},"options":{"projection":{"_id":1}}}}}
{"t":{"$date":"2023-03-10T10:35:04.885Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:35:04.887Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"Books"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:35:04.892Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Programming"},"options":{"projection":{"_id":1}}}}}
{"t":{"$date":"2023-03-10T10:35:04.895Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:35:04.898Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"Programming"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:35:04.901Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Database"},"options":{"projection":{"_id":1}}}}}
{"t":{"$date":"2023-03-10T10:35:04.904Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:35:04.906Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"Database"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:35:04.909Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"MongoDB"},"options":{"projection":{"_id":1}}}}}
{"t":{"$date":"2023-03-10T10:35:04.912Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:35:04.914Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"MongoDB"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:35:13.603Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categoriestree.find();"}}
{"t":{"$date":"2023-03-10T10:35:13.612Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T10:38:00.646Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"const categoriestree = db.categoriestree.find();"}}
{"t":{"$date":"2023-03-10T10:38:00.655Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T10:38:01.152Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-10T10:38:01.157Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"// Parcourir toutes les catégories"}}
{"t":{"$date":"2023-03-10T10:38:01.799Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"categoriestree.forEach(function(category) {\n\n  // Initialiser la liste des ancêtres\n  let ancestors = [];\n\n  // Trouver le parent de la catégorie courante\n  let parent = db.categoriestree.findOne({_id: category._id}, {_id: 1});\n\n  // Tant qu'il y a un parent, l'ajouter à la liste des ancêtres\n  while (parent) {\n    ancestors.push(parent);\n    parent = db.categoriestree.findOne({_id: parent.parent});\n  }\n\n  // Ajouter la liste des ancêtres à la catégorie courante\n  db.categoriestree.updateMany({_id: category._id}, {$addToSet: {ancestors: {$each: ancestors.reverse()}}},{$project: {_id:0, ancestors:1}});\n});"}}
{"t":{"$date":"2023-03-10T10:38:01.815Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"640b00a033a6bfabe2fd7760"},"options":{"projection":{"_id":1}}}}}
{"t":{"$date":"2023-03-10T10:38:01.818Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:38:01.821Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"640b00a033a6bfabe2fd7760"},"options":{"$project":{"_id":0,"ancestors":1}}}}}
{"t":{"$date":"2023-03-10T10:38:01.823Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Books"},"options":{"projection":{"_id":1}}}}}
{"t":{"$date":"2023-03-10T10:38:01.828Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:38:01.831Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"Books"},"options":{"$project":{"_id":0,"ancestors":1}}}}}
{"t":{"$date":"2023-03-10T10:38:01.835Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Programming"},"options":{"projection":{"_id":1}}}}}
{"t":{"$date":"2023-03-10T10:38:01.838Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:38:01.840Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"Programming"},"options":{"$project":{"_id":0,"ancestors":1}}}}}
{"t":{"$date":"2023-03-10T10:38:01.842Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Database"},"options":{"projection":{"_id":1}}}}}
{"t":{"$date":"2023-03-10T10:38:01.845Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:38:01.847Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"Database"},"options":{"$project":{"_id":0,"ancestors":1}}}}}
{"t":{"$date":"2023-03-10T10:38:01.851Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"MongoDB"},"options":{"projection":{"_id":1}}}}}
{"t":{"$date":"2023-03-10T10:38:01.854Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:38:01.858Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"MongoDB"},"options":{"$project":{"_id":0,"ancestors":1}}}}}
{"t":{"$date":"2023-03-10T10:38:17.596Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categoriestree.find()"}}
{"t":{"$date":"2023-03-10T10:38:17.603Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T10:39:06.306Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.collection.drop('categoriestree')"}}
{"t":{"$date":"2023-03-10T10:39:06.315Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"drop","class":"Collection","db":"bookstore","coll":"collection","arguments":{}}}
{"t":{"$date":"2023-03-10T10:39:12.816Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categoriestree.find()"}}
{"t":{"$date":"2023-03-10T10:39:12.821Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T10:39:29.162Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categoriestree.insertMany(\n    [\n        {\n           _id: \"Books\",\n           parent: null,\n           name: \"Informatique\"\n        },\n        {\n           _id: \"Programming\",\n           parent: \"Books\",\n           books: [\n                 \"Python apprendre\",\n                 \"Pandas & Python\",\n                 \"async/await JS & Python\",\n                 \"JS paradigme objet\",\n                 \"Anaconda\"\n           ]\n        },\n        {\n           _id: \"Database\",\n           parent: \"Programming\",\n           books: [\n                 \"NoSQL & devenir expert avec la console\",\n                 \"NoSQL drivers\",\n                 \"SQL\"\n           ]\n        },\n        {\n           _id: \"MongoDB\",\n           parent: \"Database\",\n           books: [\n                 \"Introduction à MongoDB\",\n                 \"MongoDB aggrégation\"\n           ]\n        }\n     ]\n)"}}
{"t":{"$date":"2023-03-10T10:39:29.171Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"insertMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T10:39:29.186Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoBulkWriteError: E11000 duplicate key error collection: bookstore.categoriestree index: _id_ dup key: { _id: \"Books\" }","attr":{"code":11000,"writeErrors":[{"err":{"index":0,"code":11000,"errmsg":"E11000 duplicate key error collection: bookstore.categoriestree index: _id_ dup key: { _id: \"Books\" }","errInfo":null,"op":{"_id":"Books","parent":null,"name":"Informatique"}}}],"result":{"insertedCount":0,"matchedCount":0,"modifiedCount":0,"deletedCount":0,"upsertedCount":0,"upsertedIds":{},"insertedIds":{"0":"Books","1":"Programming","2":"Database","3":"MongoDB"}},"message":"E11000 duplicate key error collection: bookstore.categoriestree index: _id_ dup key: { _id: \"Books\" }","name":"MongoBulkWriteError","stack":"MongoBulkWriteError: E11000 duplicate key error collection: bookstore.categoriestree index: _id_ dup key: { _id: \"Books\" }\n    at OrderedBulkOperation.handleWriteError (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1218515)\n    at l (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1210054)\n    at /tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1508806\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"}}
{"t":{"$date":"2023-03-10T10:42:01.056Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categoriestree.deleteMany({})"}}
{"t":{"$date":"2023-03-10T10:42:01.063Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"deleteMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:42:14.900Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categoriestree.find()"}}
{"t":{"$date":"2023-03-10T10:42:14.906Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T10:44:22.348Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categoriestree.insertMany(\n    [\n        {\n           _id: \"Books\",\n           parent: null,\n           name: \"Informatique\"\n        },\n        {\n           _id: \"Programming\",\n           parent: \"Books\",\n           books: [\n                 \"Python apprendre\",\n                 \"Pandas & Python\",\n                 \"async/await JS & Python\",\n                 \"JS paradigme objet\",\n                 \"Anaconda\"\n           ]\n        },\n        {\n           _id: \"Database\",\n           parent: \"Programming\",\n           books: [\n                 \"NoSQL & devenir expert avec la console\",\n                 \"NoSQL drivers\",\n                 \"SQL\"\n           ]\n        },\n        {\n           _id: \"MongoDB\",\n           parent: \"Database\",\n           books: [\n                 \"Introduction à MongoDB\",\n                 \"MongoDB aggrégation\"\n           ]\n        }\n     ]\n)"}}
{"t":{"$date":"2023-03-10T10:44:22.364Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"insertMany","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T10:44:53.146Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categoriestree.findOne()"}}
{"t":{"$date":"2023-03-10T10:44:53.152Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:46:46.048Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categoriestree.createIndex( { parent: 1 } );"}}
{"t":{"$date":"2023-03-10T10:46:46.055Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"createIndex","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"keys":{"parent":1},"options":{}}}}
{"t":{"$date":"2023-03-10T10:47:56.399Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categoriestree.getIndexes()"}}
{"t":{"$date":"2023-03-10T10:47:56.407Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getIndexes","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{}}}
{"t":{"$date":"2023-03-10T10:51:45.413Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categoriestree.find().forEach(function(doc) {\n    db.categoriestree.updateOne(\n       { _id: doc._id },\n       {\n          $addToSet: {\n             ancestors: {\n                $each: (() => {\n                   const ancestors = [];\n                   let parent = doc.parent;\n \n                   while (parent !== null) {\n                      const parentDoc = db.categoriestree.findOne({ _id: parent });\n                      if (parentDoc) {\n                         ancestors.push({ _id: parentDoc._id });\n                         parent = parentDoc.parent;\n                      } else {\n                         parent = null;\n                      }\n                   }\n \n                   return ancestors.reverse();\n                })()\n             }\n          }\n       }\n    );\n });"}}
{"t":{"$date":"2023-03-10T10:51:45.421Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T10:51:45.426Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"Books"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:51:45.429Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Books"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:51:45.432Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"Programming"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:51:45.438Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Programming"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:51:45.445Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Books"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:51:45.448Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"Database"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:51:45.452Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Database"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:51:45.455Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Programming"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:51:45.458Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{"_id":"Books"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:51:45.462Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"filter":{"_id":"MongoDB"},"options":{}}}}
{"t":{"$date":"2023-03-10T10:51:51.768Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categoriestree.findOne()"}}
{"t":{"$date":"2023-03-10T10:51:51.773Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T10:51:59.359Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.categoriestree.find()"}}
{"t":{"$date":"2023-03-10T10:51:59.364Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"bookstore","coll":"categoriestree","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T11:17:15.983Z"},"s":"I","c":"MONGOSH","id":1000000008,"ctx":"shell-api","msg":"Used \"use\" command","attr":{"db":"ny"}}
{"t":{"$date":"2023-03-10T11:17:16.008Z"},"s":"I","c":"MONGOSH","id":1000000004,"ctx":"connect","msg":"Connecting to server","attr":{"session_id":"6405cbd677e809a33e084c70","userId":null,"telemetryAnonymousId":"6405bc96ab70e5f05a1f88e2","connectionUri":"<mongodb uri><ip address>:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+1.8.0","is_atlas":false,"is_localhost":true,"is_do":false,"server_version":"6.0.4","node_version":"v16.19.1","mongosh_version":"1.8.0","server_os":"linux","server_arch":"x86_64","is_enterprise":false,"auth_type":"DEFAULT","is_data_federation":false,"dl_version":null,"atlas_version":null,"is_genuine":true,"non_genuine_server_name":"mongodb","fcv":"6.0","api_version":null,"api_strict":null,"api_deprecation_errors":null}}
{"t":{"$date":"2023-03-10T11:17:36.595Z"},"s":"I","c":"MONGOSH","id":1000000009,"ctx":"shell-api","msg":"Used \"show\" command","attr":{"method":"show collection"}}
{"t":{"$date":"2023-03-10T11:17:36.600Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"shell-api","msg":"MongoshInvalidInputError: [COMMON-10001] 'collection' is not a valid argument for \"show\".","attr":{"stack":"MongoshInvalidInputError: [COMMON-10001] 'collection' is not a valid argument for \"show\".\n    at Mongo.show (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1800477)\n    at Mongo.show (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1755603)\n    at Mongo.show (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1754740)\n    at Mongo.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1750338)\n    at Mongo.show (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1754740)\n    at ShellApi.show (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1838167)\n    at ShellApi.show (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1755603)\n    at ShellApi.show (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1754740)\n    at ShellApi.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1750338)\n    at ShellApi.show (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1754740)","name":"MongoshInvalidInputError","message":"[COMMON-10001] 'collection' is not a valid argument for \"show\".","code":"COMMON-10001","scope":"COMMON","metadata":null}}
{"t":{"$date":"2023-03-10T11:17:36.603Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoshInvalidInputError: [COMMON-10001] 'collection' is not a valid argument for \"show\".","attr":{"name":"MongoshInvalidInputError","code":"COMMON-10001","scope":"COMMON","metadata":null,"message":"[COMMON-10001] 'collection' is not a valid argument for \"show\".","stack":"MongoshInvalidInputError: [COMMON-10001] 'collection' is not a valid argument for \"show\".\n    at Mongo.show (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1800477)\n    at Mongo.show (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1755603)\n    at Mongo.show (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1754740)\n    at Mongo.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1750338)\n    at Mongo.show (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1754740)\n    at ShellApi.show (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1838167)\n    at ShellApi.show (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1755603)\n    at ShellApi.show (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1754740)\n    at ShellApi.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1750338)\n    at ShellApi.show (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1754740)"}}
{"t":{"$date":"2023-03-10T11:17:39.788Z"},"s":"I","c":"MONGOSH","id":1000000009,"ctx":"shell-api","msg":"Used \"show\" command","attr":{"method":"show collections"}}
{"t":{"$date":"2023-03-10T11:18:24.844Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.createCollection('borough')"}}
{"t":{"$date":"2023-03-10T11:18:24.851Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"createCollection","class":"Database","db":"ny","arguments":{"name":"borough","options":{}}}}
{"t":{"$date":"2023-03-10T11:18:32.547Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.borough.insertMany([\n    { _id: \"Manhattan\", name: \"Manhattan\" },\n    { _id: \"Brooklyn\", name: \"Brooklyn\" },\n    { _id: \"Bronx\", name: \"Bronx\" },\n    { _id: \"Queens\", name: \"Queens\" },\n    { _id: \"Staten Island\", name: \"Staten Island\" },\n    { _id: \"Missing\", name: \"Missing\"}\n  ]);"}}
{"t":{"$date":"2023-03-10T11:18:32.553Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"insertMany","class":"Collection","db":"ny","coll":"borough","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T11:23:04.891Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"const boroughs = db.borough.find().toArray();"}}
{"t":{"$date":"2023-03-10T11:23:04.897Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"borough","arguments":{"options":{}}}}
{"t":{"$date":"2023-03-10T11:23:04.921Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2023-03-10T11:23:06.015Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"for (borough of boroughs) {\n    db.restaurants.updateMany(\n      { borough: borough._id },\n      { $set: { borough_id: borough._id } }\n    );\n  }"}}
{"t":{"$date":"2023-03-10T11:23:06.020Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"ny","coll":"restaurants","arguments":{"filter":{"borough":"Manhattan"},"options":{}}}}
{"t":{"$date":"2023-03-10T11:23:06.699Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"ny","coll":"restaurants","arguments":{"filter":{"borough":"Brooklyn"},"options":{}}}}
{"t":{"$date":"2023-03-10T11:23:06.958Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"ny","coll":"restaurants","arguments":{"filter":{"borough":"Bronx"},"options":{}}}}
{"t":{"$date":"2023-03-10T11:23:07.105Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"ny","coll":"restaurants","arguments":{"filter":{"borough":"Queens"},"options":{}}}}
{"t":{"$date":"2023-03-10T11:23:07.317Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"ny","coll":"restaurants","arguments":{"filter":{"borough":"Staten Island"},"options":{}}}}
{"t":{"$date":"2023-03-10T11:23:07.379Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"ny","coll":"restaurants","arguments":{"filter":{"borough":"Missing"},"options":{}}}}
{"t":{"$date":"2023-03-10T11:23:23.170Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.findOne()"}}
{"t":{"$date":"2023-03-10T11:23:23.176Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T11:24:02.904Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    borough_id: {$exists: true}\n})"}}
{"t":{"$date":"2023-03-10T11:24:02.908Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"borough_id":{"$exists":true}},"options":{}}}}
{"t":{"$date":"2023-03-10T11:24:16.225Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find({\n    borough_id: {$exists: true}\n}).count()"}}
{"t":{"$date":"2023-03-10T11:24:16.230Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{"borough_id":{"$exists":true}},"options":{}}}}
{"t":{"$date":"2023-03-10T11:24:16.261Z"},"s":"W","c":"MONGOSH","id":1000000033,"ctx":"shell-api","msg":"Deprecated API call","attr":{"class":"Cursor","method":"count"}}
{"t":{"$date":"2023-03-10T11:27:36.852Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.updateMany(\n    { $unset: { borough: \"\"}},\n    {\"upsert\": false}\n )"}}
{"t":{"$date":"2023-03-10T11:27:36.857Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"ny","coll":"restaurants","arguments":{"filter":{"$unset":{"borough":""}},"options":{}}}}
{"t":{"$date":"2023-03-10T11:27:36.865Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoInvalidArgumentError: Update document requires atomic operators","attr":{"message":"Update document requires atomic operators","name":"MongoInvalidArgumentError","stack":"MongoInvalidArgumentError: Update document requires atomic operators\n    at new UpdateManyOperation (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1438409)\n    at Collection.updateMany (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1295254)\n    at CliServiceProvider.updateMany (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:946502)\n    at Proxy.updateMany (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1689187)\n    at async Proxy.updateMany (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1755595)\n    at async Proxy.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1749809)\n    at async Proxy.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1750244)\n    at async REPL3513:40:25\n    at async ShellEvaluator.innerEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931343)\n    at async ShellEvaluator.customEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931482)"}}
{"t":{"$date":"2023-03-10T11:28:23.219Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.updateMany(\n    { $unset: { borough: \"\"}},\n    {\"upsert\": false}\n )"}}
{"t":{"$date":"2023-03-10T11:28:23.223Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"ny","coll":"restaurants","arguments":{"filter":{"$unset":{"borough":""}},"options":{}}}}
{"t":{"$date":"2023-03-10T11:28:23.230Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoInvalidArgumentError: Update document requires atomic operators","attr":{"message":"Update document requires atomic operators","name":"MongoInvalidArgumentError","stack":"MongoInvalidArgumentError: Update document requires atomic operators\n    at new UpdateManyOperation (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1438409)\n    at Collection.updateMany (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1295254)\n    at CliServiceProvider.updateMany (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:946502)\n    at Proxy.updateMany (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1689187)\n    at async Proxy.updateMany (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1755595)\n    at async Proxy.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1749809)\n    at async Proxy.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1750244)\n    at async REPL3517:40:25\n    at async ShellEvaluator.innerEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931343)\n    at async ShellEvaluator.customEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931482)"}}
{"t":{"$date":"2023-03-10T11:29:23.580Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.updateMany(\n    { $unset: { borough: \"\"}},\n )"}}
{"t":{"$date":"2023-03-10T11:29:23.584Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"ny","coll":"restaurants","arguments":{"filter":{"$unset":{"borough":""}},"options":{}}}}
{"t":{"$date":"2023-03-10T11:29:23.589Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoInvalidArgumentError: Update document requires atomic operators","attr":{"message":"Update document requires atomic operators","name":"MongoInvalidArgumentError","stack":"MongoInvalidArgumentError: Update document requires atomic operators\n    at new UpdateManyOperation (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1438409)\n    at Collection.updateMany (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1295254)\n    at CliServiceProvider.updateMany (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:946502)\n    at Proxy.updateMany (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1689187)\n    at async Proxy.updateMany (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1755595)\n    at async Proxy.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1749809)\n    at async Proxy.<anonymous> (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1750244)\n    at async REPL3520:38:25\n    at async ShellEvaluator.innerEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931343)\n    at async ShellEvaluator.customEval (/tmp/m/boxednode/mongosh/node-v16.19.1/out/Release/node:3902:1931482)"}}
{"t":{"$date":"2023-03-10T11:30:09.421Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.updateMany(\n    {},\n    { $unset: { borough: \"\"}},\n )"}}
{"t":{"$date":"2023-03-10T11:30:09.427Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"updateMany","class":"Collection","db":"ny","coll":"restaurants","arguments":{"filter":{},"options":{}}}}
{"t":{"$date":"2023-03-10T11:30:22.352Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.findOne()"}}
{"t":{"$date":"2023-03-10T11:30:22.357Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"ny","coll":"restaurants","arguments":{"query":{},"options":{}}}}
{"t":{"$date":"2023-03-10T12:46:59.432Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.restaurants.find()"}}
{"t":{"$date":"2023-03-10T12:46:59.442Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"find","class":"Collection","db":"ny","coll":"restaurants","arguments":{"options":{}}}}
